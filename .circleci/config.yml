version: 2.1

executors:
  node-browsers-small:
    docker:
      - image: cimg/node:22.15-browsers
    resource_class: small
    environment:
      NODE_OPTIONS: --max_old_space_size=2048
  node-browsers-medium:
    docker:
      - image: cimg/node:22.15-browsers
    resource_class: medium
    environment:
      NODE_OPTIONS: --max_old_space_size=3072
  node-linux-medium:
    machine:
      image: ubuntu-2404:2024.05.1
    resource_class: medium #// linux medium: 2 CPUs, 7.5 GB RAM, 10 credits/min
    environment:
      NODE_OPTIONS: --max_old_space_size=6144

orbs:
  gh: circleci/github-cli@2.0

aliases:
  # Shallow Git Clone
  - &shallow-git-clone-and-enable-vnc
    name: Shallow Git Clone
    command: |
      #!/bin/bash
      set -e
      set -u
      set -o pipefail

      # Set up SSH access
      # This SSH key is the current github.com SSH key as of June 2023, but it will need to be changed whenever github changes their key (probably every few years)
      GITHUB_SSH_KEY="AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
      mkdir -p ~/.ssh
      echo github.com ssh-ed25519 $GITHUB_SSH_KEY >> ~/.ssh/known_hosts

      git clone --depth 1 --no-checkout "$CIRCLE_REPOSITORY_URL" .
      git fetch --depth 1 origin "$CIRCLE_SHA1"

      if [ -n "${CIRCLE_TAG-}" ]; then
        echo "Checkout tag '${CIRCLE_TAG}' at commit '${CIRCLE_SHA1}'"
        git checkout "$CIRCLE_TAG"
        git reset --hard "$CIRCLE_SHA1"
      else
        echo "Checkout branch '${CIRCLE_BRANCH}' at commit '${CIRCLE_SHA1}'"
        git checkout -B "$CIRCLE_BRANCH" "$CIRCLE_SHA1"
      fi

      # Piggyback on this alias to enable VNC connections
      # The if statement will only be true on node-browsers executors
      if [ "${SHELL}" != "/bin/bash" ]; then
        cat ${HOME}/project/.circleci/scripts/enable-vnc.sh >> ~/.bashrc
      fi

workflows:
  test_and_release:
    when:
      not:
        or:
          - matches:
              pattern: /^l10n_crowdin_action$/
              value: << pipeline.git.branch >>
          - matches:
              pattern: /^rerun-from-failed.*/
              value: << pipeline.schedule.name >>
    jobs:
      - prep-deps
      - prep-build:
          requires:
            - prep-deps
      - prep-build-mv2:
          requires:
            - prep-deps
      - prep-build-flask:
          requires:
            - prep-deps
      - prep-build-flask-mv2:
          requires:
            - prep-deps
      - prep-build-test:
          requires:
            - prep-deps
      - prep-build-test-mv2:
          requires:
            - prep-deps
      - prep-build-test-flask:
          requires:
            - prep-deps
      - prep-build-test-flask-mv2:
          requires:
            - prep-deps
      - validate-source-maps:
          requires:
            - prep-build
      - validate-source-maps-mv2:
          requires:
            - prep-build-mv2
      - validate-source-maps-flask:
          requires:
            - prep-build-flask
      - validate-source-maps-flask-mv2:
          requires:
            - prep-build-flask-mv2
      - test-mozilla-lint-mv2:
          requires:
            - prep-deps
            - prep-build-mv2
      - test-mozilla-lint-flask-mv2:
          requires:
            - prep-deps
            - prep-build-flask-mv2
      - all-tests-pass:
          requires:
            - validate-source-maps
            - validate-source-maps-flask
            - test-mozilla-lint-mv2
            - test-mozilla-lint-flask-mv2
      - job-publish-prerelease:
          requires:
            - prep-deps
            - prep-build
            - prep-build-mv2
            - prep-build-flask
            - prep-build-flask-mv2
            - prep-build-test
            - prep-build-test-mv2
            - prep-build-test-flask
            - prep-build-test-flask-mv2
            - all-tests-pass
      - job-publish-release:
          filters:
            branches:
              only: master
          requires:
            - prep-deps
            - prep-build
            - prep-build-mv2
            - prep-build-flask
            - prep-build-flask-mv2
            - all-tests-pass

  rerun-from-failed:
    when:
      matches:
        pattern: /^rerun-from-failed.*/
        value: << pipeline.schedule.name >>
    jobs:
      - prep-deps
      - rerun-workflows-from-failed:
          filters:
            branches:
              only: main
          requires:
            - prep-deps

jobs:
  prep-deps:
    executor: node-browsers-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - run:
          name: Save Yarn version
          command: yarn --version > /tmp/YARN_VERSION
      - run:
          name: Save Foundry version
          command: node -e "process.stdout.write(require('./package.json').foundryup.version)" > /tmp/FOUNDRY_VERSION
      - restore_cache:
          keys:
            # First try to get the specific cache for the checksum of the yarn.lock file.
            # This cache key lookup will fail if the lock file is modified and a cache
            # has not yet been persisted for the new checksum.
            - dependency-cache-{{ checksum "/tmp/YARN_VERSION" }}-{{ checksum "yarn.lock" }}-{{ checksum "/tmp/FOUNDRY_VERSION" }}
            # To prevent having to do a full install of every node_module when
            # dependencies change, restore from the last known cache of any
            # branch/checksum with the same Yarn version, the install step will remove
            # cached items that are no longer required and add the new dependencies, and
            # the cache will be persisted.
            - dependency-cache-{{ checksum "/tmp/YARN_VERSION" }}-
      - gh/install
      - run:
          name: Install dependencies
          command: yarn --immutable
      - save_cache:
          key: dependency-cache-{{ checksum "/tmp/YARN_VERSION" }}-{{ checksum "yarn.lock" }}-{{ checksum "/tmp/FOUNDRY_VERSION" }}
          paths:
            - .yarn/cache
            - .metamask/cache # should match yarn's relative location
      - persist_to_workspace:
          root: .
          paths:
            - .metamask/cache # ensures anvil is installed
            - node_modules
            - build-artifacts

  prep-build:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - when:
          condition:
            not:
              matches:
                pattern: /^master$/
                value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:dist
                command: yarn build dist
      - when:
          condition:
            matches:
              pattern: /^master$/
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:prod
                command: yarn build prod
      - run:
          name: build:debug
          command: find dist/ -type f -exec md5sum {} \; | sort -k 2
      - store_artifacts:
          path: builds
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - builds

  prep-build-mv2:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - when:
          condition:
            not:
              matches:
                pattern: /^master$/
                value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:dist
                command: ENABLE_MV3=false yarn build dist
      - when:
          condition:
            matches:
              pattern: /^master$/
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:prod
                command: ENABLE_MV3=false yarn build prod
      - run:
          name: build:debug
          command: find dist/ -type f -exec md5sum {} \; | sort -k 2
      - run:
          name: Move mm build to 'dist-mv2' to avoid conflict with production build
          command: mv ./dist ./dist-mv2
      - run:
          name: Move mm zips to 'builds-mv2' to avoid conflict with production build
          command: mv ./builds ./builds-mv2
      - store_artifacts:
          path: builds-mv2
      - persist_to_workspace:
          root: .
          paths:
            - dist-mv2
            - builds-mv2

  prep-build-flask:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - when:
          condition:
            not:
              matches:
                pattern: /^master$/
                value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:dist
                command: yarn build --build-type flask dist
      - when:
          condition:
            matches:
              pattern: /^master$/
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:prod
                command: yarn build --build-type flask prod
      - run:
          name: build:debug
          command: find dist/ -type f -exec md5sum {} \; | sort -k 2
      - run:
          name: Move flask build to 'dist-flask' to avoid conflict with production build
          command: mv ./dist ./dist-flask
      - run:
          name: Move flask zips to 'builds-flask' to avoid conflict with production build
          command: mv ./builds ./builds-flask
      - persist_to_workspace:
          root: .
          paths:
            - dist-flask
            - builds-flask

  prep-build-flask-mv2:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - when:
          condition:
            not:
              matches:
                pattern: /^master$/
                value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:dist
                command: ENABLE_MV3=false yarn build --build-type flask dist
      - when:
          condition:
            matches:
              pattern: /^master$/
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: build:prod
                command: ENABLE_MV3=false yarn build --build-type flask prod
      - run:
          name: build:debug
          command: find dist/ -type f -exec md5sum {} \; | sort -k 2
      - run:
          name: Move flask build to 'dist-flask' to avoid conflict with production build
          command: mv ./dist ./dist-flask-mv2
      - run:
          name: Move flask zips to 'builds-flask' to avoid conflict with production build
          command: mv ./builds ./builds-flask-mv2
      - persist_to_workspace:
          root: .
          paths:
            - dist-flask-mv2
            - builds-flask-mv2

  prep-build-test-flask:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Build extension for testing
          command: yarn build:test:flask
      - run:
          name: Move test build to 'dist-test-flask' to avoid conflict with production build
          command: mv ./dist ./dist-test-flask
      - run:
          name: Move test zips to 'builds-test-flask' to avoid conflict with production build
          command: mv ./builds ./builds-test-flask
      - persist_to_workspace:
          root: .
          paths:
            - dist-test-flask
            - builds-test-flask

  prep-build-test-flask-mv2:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Build extension for testing
          command: yarn build:test:flask:mv2
      - run:
          name: Move test build to 'dist-test-flask-mv2' to avoid conflict with production build
          command: mv ./dist ./dist-test-flask-mv2
      - run:
          name: Move test zips to 'builds-test-flask-mv2' to avoid conflict with production build
          command: mv ./builds ./builds-test-flask-mv2
      - persist_to_workspace:
          root: .
          paths:
            - dist-test-flask-mv2
            - builds-test-flask-mv2

  prep-build-test:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Build extension for testing
          command: yarn build:test
      - run:
          name: Move test build to 'dist-test' to avoid conflict with production build
          command: mv ./dist ./dist-test
      - run:
          name: Move test zips to 'builds-test' to avoid conflict with production build
          command: mv ./builds ./builds-test
      - store_artifacts:
          path: builds-test
      - persist_to_workspace:
          root: .
          paths:
            - dist-test
            - builds-test

  prep-build-test-mv2:
    executor: node-linux-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Build extension for testing
          command: yarn build:test:mv2
      - run:
          name: Move test build to 'dist-test-mv2' to avoid conflict with production build
          command: mv ./dist ./dist-test-mv2
      - run:
          name: Move test zips to 'builds-test-mv2' to avoid conflict with production build
          command: mv ./builds ./builds-test-mv2
      - store_artifacts:
          path: builds-test-mv2
      - persist_to_workspace:
          root: .
          paths:
            - dist-test-mv2
            - builds-test-mv2

  rerun-workflows-from-failed:
    executor: node-browsers-small
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Rerun workflows from failed
          command: yarn ci-rerun-from-failed

  job-publish-prerelease:
    executor: node-browsers-medium
    steps:
      - checkout
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: build:source-map-explorer
          command: ./development/source-map-explorer.sh
      - store_artifacts:
          path: dist/sourcemaps
          destination: builds/sourcemaps
      - store_artifacts:
          path: dist-flask/sourcemaps
          destination: builds-flask/sourcemaps
      - store_artifacts:
          path: builds
          destination: builds
      - store_artifacts:
          path: builds-flask
          destination: builds-flask
      - store_artifacts:
          path: builds-flask-mv2
          destination: builds-flask-mv2
      - store_artifacts:
          path: builds-mv2
          destination: builds-mv2
      - store_artifacts:
          path: builds-test
      - store_artifacts:
          path: builds-test-mv2
      - store_artifacts:
          path: builds-test-flask
      - store_artifacts:
          path: builds-test-flask-mv2
      - store_artifacts:
          path: test-artifacts
          destination: test-artifacts
      # important: generate lavamoat viz AFTER uploading builds as artifacts
      - run:
          name: build:lavamoat-viz
          command: ./.circleci/scripts/create-lavamoat-viz.sh
      - store_artifacts:
          path: build-artifacts
          destination: build-artifacts

  job-publish-release:
    executor: node-browsers-small
    steps:
      - add_ssh_keys:
          fingerprints:
            - 'SHA256:It7UdNvvXY8g5aN32yfbPKFxZSV9ny7K8ifDdlP53rQ'
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Publish main release to Sentry
          command: yarn sentry:publish
      - run:
          name: Publish main MV2 release to Sentry
          command: yarn sentry:publish --dist mv2
      - run:
          name: Publish Flask release to Sentry
          command: yarn sentry:publish --build-type flask
      - run:
          name: Publish Flask MV2 release to Sentry
          command: yarn sentry:publish --build-type flask --dist mv2
      - run:
          name: Create GitHub release
          command: .circleci/scripts/release-create-gh-release.sh
      - run:
          name: Push Firefox bundle script
          command: .circleci/scripts/push-firefox-bundle-script.sh

  validate-source-maps:
    executor: node-browsers-small
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Validate source maps
          command: yarn validate-source-maps

  validate-source-maps-flask:
    executor: node-browsers-small
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Move flask build to dist
          command: mv ./dist-flask ./dist
      - run:
          name: Move flask zips to builds
          command: mv ./builds-flask ./builds
      - run:
          name: Validate source maps
          command: yarn validate-source-maps

  validate-source-maps-flask-mv2:
    executor: node-browsers-small
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Move flask build to dist
          command: mv ./dist-flask-mv2 ./dist
      - run:
          name: Move flask zips to builds
          command: mv ./builds-flask-mv2 ./builds
      - run:
          name: Validate source maps
          command: yarn validate-source-maps

  validate-source-maps-mv2:
    executor: node-browsers-small
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Move flask build to dist
          command: mv ./dist-mv2 ./dist
      - run:
          name: Move flask zips to builds
          command: mv ./builds-mv2 ./builds
      - run:
          name: Validate source maps
          command: yarn validate-source-maps

  test-mozilla-lint-mv2:
    executor: node-browsers-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Move flask build to dist
          command: mv ./dist-mv2 ./dist
      - run:
          name: Move flask zips to builds
          command: mv ./builds-mv2 ./builds
      - run:
          name: test:mozilla-lint
          command: yarn mozilla-lint

  test-mozilla-lint-flask-mv2:
    executor: node-browsers-medium
    steps:
      - run: *shallow-git-clone-and-enable-vnc
      - run: sudo corepack enable
      - attach_workspace:
          at: .
      - run:
          name: Move flask build to dist
          command: mv ./dist-flask-mv2 ./dist
      - run:
          name: Move flask zips to builds
          command: mv ./builds-flask-mv2 ./builds
      - run:
          name: test:mozilla-lint
          command: yarn mozilla-lint

  all-tests-pass:
    executor: node-browsers-small
    steps:
      - run:
          name: All Tests Passed
          command: echo 'whew - everything passed!'
