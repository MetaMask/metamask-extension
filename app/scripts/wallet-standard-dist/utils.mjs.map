{"version":3,"file":"utils.mjs","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,uCAAuC;AACjH,OAAO,EAA8C,KAAK,EAAE,MAAM,EAAE,oBAAgB;AAEpF,MAAM,CAAC,MAAM,qBAAqB,GAChC,wHAAwH,CAAC;AAE3H;;;;;GAKG;AACH,MAAM,UAAU,2BAA2B,CAAC,aAA4B;IACtE,MAAM,KAAK,GAAG,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAExD,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC9C,CAAC;IAED,OAAO,KAAK,CAAC,MAAM,CAAC,cAAe,CAAC;AACtC,CAAC;AAED,MAAM,UAAU,+BAA+B,CAAC,OAAsC;IACpF,QAAQ,OAAO,EAAE,CAAC;QAChB,KAAK,oBAAoB,CAAC;QAC1B,KAAK,SAAS;YACZ,OAAO,KAAK,CAAC,OAAO,CAAC;QACvB,KAAK,oBAAoB;YACvB,OAAO,KAAK,CAAC,OAAO,CAAC;QACvB,KAAK,mBAAmB;YACtB,OAAO,KAAK,CAAC,MAAM,CAAC;QACtB,OAAO,CAAC,CAAC,CAAC;YACR,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAgB,CAAC,EAAE,CAAC;gBACtC,OAAO,OAAgB,CAAC;YAC1B,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,EAAE,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,KAAU;IAC9C,OAAO,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,KAAK,0BAA0B,CAAC;AAC3E,CAAC","sourcesContent":["import { SOLANA_DEVNET_CHAIN, SOLANA_MAINNET_CHAIN, SOLANA_TESTNET_CHAIN } from '@solana/wallet-standard-chains';\nimport { type CaipAccountId, type CaipChainIdStruct, Scope, scopes } from './types';\n\nexport const CAIP_ACCOUNT_ID_REGEX =\n  /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\n\n/**\n * Validates and parses a CAIP-10 account ID.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The CAIP-10 address.\n */\nexport function getAddressFromCaipAccountId(caipAccountId: CaipAccountId) {\n  const match = CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n\n  if (!match?.groups?.accountAddress) {\n    throw new Error('Invalid CAIP account ID.');\n  }\n\n  return match.groups.accountAddress!;\n}\n\nexport function getScopeFromWalletStandardChain(chainId: CaipChainIdStruct | undefined): Scope {\n  switch (chainId) {\n    case SOLANA_MAINNET_CHAIN:\n    case undefined:\n      return Scope.MAINNET;\n    case SOLANA_TESTNET_CHAIN:\n      return Scope.TESTNET;\n    case SOLANA_DEVNET_CHAIN:\n      return Scope.DEVNET;\n    default: {\n      if (scopes.includes(chainId as Scope)) {\n        return chainId as Scope;\n      }\n      throw new Error(`Unsupported chainId: ${chainId}`);\n    }\n  }\n}\n\nexport function isAccountChangedEvent(event: any) {\n  return event.params?.notification?.method === 'metamask_accountsChanged';\n}\n"]}