import { act } from '@testing-library/react';

import { getMockConfirmStateForTransaction } from '../../../../../test/data/confirmations/helper';
import { renderHookWithConfirmContextProvider } from '../../../../../test/lib/confirmations/render-helpers';
import { Confirmation } from '../../types/confirm';
import { useDappSwapComparisonLatencyMetrics } from './useDappSwapComparisonLatencyMetrics';

jest.useFakeTimers();

const confirmationDataMock = {
  time: new Date().getTime(),
  chainId: '0xa4b1',
  id: '66b489a0-aa87-11f0-a866-c513455971f9',
  networkClientId: 'cc8a125a-ac7e-4390-8ac9-02cb19a9a116',
  origin: 'https://app.uniswap.org',
  status: 'unapproved',
  txParams: {
    from: '0x178239802520a9c99dcbd791f81326b70298d629',
    data: '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068f0e4df000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003070b0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000261600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000178239802520a9c99dcbd791f81326b70298d62900000000000000000000000000000000000000000000000000000000000000000c',
    gas: '0x2af63',
    to: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',
    value: '0x0',
    estimatedBaseFee: '0xe4e1c0',
    maxFeePerGas: '0xe4e1c0',
    maxPriorityFeePerGas: '0xe4e1c0',
    type: '0x2',
  },
  type: 'contractInteraction',
  simulationData: {
    tokenBalanceChanges: [
      {
        address: '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
        standard: 'erc20',
        previousBalance: '0x61467',
        newBalance: '0x5ed57',
        difference: '0x2710',
        isDecrease: true,
      },
      {
        address: '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9',
        standard: 'erc20',
        previousBalance: '0x2af0',
        newBalance: '0x51fa',
        difference: '0x270a',
        isDecrease: false,
      },
    ],
  },
};

async function runHook() {
  const response = renderHookWithConfirmContextProvider(
    useDappSwapComparisonLatencyMetrics,
    getMockConfirmStateForTransaction(confirmationDataMock as Confirmation),
  );

  await act(async () => {
    // Ignore
  });

  return response.result.current;
}

describe('useDappSwapComparisonLatencyMetrics', () => {
  it('return required parameters', async () => {
    const result = await runHook();
    expect(result.quoteRequestLatency).toEqual('N/A');
    expect(result.quoteResponseLatency).toEqual('N/A');
    expect(result.requestDetectionLatency).toEqual('N/A');
    expect(result.swapComparisonLatency).toEqual('N/A');
    expect(result.updateRequestDetectionLatency).toBeDefined();
    expect(result.updateQuoteRequestLatency).toBeDefined();
    expect(result.updateQuoteResponseLatency).toBeDefined();
    expect(result.updateSwapComparisonLatency).toBeDefined();
  });
});
