import { QuoteResponse } from '@metamask/bridge-controller';
import { SimulationTokenStandard } from '@metamask/transaction-controller';

import {
  getBestQuote,
  getDataFromSwap,
  getBalanceChangeFromSimulationData,
  getTokenValueFromRecord,
} from './dapp-swap-comparison-utils';

const MOCK_QUOTES = [
  {
    quote: {
      requestId:
        '0x953edd7a1725891162e49f7a1e449522abd8209dd7377b8772d04edaba02de44',
      bridgeId: 'kyberswap',
      srcChainId: 42161,
      destTokenAmount: '45',
      minDestTokenAmount: '40',
      walletAddress: '0x178239802520a9C99DCBD791f81326B70298d629',
    },
    approval: {
      gasLimit: 15,
    },
    trade: { gasLimit: 18 },
    estimatedProcessingTimeInSeconds: 0,
  },
  {
    quote: {
      requestId:
        '0x9ade5d2412cacb2c2332108aa83c759a84f39ab72c931da3296fbe8733f3b7f3',
      bridgeId: '0x',
      srcChainId: 42161,
      destTokenAmount: '98',
      minDestTokenAmount: '90',
      walletAddress: '0x178239802520a9C99DCBD791f81326B70298d629',
    },
    approval: {
      gasLimit: 22,
    },
    trade: { gasLimit: 34 },
    estimatedProcessingTimeInSeconds: 0,
  },
  {
    quote: {
      requestId:
        '0x18359d76a875338da1b455a4f22ab88f4ec467d64e89df5d2daf5e37f7d2f1be',
      bridgeId: 'okx',
      srcChainId: 42161,
      destTokenAmount: '96',
      minDestTokenAmount: '90',
    },
    approval: {
      gasLimit: 20,
    },
    trade: { gasLimit: 30 },
    estimatedProcessingTimeInSeconds: 0,
  },
];

describe('dapp-swap utils', () => {
  describe('getDataFromSwap', () => {
    it('returns the correst data from sweep function', () => {
      const sweepData =
        '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068f0dd1b0000000000000000000000000000000000000000000000000000000000000003100604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003070b0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000007ffc3dbf3b2b50ff3a1d5523bc24bb5043837b1400000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000178239802520a9c99dcbd791f81326b70298d62900000000000000000000000000000000000000000000000000000000000601470c';
      const result = getDataFromSwap('0xa4b1', sweepData);
      expect(result).toEqual({
        amountMin: '0x60147',
        tokenAddresses: [
          '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
          '0x0000000000000000000000000000000000000000',
        ],
        quotesInput: {
          destChainId: '0xa4b1',
          destTokenAddress: '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
          gasIncluded: false,
          gasIncluded7702: false,
          srcChainId: '0xa4b1',
          srcTokenAddress: '0x0000000000000000000000000000000000000000',
          srcTokenAmount: '0x5af3107a4000',
          walletAddress: '0x178239802520a9c99dcbd791f81326b70298d629',
        },
      });
    });
    it('returns the correst data from seaport function', () => {
      const seaportData =
        '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068f0de3c000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003070b0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000178239802520a9c99dcbd791f81326b70298d62900000000000000000000000000000000000000000000000000000000000000000c';
      const result = getDataFromSwap('0xa4b1', seaportData);
      expect(result).toEqual({
        amountMin: '0x5f',
        tokenAddresses: [
          '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9',
          '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
        ],
        quotesInput: {
          destChainId: '0xa4b1',
          destTokenAddress: '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9',
          gasIncluded: false,
          gasIncluded7702: false,
          srcChainId: '0xa4b1',
          srcTokenAddress: '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
          srcTokenAmount: '0x64',
          walletAddress: '0x178239802520a9c99dcbd791f81326b70298d629',
        },
      });
    });
  });

  describe('getBestQuote', () => {
    it('returns the best quote', () => {
      const result = getBestQuote(
        MOCK_QUOTES as unknown as QuoteResponse[],
        '0x32',
        (val) => val,
        (val) => val.toString(),
      );
      expect(result.bestQuote).toEqual(MOCK_QUOTES[2]);
      expect(result.bestFilteredQuote).toEqual(MOCK_QUOTES[2]);
    });

    it('bestFilteredQuote is undefined if no quote has minimum amount greater than confirmation', () => {
      const result = getBestQuote(
        MOCK_QUOTES as unknown as QuoteResponse[],
        '0x64',
        (val) => val,
        (val) => val.toString(),
      );
      expect(result.bestQuote).toEqual(MOCK_QUOTES[2]);
      expect(result.bestFilteredQuote).toEqual(undefined);
    });

    it('returns undefined for empty quotes array', () => {
      const result = getBestQuote(
        [] as unknown as QuoteResponse[],
        '0x32',
        (val) => val,
        (val) => val.toString(),
      );
      expect(result.bestQuote).toEqual(undefined);
      expect(result.bestFilteredQuote).toEqual(undefined);
    });
  });

  describe('getTokenValueFromRecord', () => {
    it('returns the correct value for token address', () => {
      const result = getTokenValueFromRecord(
        {
          '0xaf88d065e77c8cc2239327c5edb3a432268e5831': 6,
          '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9': 6,
          '0x0000000000000000000000000000000000000000': 18,
        },
        '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
      );
      expect(result).toEqual(6);
    });

    it('returns undefined if record is not found', () => {
      const result = getTokenValueFromRecord(
        {
          '0xaf88d065e77c8cc2239327c5edb3a432268e5831': 6,
          '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9': 6,
          '0x0000000000000000000000000000000000000000': 18,
        },
        '0x123',
      );
      expect(result).toEqual(undefined);
    });
  });

  describe('getBalanceChangeFromSimulationData', () => {
    it('returns the correct value for token address', () => {
      const result = getBalanceChangeFromSimulationData(
        '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
        {
          tokenBalanceChanges: [
            {
              address: '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
              difference: '0x64',
              standard: SimulationTokenStandard.erc20,
              previousBalance: '0x0',
              newBalance: '0x0',
              isDecrease: true,
            },
          ],
        },
      );
      expect(result).toEqual('100');
    });
    it('returns 0 if simulation data is not provided', () => {
      const result = getBalanceChangeFromSimulationData(
        '0xaf88d065e77c8cc2239327c5edb3a432268e5831',
        undefined,
      );
      expect(result).toEqual('0');
    });
    it('returns 0 if record is not found', () => {
      const result = getBalanceChangeFromSimulationData('0x123', {
        tokenBalanceChanges: [],
      });
      expect(result).toEqual('0');
    });
  });
});
