diff --git a/dist/assetsUtil.cjs b/dist/assetsUtil.cjs
index 0eb212b5eb9a9ef2f61c44b9e5f04b14d5571865..033449f962d11cc67ccd7219873fd7f33b5df6e1 100644
--- a/dist/assetsUtil.cjs
+++ b/dist/assetsUtil.cjs
@@ -1,12 +1,48 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getKeyByValue = exports.fetchTokenContractExchangeRates = exports.reduceInBatchesSerially = exports.divideIntoBatches = exports.ethersBigNumberToBN = exports.addUrlProtocolPrefix = exports.getFormattedIpfsUrl = exports.getIpfsCIDv1AndPath = exports.removeIpfsProtocolPrefix = exports.isTokenListSupportedForNetwork = exports.isTokenDetectionSupportedForNetwork = exports.SupportedStakedBalanceNetworks = exports.SupportedTokenDetectionNetworks = exports.formatIconUrlWithProxy = exports.formatAggregatorNames = exports.hasNewCollectionFields = exports.compareNftMetadata = exports.TOKEN_PRICES_BATCH_SIZE = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const utils_1 = require("@metamask/utils");
-const bn_js_1 = __importDefault(require("bn.js"));
+'use strict';
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod };
+  };
+Object.defineProperty(exports, '__esModule', { value: true });
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
+  } else {
+    var newObj = {};
+    if (obj != null) {
+      for (var key in obj) {
+        if (Object.prototype.hasOwnProperty.call(obj, key)) {
+          newObj[key] = obj[key];
+        }
+      }
+    }
+    newObj.default = obj;
+    return newObj;
+  }
+}
+exports.getKeyByValue =
+  exports.fetchTokenContractExchangeRates =
+  exports.reduceInBatchesSerially =
+  exports.divideIntoBatches =
+  exports.ethersBigNumberToBN =
+  exports.addUrlProtocolPrefix =
+  exports.getFormattedIpfsUrl =
+  exports.getIpfsCIDv1AndPath =
+  exports.removeIpfsProtocolPrefix =
+  exports.isTokenListSupportedForNetwork =
+  exports.isTokenDetectionSupportedForNetwork =
+  exports.SupportedStakedBalanceNetworks =
+  exports.SupportedTokenDetectionNetworks =
+  exports.formatIconUrlWithProxy =
+  exports.formatAggregatorNames =
+  exports.hasNewCollectionFields =
+  exports.compareNftMetadata =
+  exports.TOKEN_PRICES_BATCH_SIZE =
+    void 0;
+const controller_utils_1 = require('@metamask/controller-utils');
+const utils_1 = require('@metamask/utils');
+const bn_js_1 = __importDefault(require('bn.js'));
 /**
  * The maximum number of token addresses that should be sent to the Price API in
  * a single request.
@@ -22,25 +58,25 @@ exports.TOKEN_PRICES_BATCH_SIZE = 30;
  * @returns Whether there are differences.
  */
 function compareNftMetadata(newNftMetadata, nft) {
-    const keys = [
-        'image',
-        'backgroundColor',
-        'imagePreview',
-        'imageThumbnail',
-        'imageOriginal',
-        'animation',
-        'animationOriginal',
-        'externalLink',
-        'tokenURI',
-        'chainId',
-    ];
-    const differentValues = keys.reduce((value, key) => {
-        if (newNftMetadata[key] && newNftMetadata[key] !== nft[key]) {
-            return value + 1;
-        }
-        return value;
-    }, 0);
-    return differentValues > 0;
+  const keys = [
+    'image',
+    'backgroundColor',
+    'imagePreview',
+    'imageThumbnail',
+    'imageOriginal',
+    'animation',
+    'animationOriginal',
+    'externalLink',
+    'tokenURI',
+    'chainId',
+  ];
+  const differentValues = keys.reduce((value, key) => {
+    if (newNftMetadata[key] && newNftMetadata[key] !== nft[key]) {
+      return value + 1;
+    }
+    return value;
+  }, 0);
+  return differentValues > 0;
 }
 exports.compareNftMetadata = compareNftMetadata;
 /**
@@ -50,38 +86,38 @@ exports.compareNftMetadata = compareNftMetadata;
  * @returns Whether the existing nft object has all the new keys from the new Nft metadata object
  */
 function hasNewCollectionFields(newNftMetadata, nft) {
-    const keysNewNftMetadata = Object.keys(newNftMetadata.collection ?? {});
-    const keysExistingNft = new Set(Object.keys(nft.collection ?? {}));
-    return keysNewNftMetadata.some((key) => !keysExistingNft.has(key));
+  const keysNewNftMetadata = Object.keys(newNftMetadata.collection ?? {});
+  const keysExistingNft = new Set(Object.keys(nft.collection ?? {}));
+  return keysNewNftMetadata.some((key) => !keysExistingNft.has(key));
 }
 exports.hasNewCollectionFields = hasNewCollectionFields;
 const aggregatorNameByKey = {
-    aave: 'Aave',
-    bancor: 'Bancor',
-    cmc: 'CMC',
-    cryptocom: 'Crypto.com',
-    coinGecko: 'CoinGecko',
-    oneInch: '1inch',
-    paraswap: 'Paraswap',
-    pmm: 'PMM',
-    zapper: 'Zapper',
-    zerion: 'Zerion',
-    zeroEx: '0x',
-    synthetix: 'Synthetix',
-    yearn: 'Yearn',
-    apeswap: 'ApeSwap',
-    binanceDex: 'BinanceDex',
-    pancakeTop100: 'PancakeTop100',
-    pancakeExtended: 'PancakeExtended',
-    balancer: 'Balancer',
-    quickswap: 'QuickSwap',
-    matcha: 'Matcha',
-    pangolinDex: 'PangolinDex',
-    pangolinDexStableCoin: 'PangolinDexStableCoin',
-    pangolinDexAvaxBridge: 'PangolinDexAvaxBridge',
-    traderJoe: 'TraderJoe',
-    airswapLight: 'AirswapLight',
-    kleros: 'Kleros',
+  aave: 'Aave',
+  bancor: 'Bancor',
+  cmc: 'CMC',
+  cryptocom: 'Crypto.com',
+  coinGecko: 'CoinGecko',
+  oneInch: '1inch',
+  paraswap: 'Paraswap',
+  pmm: 'PMM',
+  zapper: 'Zapper',
+  zerion: 'Zerion',
+  zeroEx: '0x',
+  synthetix: 'Synthetix',
+  yearn: 'Yearn',
+  apeswap: 'ApeSwap',
+  binanceDex: 'BinanceDex',
+  pancakeTop100: 'PancakeTop100',
+  pancakeExtended: 'PancakeExtended',
+  balancer: 'Balancer',
+  quickswap: 'QuickSwap',
+  matcha: 'Matcha',
+  pangolinDex: 'PangolinDex',
+  pangolinDexStableCoin: 'PangolinDexStableCoin',
+  pangolinDexAvaxBridge: 'PangolinDexAvaxBridge',
+  traderJoe: 'TraderJoe',
+  airswapLight: 'AirswapLight',
+  kleros: 'Kleros',
 };
 /**
  * Formats aggregator names to presentable format.
@@ -90,8 +126,11 @@ const aggregatorNameByKey = {
  * @returns Formatted aggregator names.
  */
 const formatAggregatorNames = (aggregators) => {
-    return aggregators.map((key) => aggregatorNameByKey[key] ||
-        `${key[0].toUpperCase()}${key.substring(1, key.length)}`);
+  return aggregators.map(
+    (key) =>
+      aggregatorNameByKey[key] ||
+      `${key[0].toUpperCase()}${key.substring(1, key.length)}`
+  );
 };
 exports.formatAggregatorNames = formatAggregatorNames;
 /**
@@ -102,11 +141,13 @@ exports.formatAggregatorNames = formatAggregatorNames;
  * @param params.tokenAddress - Address of token in mixed or lowercase.
  * @returns Formatted image url
  */
-const formatIconUrlWithProxy = ({ chainId, tokenAddress, }) => {
-    const chainIdDecimal = (0, controller_utils_1.convertHexToDecimal)(chainId).toString();
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
-    return `https://static.cx.metamask.io/api/v1/tokenIcons/${chainIdDecimal}/${tokenAddress.toLowerCase()}.png`;
+const formatIconUrlWithProxy = ({ chainId, tokenAddress }) => {
+  const chainIdDecimal = (0, controller_utils_1.convertHexToDecimal)(
+    chainId
+  ).toString();
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
+  return `https://static.cx.metamask.io/api/v1/tokenIcons/${chainIdDecimal}/${tokenAddress.toLowerCase()}.png`;
 };
 exports.formatIconUrlWithProxy = formatIconUrlWithProxy;
 /**
@@ -114,73 +155,81 @@ exports.formatIconUrlWithProxy = formatIconUrlWithProxy;
  */
 var SupportedTokenDetectionNetworks;
 (function (SupportedTokenDetectionNetworks) {
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["mainnet"] = "0x1";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["bsc"] = "0x38";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["polygon"] = "0x89";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["avax"] = "0xa86a";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["aurora"] = "0x4e454152";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["linea_goerli"] = "0xe704";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["linea_mainnet"] = "0xe708";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["arbitrum"] = "0xa4b1";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["optimism"] = "0xa";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["base"] = "0x2105";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["zksync"] = "0x144";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["cronos"] = "0x19";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["celo"] = "0xa4ec";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["gnosis"] = "0x64";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["fantom"] = "0xfa";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["polygon_zkevm"] = "0x44d";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["moonbeam"] = "0x504";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedTokenDetectionNetworks["moonriver"] = "0x505";
-})(SupportedTokenDetectionNetworks || (exports.SupportedTokenDetectionNetworks = SupportedTokenDetectionNetworks = {}));
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['mainnet'] = '0x1';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['bsc'] = '0x38';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['polygon'] = '0x89';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['avax'] = '0xa86a';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['aurora'] = '0x4e454152';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['linea_goerli'] = '0xe704';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['linea_mainnet'] = '0xe708';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['arbitrum'] = '0xa4b1';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['optimism'] = '0xa';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['base'] = '0x2105';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['zksync'] = '0x144';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['cronos'] = '0x19';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['celo'] = '0xa4ec';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['gnosis'] = '0x64';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['fantom'] = '0xfa';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['polygon_zkevm'] = '0x44d';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['moonbeam'] = '0x504';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedTokenDetectionNetworks['moonriver'] = '0x505';
+})(
+  SupportedTokenDetectionNetworks ||
+    (exports.SupportedTokenDetectionNetworks = SupportedTokenDetectionNetworks =
+      {})
+);
 /**
  * Networks where staked balance is supported - Values are in hex format
  */
 var SupportedStakedBalanceNetworks;
 (function (SupportedStakedBalanceNetworks) {
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedStakedBalanceNetworks["mainnet"] = "0x1";
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/naming-convention
-    SupportedStakedBalanceNetworks["holesky"] = "0x4268";
-})(SupportedStakedBalanceNetworks || (exports.SupportedStakedBalanceNetworks = SupportedStakedBalanceNetworks = {}));
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedStakedBalanceNetworks['mainnet'] = '0x1';
+  // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+  // eslint-disable-next-line @typescript-eslint/naming-convention
+  SupportedStakedBalanceNetworks['holesky'] = '0x4268';
+})(
+  SupportedStakedBalanceNetworks ||
+    (exports.SupportedStakedBalanceNetworks = SupportedStakedBalanceNetworks =
+      {})
+);
 /**
  * Check if token detection is enabled for certain networks.
  *
@@ -188,9 +237,10 @@ var SupportedStakedBalanceNetworks;
  * @returns Whether the current network supports token detection
  */
 function isTokenDetectionSupportedForNetwork(chainId) {
-    return Object.values(SupportedTokenDetectionNetworks).includes(chainId);
+  return Object.values(SupportedTokenDetectionNetworks).includes(chainId);
 }
-exports.isTokenDetectionSupportedForNetwork = isTokenDetectionSupportedForNetwork;
+exports.isTokenDetectionSupportedForNetwork =
+  isTokenDetectionSupportedForNetwork;
 /**
  * Check if token list polling is enabled for a given network.
  * Currently this method is used to support e2e testing for consumers of this package.
@@ -199,7 +249,7 @@ exports.isTokenDetectionSupportedForNetwork = isTokenDetectionSupportedForNetwor
  * @returns Whether the current network supports tokenlists
  */
 function isTokenListSupportedForNetwork(chainId) {
-    return isTokenDetectionSupportedForNetwork(chainId);
+  return isTokenDetectionSupportedForNetwork(chainId);
 }
 exports.isTokenListSupportedForNetwork = isTokenListSupportedForNetwork;
 /**
@@ -210,14 +260,13 @@ exports.isTokenListSupportedForNetwork = isTokenListSupportedForNetwork;
  * @throws Will throw if the url passed is not IPFS.
  */
 function removeIpfsProtocolPrefix(ipfsUrl) {
-    if (ipfsUrl.startsWith('ipfs://ipfs/')) {
-        return ipfsUrl.replace('ipfs://ipfs/', '');
-    }
-    else if (ipfsUrl.startsWith('ipfs://')) {
-        return ipfsUrl.replace('ipfs://', '');
-    }
-    // this method should not be used with non-ipfs urls (i.e. startsWith('ipfs://') === true)
-    throw new Error('this method should not be used with non ipfs urls');
+  if (ipfsUrl.startsWith('ipfs://ipfs/')) {
+    return ipfsUrl.replace('ipfs://ipfs/', '');
+  } else if (ipfsUrl.startsWith('ipfs://')) {
+    return ipfsUrl.replace('ipfs://', '');
+  }
+  // this method should not be used with non-ipfs urls (i.e. startsWith('ipfs://') === true)
+  throw new Error('this method should not be used with non ipfs urls');
 }
 exports.removeIpfsProtocolPrefix = removeIpfsProtocolPrefix;
 /**
@@ -228,19 +277,19 @@ exports.removeIpfsProtocolPrefix = removeIpfsProtocolPrefix;
  * @throws Will throw if the url passed is not ipfs.
  */
 async function getIpfsCIDv1AndPath(ipfsUrl) {
-    const url = removeIpfsProtocolPrefix(ipfsUrl);
-    // check if there is a path
-    // (CID is everything preceding first forward slash, path is everything after)
-    const index = url.indexOf('/');
-    const cid = index !== -1 ? url.substring(0, index) : url;
-    const path = index !== -1 ? url.substring(index) : undefined;
-    const { CID } = await import("multiformats");
-    // We want to ensure that the CID is v1 (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats)
-    // because most cid v0s appear to be incompatible with IPFS subdomains
-    return {
-        cid: CID.parse(cid).toV1().toString(),
-        path,
-    };
+  const url = removeIpfsProtocolPrefix(ipfsUrl);
+  // check if there is a path
+  // (CID is everything preceding first forward slash, path is everything after)
+  const index = url.indexOf('/');
+  const cid = index !== -1 ? url.substring(0, index) : url;
+  const path = index !== -1 ? url.substring(index) : undefined;
+  const { CID } = _interopRequireWildcard(require('multiformats'));
+  // We want to ensure that the CID is v1 (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats)
+  // because most cid v0s appear to be incompatible with IPFS subdomains
+  return {
+    cid: CID.parse(cid).toV1().toString(),
+    path,
+  };
 }
 exports.getIpfsCIDv1AndPath = getIpfsCIDv1AndPath;
 /**
@@ -252,13 +301,13 @@ exports.getIpfsCIDv1AndPath = getIpfsCIDv1AndPath;
  * @returns A formatted URL, with the user's preferred IPFS gateway and format (subdomain or not), pointing to an asset hosted on IPFS.
  */
 async function getFormattedIpfsUrl(ipfsGateway, ipfsUrl, subdomainSupported) {
-    const { host, protocol, origin } = new URL(addUrlProtocolPrefix(ipfsGateway));
-    if (subdomainSupported) {
-        const { cid, path } = await getIpfsCIDv1AndPath(ipfsUrl);
-        return `${protocol}//${cid}.ipfs.${host}${path ?? ''}`;
-    }
-    const cidAndPath = removeIpfsProtocolPrefix(ipfsUrl);
-    return `${origin}/ipfs/${cidAndPath}`;
+  const { host, protocol, origin } = new URL(addUrlProtocolPrefix(ipfsGateway));
+  if (subdomainSupported) {
+    const { cid, path } = await getIpfsCIDv1AndPath(ipfsUrl);
+    return `${protocol}//${cid}.ipfs.${host}${path ?? ''}`;
+  }
+  const cidAndPath = removeIpfsProtocolPrefix(ipfsUrl);
+  return `${origin}/ipfs/${cidAndPath}`;
 }
 exports.getFormattedIpfsUrl = getFormattedIpfsUrl;
 /**
@@ -268,10 +317,10 @@ exports.getFormattedIpfsUrl = getFormattedIpfsUrl;
  * @returns A URL with a https:// prepended.
  */
 function addUrlProtocolPrefix(urlString) {
-    if (!urlString.match(/(^http:\/\/)|(^https:\/\/)/u)) {
-        return `https://${urlString}`;
-    }
-    return urlString;
+  if (!urlString.match(/(^http:\/\/)|(^https:\/\/)/u)) {
+    return `https://${urlString}`;
+  }
+  return urlString;
 }
 exports.addUrlProtocolPrefix = addUrlProtocolPrefix;
 /**
@@ -281,7 +330,10 @@ exports.addUrlProtocolPrefix = addUrlProtocolPrefix;
  * @returns A BN object.
  */
 function ethersBigNumberToBN(bigNumber) {
-    return new bn_js_1.default((0, utils_1.remove0x)(bigNumber.toHexString()), 'hex');
+  return new bn_js_1.default(
+    (0, utils_1.remove0x)(bigNumber.toHexString()),
+    'hex'
+  );
 }
 exports.ethersBigNumberToBN = ethersBigNumberToBN;
 /**
@@ -294,11 +346,11 @@ exports.ethersBigNumberToBN = ethersBigNumberToBN;
  * @returns The list of batches.
  */
 function divideIntoBatches(values, { batchSize }) {
-    const batches = [];
-    for (let i = 0; i < values.length; i += batchSize) {
-        batches.push(values.slice(i, i + batchSize));
-    }
-    return batches;
+  const batches = [];
+  for (let i = 0; i < values.length; i += batchSize) {
+    batches.push(values.slice(i, i + batchSize));
+  }
+  return batches;
 }
 exports.divideIntoBatches = divideIntoBatches;
 /**
@@ -316,16 +368,21 @@ exports.divideIntoBatches = divideIntoBatches;
  * i.e., the value that will be fed into the first call of `eachBatch`.
  * @returns The built result.
  */
-async function reduceInBatchesSerially({ values, batchSize, eachBatch, initialResult, }) {
-    const batches = divideIntoBatches(values, { batchSize });
-    let workingResult = initialResult;
-    for (const [index, batch] of batches.entries()) {
-        workingResult = await eachBatch(workingResult, batch, index);
-    }
-    // There's no way around this — we have to assume that in the end, the result
-    // matches the intended type.
-    const finalResult = workingResult;
-    return finalResult;
+async function reduceInBatchesSerially({
+  values,
+  batchSize,
+  eachBatch,
+  initialResult,
+}) {
+  const batches = divideIntoBatches(values, { batchSize });
+  let workingResult = initialResult;
+  for (const [index, batch] of batches.entries()) {
+    workingResult = await eachBatch(workingResult, batch, index);
+  }
+  // There's no way around this — we have to assume that in the end, the result
+  // matches the intended type.
+  const finalResult = workingResult;
+  return finalResult;
 }
 exports.reduceInBatchesSerially = reduceInBatchesSerially;
 /**
@@ -338,34 +395,46 @@ exports.reduceInBatchesSerially = reduceInBatchesSerially;
  * @param args.chainId - The chainId of the tokens.
  * @returns The prices for the requested tokens.
  */
-async function fetchTokenContractExchangeRates({ tokenPricesService, nativeCurrency, tokenAddresses, chainId, }) {
-    const isChainIdSupported = tokenPricesService.validateChainIdSupported(chainId);
-    const isCurrencySupported = tokenPricesService.validateCurrencySupported(nativeCurrency);
-    if (!isChainIdSupported || !isCurrencySupported) {
-        return {};
-    }
-    const tokenPricesByTokenAddress = await reduceInBatchesSerially({
-        values: [...tokenAddresses].sort(),
-        batchSize: exports.TOKEN_PRICES_BATCH_SIZE,
-        eachBatch: async (allTokenPricesByTokenAddress, batch) => {
-            const tokenPricesByTokenAddressForBatch = await tokenPricesService.fetchTokenPrices({
-                tokenAddresses: batch,
-                chainId,
-                currency: nativeCurrency,
-            });
-            return {
-                ...allTokenPricesByTokenAddress,
-                ...tokenPricesByTokenAddressForBatch,
-            };
-        },
-        initialResult: {},
-    });
-    return Object.entries(tokenPricesByTokenAddress).reduce((obj, [tokenAddress, tokenPrice]) => {
-        return {
-            ...obj,
-            [(0, controller_utils_1.toChecksumHexAddress)(tokenAddress)]: tokenPrice?.price,
-        };
-    }, {});
+async function fetchTokenContractExchangeRates({
+  tokenPricesService,
+  nativeCurrency,
+  tokenAddresses,
+  chainId,
+}) {
+  const isChainIdSupported =
+    tokenPricesService.validateChainIdSupported(chainId);
+  const isCurrencySupported =
+    tokenPricesService.validateCurrencySupported(nativeCurrency);
+  if (!isChainIdSupported || !isCurrencySupported) {
+    return {};
+  }
+  const tokenPricesByTokenAddress = await reduceInBatchesSerially({
+    values: [...tokenAddresses].sort(),
+    batchSize: exports.TOKEN_PRICES_BATCH_SIZE,
+    eachBatch: async (allTokenPricesByTokenAddress, batch) => {
+      const tokenPricesByTokenAddressForBatch =
+        await tokenPricesService.fetchTokenPrices({
+          tokenAddresses: batch,
+          chainId,
+          currency: nativeCurrency,
+        });
+      return {
+        ...allTokenPricesByTokenAddress,
+        ...tokenPricesByTokenAddressForBatch,
+      };
+    },
+    initialResult: {},
+  });
+  return Object.entries(tokenPricesByTokenAddress).reduce(
+    (obj, [tokenAddress, tokenPrice]) => {
+      return {
+        ...obj,
+        [(0, controller_utils_1.toChecksumHexAddress)(tokenAddress)]:
+          tokenPrice?.price,
+      };
+    },
+    {}
+  );
 }
 exports.fetchTokenContractExchangeRates = fetchTokenContractExchangeRates;
 /**
@@ -375,12 +444,12 @@ exports.fetchTokenContractExchangeRates = fetchTokenContractExchangeRates;
  * @returns returns key that corresponds to the value
  */
 function getKeyByValue(map, value) {
-    for (const [key, val] of map.entries()) {
-        if (val === value) {
-            return key;
-        }
+  for (const [key, val] of map.entries()) {
+    if (val === value) {
+      return key;
     }
-    return null; // Return null if no match is found
+  }
+  return null; // Return null if no match is found
 }
 exports.getKeyByValue = getKeyByValue;
 //# sourceMappingURL=assetsUtil.cjs.map
