diff --git a/dist/TransactionController.cjs b/dist/TransactionController.cjs
index 5f244a7192ebc9b39ba230d92ee3bf36b47a36cd..247aac66bc90f29d2168e2dfcebfe3523b77a64c 100644
--- a/dist/TransactionController.cjs
+++ b/dist/TransactionController.cjs
@@ -559,7 +559,12 @@ class TransactionController extends base_controller_1.BaseController {
         const ethQuery = __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getEthQuery).call(this, {
             networkClientId,
         });
-        const { estimatedGas, simulationFails } = await (0, gas_1.estimateGas)(transaction, ethQuery);
+        const { estimatedGas, simulationFails } = await (0, gas_1.estimateGas)({
+            chainId: __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getChainId).call(this, networkClientId),
+            ethQuery,
+            isSimulationEnabled: __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this),
+            txParams: transaction,
+        });
         return { gas: estimatedGas, simulationFails };
     }
     /**
@@ -574,7 +579,12 @@ class TransactionController extends base_controller_1.BaseController {
         const ethQuery = __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getEthQuery).call(this, {
             networkClientId,
         });
-        const { blockGasLimit, estimatedGas, simulationFails } = await (0, gas_1.estimateGas)(transaction, ethQuery);
+        const { blockGasLimit, estimatedGas, simulationFails } = await (0, gas_1.estimateGas)({
+            chainId: __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getChainId).call(this, networkClientId),
+            ethQuery,
+            isSimulationEnabled: __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this),
+            txParams: transaction,
+        });
         const gas = (0, gas_1.addGasBuffer)(estimatedGas, blockGasLimit, multiplier);
         return {
             gas,
@@ -2097,6 +2107,7 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
         chainId,
         ethQuery,
         isCustomNetwork,
+        isSimulationEnabled: __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this),
         txMeta: transactionMeta,
     });
 }, _TransactionController_deleteTransaction = function _TransactionController_deleteTransaction(transactionId) {
diff --git a/dist/TransactionController.mjs b/dist/TransactionController.mjs
index 3ecb211958f31624677c0db41c0e87b2cdb4cf76..92d1d34182a3b319253ee11cef27e385c04c1945 100644
--- a/dist/TransactionController.mjs
+++ b/dist/TransactionController.mjs
@@ -561,7 +561,12 @@ export class TransactionController extends BaseController {
         const ethQuery = __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getEthQuery).call(this, {
             networkClientId,
         });
-        const { estimatedGas, simulationFails } = await estimateGas(transaction, ethQuery);
+        const { estimatedGas, simulationFails } = await estimateGas({
+            chainId: __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getChainId).call(this, networkClientId),
+            ethQuery,
+            isSimulationEnabled: __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this),
+            txParams: transaction,
+        });
         return { gas: estimatedGas, simulationFails };
     }
     /**
@@ -576,7 +581,12 @@ export class TransactionController extends BaseController {
         const ethQuery = __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getEthQuery).call(this, {
             networkClientId,
         });
-        const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(transaction, ethQuery);
+        const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas({
+            chainId: __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_getChainId).call(this, networkClientId),
+            ethQuery,
+            isSimulationEnabled: __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this),
+            txParams: transaction,
+        });
         const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);
         return {
             gas,
@@ -2098,6 +2108,7 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
         chainId,
         ethQuery,
         isCustomNetwork,
+        isSimulationEnabled: __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this),
         txMeta: transactionMeta,
     });
 }, _TransactionController_deleteTransaction = function _TransactionController_deleteTransaction(transactionId) {
diff --git a/dist/index.d.cts b/dist/index.d.cts
index ddb051c3fa6b160ee45c3b3c5968cdf6fef33f37..4d51b296f1c8668e31ce19b3c30b6e2a84f7fb15 100644
--- a/dist/index.d.cts
+++ b/dist/index.d.cts
@@ -1,6 +1,6 @@
 export type { MethodData, Result, TransactionControllerActions, TransactionControllerEvents, TransactionControllerGetStateAction, TransactionControllerIncomingTransactionsReceivedEvent, TransactionControllerPostTransactionBalanceUpdatedEvent, TransactionControllerSpeedupTransactionAddedEvent, TransactionControllerState, TransactionControllerStateChangeEvent, TransactionControllerTransactionApprovedEvent, TransactionControllerTransactionConfirmedEvent, TransactionControllerTransactionDroppedEvent, TransactionControllerTransactionFailedEvent, TransactionControllerTransactionFinishedEvent, TransactionControllerTransactionNewSwapApprovalEvent, TransactionControllerTransactionNewSwapEvent, TransactionControllerTransactionPublishingSkipped, TransactionControllerTransactionRejectedEvent, TransactionControllerTransactionStatusUpdatedEvent, TransactionControllerTransactionSubmittedEvent, TransactionControllerUnapprovedTransactionAddedEvent, TransactionControllerMessenger, TransactionControllerOptions, } from "./TransactionController.cjs";
 export { CANCEL_RATE, SPEED_UP_RATE, TransactionController, } from "./TransactionController.cjs";
-export type { Authorization, AuthorizationList, BatchTransactionParams, DappSuggestedGasFees, DefaultGasEstimates, FeeMarketEIP1559Values, FeeMarketGasFeeEstimateForLevel, FeeMarketGasFeeEstimates, GasFeeEstimates, GasPriceGasFeeEstimates, GasPriceValue, InferTransactionTypeResult, LegacyGasFeeEstimates, Log, NestedTransactionMetadata, SavedGasFees, SecurityAlertResponse, SecurityProviderRequest, SendFlowHistoryEntry, SimulationBalanceChange, SimulationData, SimulationError, SimulationToken, SimulationTokenBalanceChange, TransactionBatchRequest, TransactionBatchResult, TransactionError, TransactionHistory, TransactionHistoryEntry, TransactionMeta, TransactionParams, TransactionReceipt, } from "./types.cjs";
+export type { Authorization, AuthorizationList, BatchTransactionParams, DappSuggestedGasFees, DefaultGasEstimates, FeeMarketEIP1559Values, FeeMarketGasFeeEstimateForLevel, FeeMarketGasFeeEstimates, GasFeeEstimates, GasPriceGasFeeEstimates, GasPriceValue, InferTransactionTypeResult, LegacyGasFeeEstimates, Log, NestedTransactionMetadata, SavedGasFees, SecurityAlertResponse, SecurityProviderRequest, SendFlowHistoryEntry, SimulationBalanceChange, SimulationData, SimulationError, SimulationToken, SimulationTokenBalanceChange, TransactionBatchRequest, TransactionBatchResult, TransactionError, TransactionHistory, TransactionHistoryEntry, TransactionMeta, TransactionParams, TransactionReceipt, ValidateSecurityRequest, } from "./types.cjs";
 export { GasFeeEstimateLevel, GasFeeEstimateType, SimulationErrorCode, SimulationTokenStandard, TransactionEnvelopeType, TransactionStatus, TransactionType, UserFeeLevel, WalletDevice, } from "./types.cjs";
 export { DISPLAYED_TRANSACTION_HISTORY_PATHS, MAX_TRANSACTION_HISTORY_LENGTH, } from "./utils/history.cjs";
 export { determineTransactionType } from "./utils/transaction-type.cjs";
diff --git a/dist/index.d.mts b/dist/index.d.mts
index 8e85dcca513f6f8879b3c217a65c34537ad25634..21a816f052d5ca2c55dc471613e14b2b2d7c86c0 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -1,6 +1,6 @@
 export type { MethodData, Result, TransactionControllerActions, TransactionControllerEvents, TransactionControllerGetStateAction, TransactionControllerIncomingTransactionsReceivedEvent, TransactionControllerPostTransactionBalanceUpdatedEvent, TransactionControllerSpeedupTransactionAddedEvent, TransactionControllerState, TransactionControllerStateChangeEvent, TransactionControllerTransactionApprovedEvent, TransactionControllerTransactionConfirmedEvent, TransactionControllerTransactionDroppedEvent, TransactionControllerTransactionFailedEvent, TransactionControllerTransactionFinishedEvent, TransactionControllerTransactionNewSwapApprovalEvent, TransactionControllerTransactionNewSwapEvent, TransactionControllerTransactionPublishingSkipped, TransactionControllerTransactionRejectedEvent, TransactionControllerTransactionStatusUpdatedEvent, TransactionControllerTransactionSubmittedEvent, TransactionControllerUnapprovedTransactionAddedEvent, TransactionControllerMessenger, TransactionControllerOptions, } from "./TransactionController.mjs";
 export { CANCEL_RATE, SPEED_UP_RATE, TransactionController, } from "./TransactionController.mjs";
-export type { Authorization, AuthorizationList, BatchTransactionParams, DappSuggestedGasFees, DefaultGasEstimates, FeeMarketEIP1559Values, FeeMarketGasFeeEstimateForLevel, FeeMarketGasFeeEstimates, GasFeeEstimates, GasPriceGasFeeEstimates, GasPriceValue, InferTransactionTypeResult, LegacyGasFeeEstimates, Log, NestedTransactionMetadata, SavedGasFees, SecurityAlertResponse, SecurityProviderRequest, SendFlowHistoryEntry, SimulationBalanceChange, SimulationData, SimulationError, SimulationToken, SimulationTokenBalanceChange, TransactionBatchRequest, TransactionBatchResult, TransactionError, TransactionHistory, TransactionHistoryEntry, TransactionMeta, TransactionParams, TransactionReceipt, } from "./types.mjs";
+export type { Authorization, AuthorizationList, BatchTransactionParams, DappSuggestedGasFees, DefaultGasEstimates, FeeMarketEIP1559Values, FeeMarketGasFeeEstimateForLevel, FeeMarketGasFeeEstimates, GasFeeEstimates, GasPriceGasFeeEstimates, GasPriceValue, InferTransactionTypeResult, LegacyGasFeeEstimates, Log, NestedTransactionMetadata, SavedGasFees, SecurityAlertResponse, SecurityProviderRequest, SendFlowHistoryEntry, SimulationBalanceChange, SimulationData, SimulationError, SimulationToken, SimulationTokenBalanceChange, TransactionBatchRequest, TransactionBatchResult, TransactionError, TransactionHistory, TransactionHistoryEntry, TransactionMeta, TransactionParams, TransactionReceipt, ValidateSecurityRequest, } from "./types.mjs";
 export { GasFeeEstimateLevel, GasFeeEstimateType, SimulationErrorCode, SimulationTokenStandard, TransactionEnvelopeType, TransactionStatus, TransactionType, UserFeeLevel, WalletDevice, } from "./types.mjs";
 export { DISPLAYED_TRANSACTION_HISTORY_PATHS, MAX_TRANSACTION_HISTORY_LENGTH, } from "./utils/history.mjs";
 export { determineTransactionType } from "./utils/transaction-type.mjs";
diff --git a/dist/types.d.cts b/dist/types.d.cts
index 693e50b14e0ceea7fd3e3a0184986b639d7f0647..df27da562cd642b3e9b2847524131b12e6651a11 100644
--- a/dist/types.d.cts
+++ b/dist/types.d.cts
@@ -918,10 +918,11 @@ export type TransactionError = {
  * Type for security alert response from transaction validator.
  */
 export type SecurityAlertResponse = {
-    reason: string;
     features?: string[];
-    result_type: string;
     providerRequestsCount?: Record<string, number>;
+    reason: string;
+    result_type: string;
+    securityAlertId?: string;
 };
 /** Alternate priority levels for which values are provided in gas fee estimates. */
 export declare enum GasFeeEstimateLevel {
@@ -1185,8 +1186,17 @@ export type TransactionBatchRequest = {
     origin?: string;
     /** Whether an approval request should be created to require confirmation from the user. */
     requireApproval?: boolean;
+    /** Security alert ID to persist on the transaction. */
+    securityAlertId?: string;
     /** Transactions to be submitted as part of the batch. */
     transactions: TransactionBatchSingleRequest[];
+    /**
+     * Callback to trigger security validation in the client.
+     *
+     * @param request - The JSON-RPC request to validate.
+     * @param chainId - The chain ID of the transaction batch.
+     */
+    validateSecurity?: (request: ValidateSecurityRequest, chainId: Hex) => Promise<void>;
 };
 /**
  * Result from submitting a transaction batch.
@@ -1195,5 +1205,16 @@ export type TransactionBatchResult = {
     /** ID of the batch to locate related transactions. */
     batchId: Hex;
 };
+/**
+ * Request to validate security of a transaction in the client.
+ */
+export type ValidateSecurityRequest = {
+    /** JSON-RPC method to validate. */
+    method: string;
+    /** Parameters of the JSON-RPC method to validate. */
+    params: unknown[];
+    /** Optional EIP-7702 delegation to mock for the transaction sender. */
+    delegationMock?: Hex;
+};
 export {};
 //# sourceMappingURL=types.d.cts.map
\ No newline at end of file
diff --git a/dist/types.d.mts b/dist/types.d.mts
index 450a27115a5f0d3ed3f719de6e98b14410e4de81..73084cf88c1c498671771ef560bf175d4aca8a82 100644
--- a/dist/types.d.mts
+++ b/dist/types.d.mts
@@ -918,10 +918,11 @@ export type TransactionError = {
  * Type for security alert response from transaction validator.
  */
 export type SecurityAlertResponse = {
-    reason: string;
     features?: string[];
-    result_type: string;
     providerRequestsCount?: Record<string, number>;
+    reason: string;
+    result_type: string;
+    securityAlertId?: string;
 };
 /** Alternate priority levels for which values are provided in gas fee estimates. */
 export declare enum GasFeeEstimateLevel {
@@ -1185,8 +1186,17 @@ export type TransactionBatchRequest = {
     origin?: string;
     /** Whether an approval request should be created to require confirmation from the user. */
     requireApproval?: boolean;
+    /** Security alert ID to persist on the transaction. */
+    securityAlertId?: string;
     /** Transactions to be submitted as part of the batch. */
     transactions: TransactionBatchSingleRequest[];
+    /**
+     * Callback to trigger security validation in the client.
+     *
+     * @param request - The JSON-RPC request to validate.
+     * @param chainId - The chain ID of the transaction batch.
+     */
+    validateSecurity?: (request: ValidateSecurityRequest, chainId: Hex) => Promise<void>;
 };
 /**
  * Result from submitting a transaction batch.
@@ -1195,5 +1205,16 @@ export type TransactionBatchResult = {
     /** ID of the batch to locate related transactions. */
     batchId: Hex;
 };
+/**
+ * Request to validate security of a transaction in the client.
+ */
+export type ValidateSecurityRequest = {
+    /** JSON-RPC method to validate. */
+    method: string;
+    /** Parameters of the JSON-RPC method to validate. */
+    params: unknown[];
+    /** Optional EIP-7702 delegation to mock for the transaction sender. */
+    delegationMock?: Hex;
+};
 export {};
 //# sourceMappingURL=types.d.mts.map
\ No newline at end of file
diff --git a/dist/utils/batch.cjs b/dist/utils/batch.cjs
index f2f3931df247fc8798f020900b32710b086b25dd..f1d677c80c5ffe77443ceeeaea8f3034d95c318d 100644
--- a/dist/utils/batch.cjs
+++ b/dist/utils/batch.cjs
@@ -25,7 +25,7 @@ async function addTransactionBatch(request) {
         request: userRequest,
         sizeLimit,
     });
-    const { batchId: batchIdOverride, from, networkClientId, requireApproval, transactions, } = userRequest;
+    const { batchId: batchIdOverride, from, networkClientId, requireApproval, securityAlertId, transactions, validateSecurity, } = userRequest;
     log('Adding', userRequest);
     const chainId = getChainId(networkClientId);
     const ethQuery = request.getEthQuery(networkClientId);
@@ -57,13 +57,34 @@ async function addTransactionBatch(request) {
         txParams.type = types_1.TransactionEnvelopeType.setCode;
         txParams.authorizationList = [{ address: upgradeContractAddress }];
     }
+    if (validateSecurity) {
+        const securityRequest = {
+            method: 'eth_sendTransaction',
+            params: [
+                {
+                    ...txParams,
+                    authorizationList: undefined,
+                    type: types_1.TransactionEnvelopeType.feeMarket,
+                },
+            ],
+            delegationMock: txParams.authorizationList?.[0]?.address,
+        };
+        log('Security request', securityRequest);
+        validateSecurity(securityRequest, chainId).catch((error) => {
+            log('Security validation failed', error);
+        });
+    }
     log('Adding batch transaction', txParams, networkClientId);
     const batchId = batchIdOverride ?? generateBatchId();
+    const securityAlertResponse = securityAlertId
+        ? { securityAlertId }
+        : undefined;
     const { result } = await addTransaction(txParams, {
         batchId,
         nestedTransactions,
         networkClientId,
         requireApproval,
+        securityAlertResponse,
         type: types_1.TransactionType.batch,
     });
     // Wait for the transaction to be published.
diff --git a/dist/utils/batch.mjs b/dist/utils/batch.mjs
index c1a98754a78717ae716043c68bef3af10a5d5fc3..ae130ff924e6cc60a9aebf3450d08b8f0e3b3608 100644
--- a/dist/utils/batch.mjs
+++ b/dist/utils/batch.mjs
@@ -22,7 +22,7 @@ export async function addTransactionBatch(request) {
         request: userRequest,
         sizeLimit,
     });
-    const { batchId: batchIdOverride, from, networkClientId, requireApproval, transactions, } = userRequest;
+    const { batchId: batchIdOverride, from, networkClientId, requireApproval, securityAlertId, transactions, validateSecurity, } = userRequest;
     log('Adding', userRequest);
     const chainId = getChainId(networkClientId);
     const ethQuery = request.getEthQuery(networkClientId);
@@ -54,13 +54,34 @@ export async function addTransactionBatch(request) {
         txParams.type = TransactionEnvelopeType.setCode;
         txParams.authorizationList = [{ address: upgradeContractAddress }];
     }
+    if (validateSecurity) {
+        const securityRequest = {
+            method: 'eth_sendTransaction',
+            params: [
+                {
+                    ...txParams,
+                    authorizationList: undefined,
+                    type: TransactionEnvelopeType.feeMarket,
+                },
+            ],
+            delegationMock: txParams.authorizationList?.[0]?.address,
+        };
+        log('Security request', securityRequest);
+        validateSecurity(securityRequest, chainId).catch((error) => {
+            log('Security validation failed', error);
+        });
+    }
     log('Adding batch transaction', txParams, networkClientId);
     const batchId = batchIdOverride ?? generateBatchId();
+    const securityAlertResponse = securityAlertId
+        ? { securityAlertId }
+        : undefined;
     const { result } = await addTransaction(txParams, {
         batchId,
         nestedTransactions,
         networkClientId,
         requireApproval,
+        securityAlertResponse,
         type: TransactionType.batch,
     });
     // Wait for the transaction to be published.
diff --git a/dist/utils/feature-flags.cjs b/dist/utils/feature-flags.cjs
index f5997a25468c27acb6f82f131906d87be0233b44..af10348ec8c726f99b64e67b8c78948e990a0a0b 100644
--- a/dist/utils/feature-flags.cjs
+++ b/dist/utils/feature-flags.cjs
@@ -4,8 +4,8 @@ exports.getBatchSizeLimit = exports.getEIP7702UpgradeContractAddress = exports.g
 const utils_1 = require("@metamask/utils");
 const signature_1 = require("./signature.cjs");
 const logger_1 = require("../logger.cjs");
-exports.FEATURE_FLAG_TRANSACTIONS = 'confirmations-transactions';
-exports.FEATURE_FLAG_EIP_7702 = 'confirmations-eip-7702';
+exports.FEATURE_FLAG_TRANSACTIONS = 'confirmations_transactions';
+exports.FEATURE_FLAG_EIP_7702 = 'confirmations_eip_7702';
 const DEFAULT_BATCH_SIZE_LIMIT = 10;
 const log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'feature-flags');
 /**
diff --git a/dist/utils/feature-flags.d.cts b/dist/utils/feature-flags.d.cts
index 871e9c1a1c624d2470a45cca679de5c4ac297447..e1fc8678e698c6e38a3a55c8a4e59d1c58f532c0 100644
--- a/dist/utils/feature-flags.d.cts
+++ b/dist/utils/feature-flags.d.cts
@@ -1,7 +1,7 @@
 import { type Hex } from "@metamask/utils";
 import type { TransactionControllerMessenger } from "../TransactionController.cjs";
-export declare const FEATURE_FLAG_TRANSACTIONS = "confirmations-transactions";
-export declare const FEATURE_FLAG_EIP_7702 = "confirmations-eip-7702";
+export declare const FEATURE_FLAG_TRANSACTIONS = "confirmations_transactions";
+export declare const FEATURE_FLAG_EIP_7702 = "confirmations_eip_7702";
 export type TransactionControllerFeatureFlags = {
     [FEATURE_FLAG_EIP_7702]?: {
         /**
diff --git a/dist/utils/feature-flags.d.mts b/dist/utils/feature-flags.d.mts
index 0acbb160fc9777f1b1a844c696fb2b91fd880174..d0211f6203b4503863a5b613877e8656af94f817 100644
--- a/dist/utils/feature-flags.d.mts
+++ b/dist/utils/feature-flags.d.mts
@@ -1,7 +1,7 @@
 import { type Hex } from "@metamask/utils";
 import type { TransactionControllerMessenger } from "../TransactionController.mjs";
-export declare const FEATURE_FLAG_TRANSACTIONS = "confirmations-transactions";
-export declare const FEATURE_FLAG_EIP_7702 = "confirmations-eip-7702";
+export declare const FEATURE_FLAG_TRANSACTIONS = "confirmations_transactions";
+export declare const FEATURE_FLAG_EIP_7702 = "confirmations_eip_7702";
 export type TransactionControllerFeatureFlags = {
     [FEATURE_FLAG_EIP_7702]?: {
         /**
diff --git a/dist/utils/feature-flags.mjs b/dist/utils/feature-flags.mjs
index d8a67aefe1b969517ed88ecfb3dfadbf1fc05b81..70bb226edbbe6343cbfa0e83df8340fa8bd08d20 100644
--- a/dist/utils/feature-flags.mjs
+++ b/dist/utils/feature-flags.mjs
@@ -1,8 +1,8 @@
 import { createModuleLogger } from "@metamask/utils";
 import { isValidSignature } from "./signature.mjs";
 import { projectLogger } from "../logger.mjs";
-export const FEATURE_FLAG_TRANSACTIONS = 'confirmations-transactions';
-export const FEATURE_FLAG_EIP_7702 = 'confirmations-eip-7702';
+export const FEATURE_FLAG_TRANSACTIONS = 'confirmations_transactions';
+export const FEATURE_FLAG_EIP_7702 = 'confirmations_eip_7702';
 const DEFAULT_BATCH_SIZE_LIMIT = 10;
 const log = createModuleLogger(projectLogger, 'feature-flags');
 /**
diff --git a/dist/utils/gas.cjs b/dist/utils/gas.cjs
index d3d81b493622c25181ead8dcf27f0d73efe61682..e82988fe0ce7168f9d36de61bef798f34f2f82b7 100644
--- a/dist/utils/gas.cjs
+++ b/dist/utils/gas.cjs
@@ -1,15 +1,20 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.addGasBuffer = exports.estimateGas = exports.updateGas = exports.MAX_GAS_BLOCK_PERCENT = exports.GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT = exports.DEFAULT_GAS_MULTIPLIER = exports.FIXED_GAS = exports.log = void 0;
+exports.addGasBuffer = exports.estimateGas = exports.updateGas = exports.DUMMY_AUTHORIZATION_SIGNATURE = exports.INTRINSIC_GAS = exports.MAX_GAS_BLOCK_PERCENT = exports.GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT = exports.DEFAULT_GAS_MULTIPLIER = exports.FIXED_GAS = exports.log = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const utils_1 = require("@metamask/utils");
+const eip7702_1 = require("./eip7702.cjs");
+const simulation_api_1 = require("./simulation-api.cjs");
 const constants_1 = require("../constants.cjs");
 const logger_1 = require("../logger.cjs");
+const types_1 = require("../types.cjs");
 exports.log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'gas');
 exports.FIXED_GAS = '0x5208';
 exports.DEFAULT_GAS_MULTIPLIER = 1.5;
 exports.GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT = 35;
 exports.MAX_GAS_BLOCK_PERCENT = 90;
+exports.INTRINSIC_GAS = 21000;
+exports.DUMMY_AUTHORIZATION_SIGNATURE = '0x1111111111111111111111111111111111111111111111111111111111111111';
 /**
  * Populate the gas properties of the provided transaction meta.
  *
@@ -35,25 +40,39 @@ exports.updateGas = updateGas;
  * Estimate the gas for the provided transaction parameters.
  * If the gas estimate fails, the fallback value is returned.
  *
- * @param txParams - The transaction parameters.
- * @param ethQuery - The EthQuery instance to interact with the network.
+ * @param options - The options object.
+ * @param options.chainId - The chain ID of the transaction.
+ * @param options.ethQuery - The EthQuery instance to interact with the network.
+ * @param options.isSimulationEnabled - Whether the simulation is enabled.
+ * @param options.txParams - The transaction parameters.
  * @returns The estimated gas and related info.
  */
-async function estimateGas(txParams, ethQuery) {
+async function estimateGas({ chainId, ethQuery, isSimulationEnabled, txParams, }) {
     const request = { ...txParams };
-    const { data, value } = request;
+    const { authorizationList, data, from, value, to } = request;
     const { gasLimit: blockGasLimit, number: blockNumber } = await getLatestBlock(ethQuery);
     const blockGasLimitBN = (0, controller_utils_1.hexToBN)(blockGasLimit);
     const fallback = (0, controller_utils_1.BNToHex)((0, controller_utils_1.fractionBN)(blockGasLimitBN, exports.GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT, 100));
     request.data = data ? (0, utils_1.add0x)(data) : data;
     request.value = value || '0x0';
+    request.authorizationList = normalizeAuthorizationList(request.authorizationList, chainId);
     delete request.gasPrice;
     delete request.maxFeePerGas;
     delete request.maxPriorityFeePerGas;
     let estimatedGas = fallback;
     let simulationFails;
+    const isUpgradeWithDataToSelf = txParams.type === types_1.TransactionEnvelopeType.setCode &&
+        authorizationList?.length &&
+        data &&
+        data !== '0x' &&
+        from?.toLowerCase() === to?.toLowerCase();
     try {
-        estimatedGas = await (0, controller_utils_1.query)(ethQuery, 'estimateGas', [request]);
+        if (isSimulationEnabled && isUpgradeWithDataToSelf) {
+            estimatedGas = await estimateGasUpgradeWithDataToSelf(request, ethQuery, chainId);
+        }
+        else {
+            estimatedGas = await (0, controller_utils_1.query)(ethQuery, 'estimateGas', [request]);
+        }
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
     }
     catch (error) {
@@ -109,7 +128,7 @@ exports.addGasBuffer = addGasBuffer;
  * @returns The final gas value and the estimate used.
  */
 async function getGas(request) {
-    const { isCustomNetwork, chainId, txMeta } = request;
+    const { chainId, isCustomNetwork, isSimulationEnabled, txMeta } = request;
     if (txMeta.txParams.gas) {
         (0, exports.log)('Using value from request', txMeta.txParams.gas);
         return [txMeta.txParams.gas, undefined, txMeta.txParams.gas];
@@ -118,7 +137,12 @@ async function getGas(request) {
         (0, exports.log)('Using fixed value', exports.FIXED_GAS);
         return [exports.FIXED_GAS, undefined, exports.FIXED_GAS];
     }
-    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(txMeta.txParams, request.ethQuery);
+    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas({
+        chainId: request.chainId,
+        ethQuery: request.ethQuery,
+        isSimulationEnabled,
+        txParams: txMeta.txParams,
+    });
     if (isCustomNetwork || simulationFails) {
         (0, exports.log)(isCustomNetwork
             ? 'Using original estimate as custom network'
@@ -165,4 +189,80 @@ async function getCode(ethQuery, address) {
 async function getLatestBlock(ethQuery) {
     return await (0, controller_utils_1.query)(ethQuery, 'getBlockByNumber', ['latest', false]);
 }
+/**
+ * Estimate the gas for a type 4 transaction.
+ *
+ * @param txParams - The transaction parameters.
+ * @param ethQuery - The EthQuery instance to interact with the network.
+ * @param chainId - The chain ID of the transaction.
+ * @returns The estimated gas.
+ */
+async function estimateGasUpgradeWithDataToSelf(txParams, ethQuery, chainId) {
+    const upgradeGas = await (0, controller_utils_1.query)(ethQuery, 'estimateGas', [
+        {
+            ...txParams,
+            data: '0x',
+        },
+    ]);
+    (0, exports.log)('Upgrade only gas', upgradeGas);
+    const delegationAddress = txParams.authorizationList?.[0].address;
+    const executeGas = await simulateGas({
+        chainId: chainId,
+        delegationAddress,
+        transaction: txParams,
+    });
+    (0, exports.log)('Execute gas', executeGas);
+    const total = (0, controller_utils_1.BNToHex)((0, controller_utils_1.hexToBN)(upgradeGas).add((0, controller_utils_1.hexToBN)(executeGas)).subn(exports.INTRINSIC_GAS));
+    (0, exports.log)('Total type 4 gas', total);
+    return total;
+}
+/**
+ * Simulate the required gas using the simulation API.
+ *
+ * @param options - The options object.
+ * @param options.chainId - The chain ID of the transaction.
+ * @param options.delegationAddress - The delegation address of the sender to mock.
+ * @param options.transaction - The transaction parameters.
+ * @returns The simulated gas.
+ */
+async function simulateGas({ chainId, delegationAddress, transaction, }) {
+    const response = await (0, simulation_api_1.simulateTransactions)(chainId, {
+        transactions: [
+            {
+                to: transaction.to,
+                from: transaction.from,
+                data: transaction.data,
+                value: transaction.value,
+            },
+        ],
+        overrides: {
+            [transaction.from]: {
+                code: delegationAddress &&
+                    (eip7702_1.DELEGATION_PREFIX + (0, utils_1.remove0x)(delegationAddress)),
+            },
+        },
+    });
+    const gasUsed = response?.transactions?.[0].gasUsed;
+    if (!gasUsed) {
+        throw new Error('No simulated gas returned');
+    }
+    return gasUsed;
+}
+/**
+ * Populate the authorization list with dummy values.
+ *
+ * @param authorizationList - The authorization list to prepare.
+ * @param chainId - The chain ID to use.
+ * @returns The authorization list with dummy values.
+ */
+function normalizeAuthorizationList(authorizationList, chainId) {
+    return authorizationList?.map((authorization) => ({
+        ...authorization,
+        chainId: authorization.chainId ?? chainId,
+        nonce: authorization.nonce ?? '0x1',
+        r: authorization.r ?? exports.DUMMY_AUTHORIZATION_SIGNATURE,
+        s: authorization.s ?? exports.DUMMY_AUTHORIZATION_SIGNATURE,
+        yParity: authorization.yParity ?? '0x1',
+    }));
+}
 //# sourceMappingURL=gas.cjs.map
\ No newline at end of file
diff --git a/dist/utils/gas.d.cts b/dist/utils/gas.d.cts
index 6826a10d95d0416ceb4abac0069d92b92598becb..d11f4d0e125386892ee2238ae19245cfe9272474 100644
--- a/dist/utils/gas.d.cts
+++ b/dist/utils/gas.d.cts
@@ -1,11 +1,12 @@
 /// <reference types="debug" />
 import type EthQuery from "@metamask/eth-query";
 import type { Hex } from "@metamask/utils";
-import type { TransactionMeta, TransactionParams } from "../types.cjs";
+import { type TransactionMeta, type TransactionParams } from "../types.cjs";
 export type UpdateGasRequest = {
+    chainId: Hex;
     ethQuery: EthQuery;
     isCustomNetwork: boolean;
-    chainId: Hex;
+    isSimulationEnabled: boolean;
     txMeta: TransactionMeta;
 };
 export declare const log: import("debug").Debugger;
@@ -13,6 +14,8 @@ export declare const FIXED_GAS = "0x5208";
 export declare const DEFAULT_GAS_MULTIPLIER = 1.5;
 export declare const GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT = 35;
 export declare const MAX_GAS_BLOCK_PERCENT = 90;
+export declare const INTRINSIC_GAS = 21000;
+export declare const DUMMY_AUTHORIZATION_SIGNATURE = "0x1111111111111111111111111111111111111111111111111111111111111111";
 /**
  * Populate the gas properties of the provided transaction meta.
  *
@@ -23,11 +26,19 @@ export declare function updateGas(request: UpdateGasRequest): Promise<void>;
  * Estimate the gas for the provided transaction parameters.
  * If the gas estimate fails, the fallback value is returned.
  *
- * @param txParams - The transaction parameters.
- * @param ethQuery - The EthQuery instance to interact with the network.
+ * @param options - The options object.
+ * @param options.chainId - The chain ID of the transaction.
+ * @param options.ethQuery - The EthQuery instance to interact with the network.
+ * @param options.isSimulationEnabled - Whether the simulation is enabled.
+ * @param options.txParams - The transaction parameters.
  * @returns The estimated gas and related info.
  */
-export declare function estimateGas(txParams: TransactionParams, ethQuery: EthQuery): Promise<{
+export declare function estimateGas({ chainId, ethQuery, isSimulationEnabled, txParams, }: {
+    chainId: Hex;
+    ethQuery: EthQuery;
+    isSimulationEnabled: boolean;
+    txParams: TransactionParams;
+}): Promise<{
     blockGasLimit: string;
     estimatedGas: `0x${string}`;
     simulationFails: {
diff --git a/dist/utils/gas.d.mts b/dist/utils/gas.d.mts
index 4ee15cd5afb670ff16207431fa51a34bcd5e2fb9..8b16db19489c7407a2f6f8cbba26f21587c8db11 100644
--- a/dist/utils/gas.d.mts
+++ b/dist/utils/gas.d.mts
@@ -1,11 +1,12 @@
 /// <reference types="debug" />
 import type EthQuery from "@metamask/eth-query";
 import type { Hex } from "@metamask/utils";
-import type { TransactionMeta, TransactionParams } from "../types.mjs";
+import { type TransactionMeta, type TransactionParams } from "../types.mjs";
 export type UpdateGasRequest = {
+    chainId: Hex;
     ethQuery: EthQuery;
     isCustomNetwork: boolean;
-    chainId: Hex;
+    isSimulationEnabled: boolean;
     txMeta: TransactionMeta;
 };
 export declare const log: import("debug").Debugger;
@@ -13,6 +14,8 @@ export declare const FIXED_GAS = "0x5208";
 export declare const DEFAULT_GAS_MULTIPLIER = 1.5;
 export declare const GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT = 35;
 export declare const MAX_GAS_BLOCK_PERCENT = 90;
+export declare const INTRINSIC_GAS = 21000;
+export declare const DUMMY_AUTHORIZATION_SIGNATURE = "0x1111111111111111111111111111111111111111111111111111111111111111";
 /**
  * Populate the gas properties of the provided transaction meta.
  *
@@ -23,11 +26,19 @@ export declare function updateGas(request: UpdateGasRequest): Promise<void>;
  * Estimate the gas for the provided transaction parameters.
  * If the gas estimate fails, the fallback value is returned.
  *
- * @param txParams - The transaction parameters.
- * @param ethQuery - The EthQuery instance to interact with the network.
+ * @param options - The options object.
+ * @param options.chainId - The chain ID of the transaction.
+ * @param options.ethQuery - The EthQuery instance to interact with the network.
+ * @param options.isSimulationEnabled - Whether the simulation is enabled.
+ * @param options.txParams - The transaction parameters.
  * @returns The estimated gas and related info.
  */
-export declare function estimateGas(txParams: TransactionParams, ethQuery: EthQuery): Promise<{
+export declare function estimateGas({ chainId, ethQuery, isSimulationEnabled, txParams, }: {
+    chainId: Hex;
+    ethQuery: EthQuery;
+    isSimulationEnabled: boolean;
+    txParams: TransactionParams;
+}): Promise<{
     blockGasLimit: string;
     estimatedGas: `0x${string}`;
     simulationFails: {
diff --git a/dist/utils/gas.mjs b/dist/utils/gas.mjs
index bb98a2eee58ee9fa00676ff61af868d8729e5051..b92ef6e6cc9076cda1c467231540bea6dbd05314 100644
--- a/dist/utils/gas.mjs
+++ b/dist/utils/gas.mjs
@@ -1,12 +1,17 @@
 import { BNToHex, fractionBN, hexToBN, query } from "@metamask/controller-utils";
-import { add0x, createModuleLogger } from "@metamask/utils";
+import { add0x, createModuleLogger, remove0x } from "@metamask/utils";
+import { DELEGATION_PREFIX } from "./eip7702.mjs";
+import { simulateTransactions } from "./simulation-api.mjs";
 import { GAS_BUFFER_CHAIN_OVERRIDES } from "../constants.mjs";
 import { projectLogger } from "../logger.mjs";
+import { TransactionEnvelopeType } from "../types.mjs";
 export const log = createModuleLogger(projectLogger, 'gas');
 export const FIXED_GAS = '0x5208';
 export const DEFAULT_GAS_MULTIPLIER = 1.5;
 export const GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT = 35;
 export const MAX_GAS_BLOCK_PERCENT = 90;
+export const INTRINSIC_GAS = 21000;
+export const DUMMY_AUTHORIZATION_SIGNATURE = '0x1111111111111111111111111111111111111111111111111111111111111111';
 /**
  * Populate the gas properties of the provided transaction meta.
  *
@@ -31,25 +36,39 @@ export async function updateGas(request) {
  * Estimate the gas for the provided transaction parameters.
  * If the gas estimate fails, the fallback value is returned.
  *
- * @param txParams - The transaction parameters.
- * @param ethQuery - The EthQuery instance to interact with the network.
+ * @param options - The options object.
+ * @param options.chainId - The chain ID of the transaction.
+ * @param options.ethQuery - The EthQuery instance to interact with the network.
+ * @param options.isSimulationEnabled - Whether the simulation is enabled.
+ * @param options.txParams - The transaction parameters.
  * @returns The estimated gas and related info.
  */
-export async function estimateGas(txParams, ethQuery) {
+export async function estimateGas({ chainId, ethQuery, isSimulationEnabled, txParams, }) {
     const request = { ...txParams };
-    const { data, value } = request;
+    const { authorizationList, data, from, value, to } = request;
     const { gasLimit: blockGasLimit, number: blockNumber } = await getLatestBlock(ethQuery);
     const blockGasLimitBN = hexToBN(blockGasLimit);
     const fallback = BNToHex(fractionBN(blockGasLimitBN, GAS_ESTIMATE_FALLBACK_BLOCK_PERCENT, 100));
     request.data = data ? add0x(data) : data;
     request.value = value || '0x0';
+    request.authorizationList = normalizeAuthorizationList(request.authorizationList, chainId);
     delete request.gasPrice;
     delete request.maxFeePerGas;
     delete request.maxPriorityFeePerGas;
     let estimatedGas = fallback;
     let simulationFails;
+    const isUpgradeWithDataToSelf = txParams.type === TransactionEnvelopeType.setCode &&
+        authorizationList?.length &&
+        data &&
+        data !== '0x' &&
+        from?.toLowerCase() === to?.toLowerCase();
     try {
-        estimatedGas = await query(ethQuery, 'estimateGas', [request]);
+        if (isSimulationEnabled && isUpgradeWithDataToSelf) {
+            estimatedGas = await estimateGasUpgradeWithDataToSelf(request, ethQuery, chainId);
+        }
+        else {
+            estimatedGas = await query(ethQuery, 'estimateGas', [request]);
+        }
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
     }
     catch (error) {
@@ -103,7 +122,7 @@ export function addGasBuffer(estimatedGas, blockGasLimit, multiplier) {
  * @returns The final gas value and the estimate used.
  */
 async function getGas(request) {
-    const { isCustomNetwork, chainId, txMeta } = request;
+    const { chainId, isCustomNetwork, isSimulationEnabled, txMeta } = request;
     if (txMeta.txParams.gas) {
         log('Using value from request', txMeta.txParams.gas);
         return [txMeta.txParams.gas, undefined, txMeta.txParams.gas];
@@ -112,7 +131,12 @@ async function getGas(request) {
         log('Using fixed value', FIXED_GAS);
         return [FIXED_GAS, undefined, FIXED_GAS];
     }
-    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(txMeta.txParams, request.ethQuery);
+    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas({
+        chainId: request.chainId,
+        ethQuery: request.ethQuery,
+        isSimulationEnabled,
+        txParams: txMeta.txParams,
+    });
     if (isCustomNetwork || simulationFails) {
         log(isCustomNetwork
             ? 'Using original estimate as custom network'
@@ -159,4 +183,80 @@ async function getCode(ethQuery, address) {
 async function getLatestBlock(ethQuery) {
     return await query(ethQuery, 'getBlockByNumber', ['latest', false]);
 }
+/**
+ * Estimate the gas for a type 4 transaction.
+ *
+ * @param txParams - The transaction parameters.
+ * @param ethQuery - The EthQuery instance to interact with the network.
+ * @param chainId - The chain ID of the transaction.
+ * @returns The estimated gas.
+ */
+async function estimateGasUpgradeWithDataToSelf(txParams, ethQuery, chainId) {
+    const upgradeGas = await query(ethQuery, 'estimateGas', [
+        {
+            ...txParams,
+            data: '0x',
+        },
+    ]);
+    log('Upgrade only gas', upgradeGas);
+    const delegationAddress = txParams.authorizationList?.[0].address;
+    const executeGas = await simulateGas({
+        chainId: chainId,
+        delegationAddress,
+        transaction: txParams,
+    });
+    log('Execute gas', executeGas);
+    const total = BNToHex(hexToBN(upgradeGas).add(hexToBN(executeGas)).subn(INTRINSIC_GAS));
+    log('Total type 4 gas', total);
+    return total;
+}
+/**
+ * Simulate the required gas using the simulation API.
+ *
+ * @param options - The options object.
+ * @param options.chainId - The chain ID of the transaction.
+ * @param options.delegationAddress - The delegation address of the sender to mock.
+ * @param options.transaction - The transaction parameters.
+ * @returns The simulated gas.
+ */
+async function simulateGas({ chainId, delegationAddress, transaction, }) {
+    const response = await simulateTransactions(chainId, {
+        transactions: [
+            {
+                to: transaction.to,
+                from: transaction.from,
+                data: transaction.data,
+                value: transaction.value,
+            },
+        ],
+        overrides: {
+            [transaction.from]: {
+                code: delegationAddress &&
+                    (DELEGATION_PREFIX + remove0x(delegationAddress)),
+            },
+        },
+    });
+    const gasUsed = response?.transactions?.[0].gasUsed;
+    if (!gasUsed) {
+        throw new Error('No simulated gas returned');
+    }
+    return gasUsed;
+}
+/**
+ * Populate the authorization list with dummy values.
+ *
+ * @param authorizationList - The authorization list to prepare.
+ * @param chainId - The chain ID to use.
+ * @returns The authorization list with dummy values.
+ */
+function normalizeAuthorizationList(authorizationList, chainId) {
+    return authorizationList?.map((authorization) => ({
+        ...authorization,
+        chainId: authorization.chainId ?? chainId,
+        nonce: authorization.nonce ?? '0x1',
+        r: authorization.r ?? DUMMY_AUTHORIZATION_SIGNATURE,
+        s: authorization.s ?? DUMMY_AUTHORIZATION_SIGNATURE,
+        yParity: authorization.yParity ?? '0x1',
+    }));
+}
 //# sourceMappingURL=gas.mjs.map
\ No newline at end of file
diff --git a/dist/utils/simulation-api.d.cts b/dist/utils/simulation-api.d.cts
index 3b88f3a7e7e7730719d303f822d0516a31a60d71..62eaeaa4d9f9e825a96e70a65b76c32388adbc13 100644
--- a/dist/utils/simulation-api.d.cts
+++ b/dist/utils/simulation-api.d.cts
@@ -27,12 +27,14 @@ export type SimulationRequest = {
         time?: Hex;
     };
     /**
-     * Overrides to the state of the blockchain, keyed by smart contract address.
+     * Overrides to the state of the blockchain, keyed by address.
      */
     overrides?: {
         [address: Hex]: {
-            /** Overrides to the storage slots for a smart contract account. */
-            stateDiff: {
+            /** Override the code for an address. */
+            code?: Hex;
+            /** Overrides to the storage slots for an address. */
+            stateDiff?: {
                 [slot: Hex]: Hex;
             };
         };
@@ -82,12 +84,14 @@ export type SimulationResponseStateDiff = {
 };
 /** Response from the simulation API for a single transaction. */
 export type SimulationResponseTransaction = {
+    /** Hierarchy of call data including nested calls and logs. */
+    callTrace?: SimulationResponseCallTrace;
     /** An error message indicating the transaction could not be simulated. */
     error?: string;
+    /** The total gas used by the transaction. */
+    gasUsed?: Hex;
     /** Return value of the transaction, such as the balance if calling balanceOf. */
     return: Hex;
-    /** Hierarchy of call data including nested calls and logs. */
-    callTrace?: SimulationResponseCallTrace;
     /** Changes to the blockchain state. */
     stateDiff?: {
         /** Initial blockchain state before the transaction. */
diff --git a/dist/utils/simulation-api.d.mts b/dist/utils/simulation-api.d.mts
index 79e872fa72634f9d8be17a6b975dd782d19bb048..76233aefdabbc960641a3ce21864a9ab5cabbf03 100644
--- a/dist/utils/simulation-api.d.mts
+++ b/dist/utils/simulation-api.d.mts
@@ -27,12 +27,14 @@ export type SimulationRequest = {
         time?: Hex;
     };
     /**
-     * Overrides to the state of the blockchain, keyed by smart contract address.
+     * Overrides to the state of the blockchain, keyed by address.
      */
     overrides?: {
         [address: Hex]: {
-            /** Overrides to the storage slots for a smart contract account. */
-            stateDiff: {
+            /** Override the code for an address. */
+            code?: Hex;
+            /** Overrides to the storage slots for an address. */
+            stateDiff?: {
                 [slot: Hex]: Hex;
             };
         };
@@ -82,12 +84,14 @@ export type SimulationResponseStateDiff = {
 };
 /** Response from the simulation API for a single transaction. */
 export type SimulationResponseTransaction = {
+    /** Hierarchy of call data including nested calls and logs. */
+    callTrace?: SimulationResponseCallTrace;
     /** An error message indicating the transaction could not be simulated. */
     error?: string;
+    /** The total gas used by the transaction. */
+    gasUsed?: Hex;
     /** Return value of the transaction, such as the balance if calling balanceOf. */
     return: Hex;
-    /** Hierarchy of call data including nested calls and logs. */
-    callTrace?: SimulationResponseCallTrace;
     /** Changes to the blockchain state. */
     stateDiff?: {
         /** Initial blockchain state before the transaction. */
