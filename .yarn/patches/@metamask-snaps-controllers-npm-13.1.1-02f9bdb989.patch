diff --git a/dist/cronjob/CronjobController.cjs b/dist/cronjob/CronjobController.cjs
index 0e8feebadcaf91dcf2fb248f78df0433c16aff38..0adc1bc23fad9cf3afd66204e5179bbe7f0d0a61 100644
--- a/dist/cronjob/CronjobController.cjs
+++ b/dist/cronjob/CronjobController.cjs
@@ -20,28 +20,40 @@ const controllerName = 'CronjobController';
  */
 class CronjobController extends base_controller_1.BaseController {
     #timers;
+    #stateManager;
     #dailyTimer = new Timer_1.Timer(exports.DAILY_TIMEOUT);
-    constructor({ messenger, state }) {
+    constructor({ messenger, state, stateManager }) {
         super({
             messenger,
             metadata: {
-                events: { persist: true, anonymous: false },
+                events: { persist: false, anonymous: false },
             },
             name: controllerName,
             state: {
                 events: {},
                 ...state,
+                ...stateManager.getInitialState(),
             },
         });
         this.#timers = new Map();
+        this.#stateManager = stateManager;
         this.messagingSystem.subscribe('SnapController:snapInstalled', this.#handleSnapInstalledEvent);
         this.messagingSystem.subscribe('SnapController:snapUninstalled', this.#handleSnapUninstalledEvent);
         this.messagingSystem.subscribe('SnapController:snapEnabled', this.#handleSnapEnabledEvent);
         this.messagingSystem.subscribe('SnapController:snapDisabled', this.#handleSnapDisabledEvent);
         this.messagingSystem.subscribe('SnapController:snapUpdated', this.#handleSnapUpdatedEvent);
+        this.messagingSystem.registerActionHandler(`${controllerName}:init`, (...args) => this.init(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:schedule`, (...args) => this.schedule(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:cancel`, (...args) => this.cancel(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:get`, (...args) => this.get(...args));
+    }
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init() {
         this.#start();
         this.#clear();
         this.#reschedule();
@@ -149,9 +161,10 @@ class CronjobController extends base_controller_1.BaseController {
             date: (0, utils_2.getExecutionDate)(event.schedule),
             scheduledAt: new Date().toISOString(),
         };
-        this.update((state) => {
+        const { nextState } = this.update((state) => {
             state.events[internalEvent.id] = (0, immer_1.castDraft)(internalEvent);
         });
+        this.#stateManager.set(nextState);
         this.#schedule(internalEvent);
         return id;
     }
@@ -162,9 +175,10 @@ class CronjobController extends base_controller_1.BaseController {
      */
     #schedule(event) {
         const date = (0, utils_2.getExecutionDate)(event.schedule);
-        this.update((state) => {
+        const { nextState } = this.update((state) => {
             state.events[event.id].date = date;
         });
+        this.#stateManager.set(nextState);
         this.#startTimer({
             ...event,
             date,
@@ -182,6 +196,12 @@ class CronjobController extends base_controller_1.BaseController {
         if (ms > exports.DAILY_TIMEOUT) {
             return;
         }
+        // When an event is supposed to be scheduled close to the current time
+        // we may end up needing to execute immediately instead.
+        if (ms <= 0) {
+            this.#execute(event);
+            return;
+        }
         const timer = new Timer_1.Timer(ms);
         timer.start(() => {
             this.#execute(event);
@@ -212,9 +232,10 @@ class CronjobController extends base_controller_1.BaseController {
         // Non-recurring events are removed from the state after execution, and
         // recurring events are rescheduled.
         if (!event.recurring) {
-            this.update((state) => {
+            const { nextState } = this.update((state) => {
                 delete state.events[event.id];
             });
+            this.#stateManager.set(nextState);
             return;
         }
         this.#schedule(event);
@@ -229,9 +250,10 @@ class CronjobController extends base_controller_1.BaseController {
         const timer = this.#timers.get(id);
         timer?.cancel();
         this.#timers.delete(id);
-        this.update((state) => {
+        const { nextState } = this.update((state) => {
             delete state.events[id];
         });
+        this.#stateManager.set(nextState);
     }
     /**
      * Retrieve all cronjob specifications for a Snap.
@@ -262,6 +284,8 @@ class CronjobController extends base_controller_1.BaseController {
      * @param snap - Basic Snap information.
      */
     #handleSnapInstalledEvent = (snap) => {
+        // In case of local Snaps, they may already have cronjobs that should be cleared.
+        this.unregister(snap.id);
         this.register(snap.id);
     };
     /**
diff --git a/dist/cronjob/CronjobController.d.cts b/dist/cronjob/CronjobController.d.cts
index 99f72dd74a4bbcb2f1bf1e35858490a7bcc1b848..6bf50fb30a5c539b27445f3fa436a819123b98f4 100644
--- a/dist/cronjob/CronjobController.d.cts
+++ b/dist/cronjob/CronjobController.d.cts
@@ -5,6 +5,14 @@ import type { BackgroundEvent, SnapId } from "@metamask/snaps-sdk";
 import type { HandleSnapRequest, SnapDisabled, SnapEnabled, SnapInstalled, SnapUninstalled, SnapUpdated } from "../index.cjs";
 export type CronjobControllerGetStateAction = ControllerGetStateAction<typeof controllerName, CronjobControllerState>;
 export type CronjobControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, CronjobControllerState>;
+/**
+ * Initialise the CronjobController. This should be called after all controllers
+ * are created.
+ */
+export type CronjobControllerInitAction = {
+    type: `${typeof controllerName}:init`;
+    handler: CronjobController['init'];
+};
 export type Schedule = {
     type: `${typeof controllerName}:schedule`;
     handler: CronjobController['schedule'];
@@ -17,16 +25,27 @@ export type Get = {
     type: `${typeof controllerName}:get`;
     handler: CronjobController['get'];
 };
-export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get;
+export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get | CronjobControllerInitAction;
 export type CronjobControllerEvents = CronjobControllerStateChangeEvent | SnapInstalled | SnapUninstalled | SnapUpdated | SnapEnabled | SnapDisabled;
 export type CronjobControllerMessenger = RestrictedMessenger<typeof controllerName, CronjobControllerActions, CronjobControllerEvents, CronjobControllerActions['type'], CronjobControllerEvents['type']>;
 export declare const DAILY_TIMEOUT: number;
+export type CronjobControllerStateManager = {
+    set(state: CronjobControllerState): void;
+    getInitialState(): CronjobControllerState | undefined;
+};
 export type CronjobControllerArgs = {
     messenger: CronjobControllerMessenger;
     /**
      * Persisted state that will be used for rehydration.
      */
     state?: CronjobControllerState;
+    /**
+     * State manager for the controller.
+     *
+     * This is a temporary workaround to allow the controller to update the state
+     * often without persisting all of the client state to disk.
+     */
+    stateManager: CronjobControllerStateManager;
 };
 /**
  * Represents a background event that is scheduled to be executed by the
@@ -70,7 +89,14 @@ declare const controllerName = "CronjobController";
  */
 export declare class CronjobController extends BaseController<typeof controllerName, CronjobControllerState, CronjobControllerMessenger> {
     #private;
-    constructor({ messenger, state }: CronjobControllerArgs);
+    constructor({ messenger, state, stateManager }: CronjobControllerArgs);
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init(): void;
     /**
      * Schedule a non-recurring background event.
      *
diff --git a/dist/cronjob/CronjobController.d.cts.map b/dist/cronjob/CronjobController.d.cts.map
index e0dac1a29a8e7ab7b77cd09827dd3f1baca0772a..abf2564416874528d493d2b790c1eb189fccf287 100644
--- a/dist/cronjob/CronjobController.d.cts.map
+++ b/dist/cronjob/CronjobController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"CronjobController.d.cts","sourceRoot":"","sources":["../../src/cronjob/CronjobController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"CronjobController.d.cts","sourceRoot":"","sources":["../../src/cronjob/CronjobController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/cronjob/CronjobController.d.mts b/dist/cronjob/CronjobController.d.mts
index 40ba2e165e8d531b01816f30b7403e7f62d693a1..5640a145b7323c835f5021a89feef24a7bb8c717 100644
--- a/dist/cronjob/CronjobController.d.mts
+++ b/dist/cronjob/CronjobController.d.mts
@@ -5,6 +5,14 @@ import type { BackgroundEvent, SnapId } from "@metamask/snaps-sdk";
 import type { HandleSnapRequest, SnapDisabled, SnapEnabled, SnapInstalled, SnapUninstalled, SnapUpdated } from "../index.mjs";
 export type CronjobControllerGetStateAction = ControllerGetStateAction<typeof controllerName, CronjobControllerState>;
 export type CronjobControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, CronjobControllerState>;
+/**
+ * Initialise the CronjobController. This should be called after all controllers
+ * are created.
+ */
+export type CronjobControllerInitAction = {
+    type: `${typeof controllerName}:init`;
+    handler: CronjobController['init'];
+};
 export type Schedule = {
     type: `${typeof controllerName}:schedule`;
     handler: CronjobController['schedule'];
@@ -17,16 +25,27 @@ export type Get = {
     type: `${typeof controllerName}:get`;
     handler: CronjobController['get'];
 };
-export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get;
+export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get | CronjobControllerInitAction;
 export type CronjobControllerEvents = CronjobControllerStateChangeEvent | SnapInstalled | SnapUninstalled | SnapUpdated | SnapEnabled | SnapDisabled;
 export type CronjobControllerMessenger = RestrictedMessenger<typeof controllerName, CronjobControllerActions, CronjobControllerEvents, CronjobControllerActions['type'], CronjobControllerEvents['type']>;
 export declare const DAILY_TIMEOUT: number;
+export type CronjobControllerStateManager = {
+    set(state: CronjobControllerState): void;
+    getInitialState(): CronjobControllerState | undefined;
+};
 export type CronjobControllerArgs = {
     messenger: CronjobControllerMessenger;
     /**
      * Persisted state that will be used for rehydration.
      */
     state?: CronjobControllerState;
+    /**
+     * State manager for the controller.
+     *
+     * This is a temporary workaround to allow the controller to update the state
+     * often without persisting all of the client state to disk.
+     */
+    stateManager: CronjobControllerStateManager;
 };
 /**
  * Represents a background event that is scheduled to be executed by the
@@ -70,7 +89,14 @@ declare const controllerName = "CronjobController";
  */
 export declare class CronjobController extends BaseController<typeof controllerName, CronjobControllerState, CronjobControllerMessenger> {
     #private;
-    constructor({ messenger, state }: CronjobControllerArgs);
+    constructor({ messenger, state, stateManager }: CronjobControllerArgs);
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init(): void;
     /**
      * Schedule a non-recurring background event.
      *
diff --git a/dist/cronjob/CronjobController.d.mts.map b/dist/cronjob/CronjobController.d.mts.map
index 242f7f65fa002062880cea95786c8d2583769203..f2fe55fe359b2a7c7bc329ec73e6e01add933c15 100644
--- a/dist/cronjob/CronjobController.d.mts.map
+++ b/dist/cronjob/CronjobController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"CronjobController.d.mts","sourceRoot":"","sources":["../../src/cronjob/CronjobController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"CronjobController.d.mts","sourceRoot":"","sources":["../../src/cronjob/CronjobController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/cronjob/CronjobController.mjs b/dist/cronjob/CronjobController.mjs
index e3f025c419fa6f4683de678fb6d415b0f3a12782..e07611dc4f8a593883a4a5990460326510173e71 100644
--- a/dist/cronjob/CronjobController.mjs
+++ b/dist/cronjob/CronjobController.mjs
@@ -17,28 +17,40 @@ const controllerName = 'CronjobController';
  */
 export class CronjobController extends BaseController {
     #timers;
+    #stateManager;
     #dailyTimer = new Timer(DAILY_TIMEOUT);
-    constructor({ messenger, state }) {
+    constructor({ messenger, state, stateManager }) {
         super({
             messenger,
             metadata: {
-                events: { persist: true, anonymous: false },
+                events: { persist: false, anonymous: false },
             },
             name: controllerName,
             state: {
                 events: {},
                 ...state,
+                ...stateManager.getInitialState(),
             },
         });
         this.#timers = new Map();
+        this.#stateManager = stateManager;
         this.messagingSystem.subscribe('SnapController:snapInstalled', this.#handleSnapInstalledEvent);
         this.messagingSystem.subscribe('SnapController:snapUninstalled', this.#handleSnapUninstalledEvent);
         this.messagingSystem.subscribe('SnapController:snapEnabled', this.#handleSnapEnabledEvent);
         this.messagingSystem.subscribe('SnapController:snapDisabled', this.#handleSnapDisabledEvent);
         this.messagingSystem.subscribe('SnapController:snapUpdated', this.#handleSnapUpdatedEvent);
+        this.messagingSystem.registerActionHandler(`${controllerName}:init`, (...args) => this.init(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:schedule`, (...args) => this.schedule(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:cancel`, (...args) => this.cancel(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:get`, (...args) => this.get(...args));
+    }
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init() {
         this.#start();
         this.#clear();
         this.#reschedule();
@@ -146,9 +158,10 @@ export class CronjobController extends BaseController {
             date: getExecutionDate(event.schedule),
             scheduledAt: new Date().toISOString(),
         };
-        this.update((state) => {
+        const { nextState } = this.update((state) => {
             state.events[internalEvent.id] = castDraft(internalEvent);
         });
+        this.#stateManager.set(nextState);
         this.#schedule(internalEvent);
         return id;
     }
@@ -159,9 +172,10 @@ export class CronjobController extends BaseController {
      */
     #schedule(event) {
         const date = getExecutionDate(event.schedule);
-        this.update((state) => {
+        const { nextState } = this.update((state) => {
             state.events[event.id].date = date;
         });
+        this.#stateManager.set(nextState);
         this.#startTimer({
             ...event,
             date,
@@ -179,6 +193,12 @@ export class CronjobController extends BaseController {
         if (ms > DAILY_TIMEOUT) {
             return;
         }
+        // When an event is supposed to be scheduled close to the current time
+        // we may end up needing to execute immediately instead.
+        if (ms <= 0) {
+            this.#execute(event);
+            return;
+        }
         const timer = new Timer(ms);
         timer.start(() => {
             this.#execute(event);
@@ -209,9 +229,10 @@ export class CronjobController extends BaseController {
         // Non-recurring events are removed from the state after execution, and
         // recurring events are rescheduled.
         if (!event.recurring) {
-            this.update((state) => {
+            const { nextState } = this.update((state) => {
                 delete state.events[event.id];
             });
+            this.#stateManager.set(nextState);
             return;
         }
         this.#schedule(event);
@@ -226,9 +247,10 @@ export class CronjobController extends BaseController {
         const timer = this.#timers.get(id);
         timer?.cancel();
         this.#timers.delete(id);
-        this.update((state) => {
+        const { nextState } = this.update((state) => {
             delete state.events[id];
         });
+        this.#stateManager.set(nextState);
     }
     /**
      * Retrieve all cronjob specifications for a Snap.
@@ -259,6 +281,8 @@ export class CronjobController extends BaseController {
      * @param snap - Basic Snap information.
      */
     #handleSnapInstalledEvent = (snap) => {
+        // In case of local Snaps, they may already have cronjobs that should be cleared.
+        this.unregister(snap.id);
         this.register(snap.id);
     };
     /**
