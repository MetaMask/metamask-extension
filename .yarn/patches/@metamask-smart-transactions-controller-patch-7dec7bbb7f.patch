diff --git a/dist/SmartTransactionsController.js b/dist/SmartTransactionsController.js
index 7581d803a2955ddc737ce9e9c394777d7f4deb91..b4af3a59904e80145781479d277a40072dc0a6cf 100644
--- a/dist/SmartTransactionsController.js
+++ b/dist/SmartTransactionsController.js
@@ -13,7 +13,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _SmartTransactionsController_instances, _SmartTransactionsController_interval, _SmartTransactionsController_clientId, _SmartTransactionsController_chainId, _SmartTransactionsController_supportedChainIds, _SmartTransactionsController_getNonceLock, _SmartTransactionsController_ethQuery, _SmartTransactionsController_confirmExternalTransaction, _SmartTransactionsController_getRegularTransactions, _SmartTransactionsController_trackMetaMetricsEvent, _SmartTransactionsController_getMetaMetricsProps, _SmartTransactionsController_getFeatureFlags, _SmartTransactionsController_updateTransaction, _SmartTransactionsController_fetch, _SmartTransactionsController_updateSmartTransaction, _SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction, _SmartTransactionsController_createOrUpdateSmartTransaction, _SmartTransactionsController_doesTransactionNeedConfirmation, _SmartTransactionsController_confirmSmartTransaction, _SmartTransactionsController_addNonceToTransaction, _SmartTransactionsController_getChainId, _SmartTransactionsController_getChainIds, _SmartTransactionsController_getNetworkClientId, _SmartTransactionsController_getNetworkClientIds, _SmartTransactionsController_getEthQuery, _SmartTransactionsController_getCurrentSmartTransactions, _SmartTransactionsController_wipeSmartTransactionsPerChainId;
+var _SmartTransactionsController_instances, _SmartTransactionsController_interval, _SmartTransactionsController_clientId, _SmartTransactionsController_chainId, _SmartTransactionsController_supportedChainIds, _SmartTransactionsController_getNonceLock, _SmartTransactionsController_ethQuery, _SmartTransactionsController_confirmExternalTransaction, _SmartTransactionsController_getRegularTransactions, _SmartTransactionsController_trackMetaMetricsEvent, _SmartTransactionsController_getMetaMetricsProps, _SmartTransactionsController_getFeatureFlags, _SmartTransactionsController_updateTransaction, _SmartTransactionsController_fetch, _SmartTransactionsController_updateSmartTransaction, _SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction, _SmartTransactionsController_createOrUpdateSmartTransaction, _SmartTransactionsController_doesTransactionNeedConfirmation, _SmartTransactionsController_confirmSmartTransaction, _SmartTransactionsController_addNonceToTransaction, _SmartTransactionsController_getChainId, _SmartTransactionsController_getChainIds, _SmartTransactionsController_getNetworkClientId, _SmartTransactionsController_getEthQuery, _SmartTransactionsController_getCurrentSmartTransactions, _SmartTransactionsController_wipeSmartTransactionsPerChainId;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.getDefaultSmartTransactionsControllerState = exports.DEFAULT_INTERVAL = void 0;
 const bytes_1 = require("@ethersproject/bytes");
@@ -122,17 +122,15 @@ class SmartTransactionsController extends (0, polling_controller_1.StaticInterva
         // with a networkClientId that is not supported, but for now I'll add a check in case
         // wondering if we should add some kind of predicate to the polling controller to check whether
         // we should poll or not
-        // const chainId = this.#getChainId({ networkClientId });
-        const filteredChainIds = chainIds.filter((chainId) => __classPrivateFieldGet(this, _SmartTransactionsController_supportedChainIds, "f").includes(chainId));
+        const filteredChainIds = (chainIds !== null && chainIds !== void 0 ? chainIds : []).filter((chainId) => __classPrivateFieldGet(this, _SmartTransactionsController_supportedChainIds, "f").includes(chainId));
         if (filteredChainIds.length === 0) {
             return Promise.resolve();
         }
         return this.updateSmartTransactions({ chainIds: filteredChainIds });
     }
     checkPoll({ smartTransactionsState: { smartTransactions }, }) {
-        const allChainsCurrentTransactions = Object.values(smartTransactions).flat();
-        const currentSmartTransactions = allChainsCurrentTransactions;
-        const pendingTransactions = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.filter(utils_1.isSmartTransactionPending);
+        const smartTransactionsForAllChains = Object.values(smartTransactions).flat();
+        const pendingTransactions = smartTransactionsForAllChains === null || smartTransactionsForAllChains === void 0 ? void 0 : smartTransactionsForAllChains.filter(utils_1.isSmartTransactionPending);
         if (!this.timeoutHandle && (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) > 0) {
             this.poll();
         }
@@ -215,15 +213,15 @@ class SmartTransactionsController extends (0, polling_controller_1.StaticInterva
             // Filter pending transactions and map them to the desired shape
             const pendingTransactions = transactions
                 .filter(utils_1.isSmartTransactionPending)
-                .map((tx) => {
+                .map((pendingSmartTransaction) => {
                 // Use the transaction's chainId (from the key) to derive a networkClientId
                 const networkClientIdToUse = __classPrivateFieldGet(this, _SmartTransactionsController_instances, "m", _SmartTransactionsController_getNetworkClientId).call(this, {
                     chainId: chainId,
                 });
                 return {
-                    uuid: tx.uuid,
+                    uuid: pendingSmartTransaction.uuid,
                     networkClientId: networkClientIdToUse,
-                    chainId: tx.chainId, // same as the key, but explicit on the transaction
+                    chainId: pendingSmartTransaction.chainId, // same as the key, but explicit on the transaction
                 };
             });
             if (pendingTransactions.length > 0) {
@@ -237,7 +235,7 @@ class SmartTransactionsController extends (0, polling_controller_1.StaticInterva
         // Since transactions come from the same chain group, take the chainId from the first one.
         const { chainId } = transactions[0];
         // Build query parameters with all UUIDs
-        const uuids = transactions.map((t) => t.uuid);
+        const uuids = transactions.map((tx) => tx.uuid);
         const params = new URLSearchParams({ uuids: uuids.join(',') });
         // Get the ethQuery for the first transaction's networkClientId
         const ethQuery = __classPrivateFieldGet(this, _SmartTransactionsController_instances, "m", _SmartTransactionsController_getEthQuery).call(this, {
@@ -645,10 +643,6 @@ async function _SmartTransactionsController_fetch(request, options) {
 }, _SmartTransactionsController_getNetworkClientId = function _SmartTransactionsController_getNetworkClientId({ chainId }) {
     const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
     return networkConfigurationsByChainId[chainId].rpcEndpoints[networkConfigurationsByChainId[chainId].defaultRpcEndpointIndex].networkClientId;
-}, _SmartTransactionsController_getNetworkClientIds = function _SmartTransactionsController_getNetworkClientIds() {
-    const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
-    return Object.values(networkConfigurationsByChainId).map((chainConfig) => chainConfig.rpcEndpoints[chainConfig.defaultRpcEndpointIndex]
-        .networkClientId);
 }, _SmartTransactionsController_getEthQuery = function _SmartTransactionsController_getEthQuery({ networkClientId, } = {}) {
     if (networkClientId) {
         const { provider } = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);
@@ -660,11 +654,12 @@ async function _SmartTransactionsController_fetch(request, options) {
     return __classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, "f");
 }, _SmartTransactionsController_getCurrentSmartTransactions = function _SmartTransactionsController_getCurrentSmartTransactions() {
     const { smartTransactionsState: { smartTransactions }, } = this.state;
-    const currentSmartTransactions = Object.values(smartTransactions).flat();
-    if (!currentSmartTransactions || currentSmartTransactions.length === 0) {
+    const smartTransactionsForAllChains = Object.values(smartTransactions).flat();
+    if (!smartTransactionsForAllChains ||
+        smartTransactionsForAllChains.length === 0) {
         return [];
     }
-    return currentSmartTransactions;
+    return smartTransactionsForAllChains;
 }, _SmartTransactionsController_wipeSmartTransactionsPerChainId = function _SmartTransactionsController_wipeSmartTransactionsPerChainId({ chainId, addressLowerCase, }) {
     const { smartTransactionsState: { smartTransactions }, } = this.state;
     const smartTransactionsForSelectedChain = smartTransactions === null || smartTransactions === void 0 ? void 0 : smartTransactions[chainId];
