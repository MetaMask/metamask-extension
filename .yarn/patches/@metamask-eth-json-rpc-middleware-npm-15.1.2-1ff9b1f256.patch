diff --git a/dist/index.d.ts b/dist/index.d.ts
index 80efdcd052229a66e1a8997e0b1b9d4596f3aafb..09200814e73e46cf2598db8f74a2bac34c2384d5 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -4,6 +4,9 @@ export * from './block-ref';
 export * from './block-tracker-inspector';
 export * from './fetch';
 export * from './inflight-cache';
+export type { GetCallsStatusParams, GetCallsStatusReceipt, GetCallsStatusResult, GetTransactionReceiptsByBatchIdHook, } from './methods/wallet-get-calls-status';
+export type { GetCapabilitiesHook, GetCapabilitiesParams, GetCapabilitiesResult, } from './methods/wallet-get-capabilities';
+export type { ProcessSendCallsHook, SendCalls, SendCallsParams, } from './methods/wallet-send-calls';
 export * from './providerAsMiddleware';
 export * from './retryOnEmpty';
 export * from './wallet';
diff --git a/dist/methods/wallet-get-calls-status.d.ts b/dist/methods/wallet-get-calls-status.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..5892ecf587fb1175140987c007b84e176ad3ec17
--- /dev/null
+++ b/dist/methods/wallet-get-calls-status.d.ts
@@ -0,0 +1,47 @@
+import type { Infer } from '@metamask/superstruct';
+import type { Json, JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';
+declare const GetCallsStatusStruct: import("@metamask/superstruct").Struct<[string], null>;
+declare const GetCallsStatusReceiptStruct: import("@metamask/superstruct").Struct<{
+    status?: `0x${string}` | undefined;
+    chainId?: `0x${string}` | undefined;
+    blockHash?: `0x${string}` | undefined;
+    blockNumber?: `0x${string}` | undefined;
+    logs?: {
+        data?: `0x${string}` | undefined;
+        address?: `0x${string}` | undefined;
+        topics?: `0x${string}`[] | undefined;
+    }[] | undefined;
+    gasUsed?: `0x${string}` | undefined;
+    transactionHash?: `0x${string}` | undefined;
+}, {
+    logs: import("@metamask/superstruct").Struct<{
+        data?: `0x${string}` | undefined;
+        address?: `0x${string}` | undefined;
+        topics?: `0x${string}`[] | undefined;
+    }[] | undefined, import("@metamask/superstruct").Struct<{
+        data?: `0x${string}` | undefined;
+        address?: `0x${string}` | undefined;
+        topics?: `0x${string}`[] | undefined;
+    }, {
+        address: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+        data: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+        topics: import("@metamask/superstruct").Struct<`0x${string}`[] | undefined, import("@metamask/superstruct").Struct<`0x${string}`, null>>;
+    }>>;
+    status: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+    chainId: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+    blockHash: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+    blockNumber: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+    gasUsed: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+    transactionHash: import("@metamask/superstruct").Struct<`0x${string}` | undefined, null>;
+}>;
+export declare type GetCallsStatusParams = Infer<typeof GetCallsStatusStruct>;
+export declare type GetCallsStatusReceipt = Infer<typeof GetCallsStatusReceiptStruct>;
+export declare type GetCallsStatusResult = {
+    status: 'PENDING' | 'CONFIRMED';
+    receipts?: GetCallsStatusReceipt[];
+};
+export declare type GetTransactionReceiptsByBatchIdHook = (batchId: string, req: JsonRpcRequest) => Promise<GetCallsStatusReceipt[]>;
+export declare function walletGetCallsStatus(req: JsonRpcRequest, res: PendingJsonRpcResponse<Json>, { getTransactionReceiptsByBatchId, }: {
+    getTransactionReceiptsByBatchId?: GetTransactionReceiptsByBatchIdHook;
+}): Promise<void>;
+export {};
diff --git a/dist/methods/wallet-get-calls-status.js b/dist/methods/wallet-get-calls-status.js
new file mode 100644
index 0000000000000000000000000000000000000000..aa8d407ef799e572537adbb921db0b8318285ef2
--- /dev/null
+++ b/dist/methods/wallet-get-calls-status.js
@@ -0,0 +1,41 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.walletGetCallsStatus = void 0;
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const superstruct_1 = require("@metamask/superstruct");
+const utils_1 = require("@metamask/utils");
+const validation_1 = require("../utils/validation");
+const GetCallsStatusStruct = (0, superstruct_1.tuple)([(0, superstruct_1.nonempty)((0, superstruct_1.string)())]);
+const GetCallsStatusReceiptStruct = (0, superstruct_1.object)({
+    logs: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.object)({
+        address: (0, superstruct_1.optional)(utils_1.HexChecksumAddressStruct),
+        data: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+        topics: (0, superstruct_1.optional)((0, superstruct_1.array)(utils_1.StrictHexStruct)),
+    }))),
+    status: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+    chainId: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+    blockHash: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+    blockNumber: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+    gasUsed: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+    transactionHash: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+});
+async function walletGetCallsStatus(req, res, { getTransactionReceiptsByBatchId, }) {
+    if (!getTransactionReceiptsByBatchId) {
+        throw rpc_errors_1.rpcErrors.methodNotSupported();
+    }
+    (0, validation_1.validateParams)(req.params, GetCallsStatusStruct);
+    const batchId = req.params[0];
+    const rawReceipts = await getTransactionReceiptsByBatchId(batchId, req);
+    if (!rawReceipts.length) {
+        res.result = null;
+        return;
+    }
+    const isComplete = rawReceipts.every((receipt) => Boolean(receipt));
+    const status = isComplete ? 'CONFIRMED' : 'PENDING';
+    const receipts = isComplete
+        ? rawReceipts.map((receipt) => (0, superstruct_1.mask)(receipt, GetCallsStatusReceiptStruct))
+        : null;
+    res.result = { status, receipts };
+}
+exports.walletGetCallsStatus = walletGetCallsStatus;
+//# sourceMappingURL=wallet-get-calls-status.js.map
\ No newline at end of file
diff --git a/dist/methods/wallet-get-capabilities.d.ts b/dist/methods/wallet-get-capabilities.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e2bad570d2af6406d87c8ad5a51aa05cd9f5800c
--- /dev/null
+++ b/dist/methods/wallet-get-capabilities.d.ts
@@ -0,0 +1,10 @@
+import type { Infer } from '@metamask/superstruct';
+import type { Hex, Json, JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';
+declare const GetCapabilitiesStruct: import("@metamask/superstruct").Struct<[`0x${string}`], null>;
+export declare type GetCapabilitiesParams = Infer<typeof GetCapabilitiesStruct>;
+export declare type GetCapabilitiesResult = Record<Hex, Record<string, Json>>;
+export declare type GetCapabilitiesHook = (address: Hex, req: JsonRpcRequest) => Promise<GetCapabilitiesResult>;
+export declare function walletGetCapabilities(req: JsonRpcRequest, res: PendingJsonRpcResponse<Json>, { getCapabilities, }: {
+    getCapabilities?: GetCapabilitiesHook;
+}): Promise<void>;
+export {};
diff --git a/dist/methods/wallet-get-capabilities.js b/dist/methods/wallet-get-capabilities.js
new file mode 100644
index 0000000000000000000000000000000000000000..b3eae7d1e54e2f0f5a9286a0aff3fae932d01054
--- /dev/null
+++ b/dist/methods/wallet-get-capabilities.js
@@ -0,0 +1,19 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.walletGetCapabilities = void 0;
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const superstruct_1 = require("@metamask/superstruct");
+const utils_1 = require("@metamask/utils");
+const validation_1 = require("../utils/validation");
+const GetCapabilitiesStruct = (0, superstruct_1.tuple)([utils_1.HexChecksumAddressStruct]);
+async function walletGetCapabilities(req, res, { getCapabilities, }) {
+    if (!getCapabilities) {
+        throw rpc_errors_1.rpcErrors.methodNotSupported();
+    }
+    (0, validation_1.validateParams)(req.params, GetCapabilitiesStruct);
+    const address = req.params[0];
+    const capabilities = await getCapabilities(address, req);
+    res.result = capabilities;
+}
+exports.walletGetCapabilities = walletGetCapabilities;
+//# sourceMappingURL=wallet-get-capabilities.js.map
\ No newline at end of file
diff --git a/dist/methods/wallet-send-calls.d.ts b/dist/methods/wallet-send-calls.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..3ec76000e361f4a616fa205ead266c1adb9cc66a
--- /dev/null
+++ b/dist/methods/wallet-send-calls.d.ts
@@ -0,0 +1,21 @@
+import type { Infer } from '@metamask/superstruct';
+import type { Json, JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';
+declare const SendCallsStruct: import("@metamask/superstruct").Struct<[{
+    from: `0x${string}`;
+    version: string;
+    calls: {
+        data?: `0x${string}` | undefined;
+        value?: `0x${string}` | undefined;
+        to?: `0x${string}` | undefined;
+    }[];
+    chainId?: `0x${string}` | undefined;
+    capabilities?: {} | undefined;
+}], null>;
+export declare type SendCallsParams = Infer<typeof SendCallsStruct>;
+export declare type SendCalls = SendCallsParams[0];
+export declare type ProcessSendCallsHook = (sendCalls: SendCalls, req: JsonRpcRequest) => Promise<string>;
+export declare function walletSendCalls(req: JsonRpcRequest, res: PendingJsonRpcResponse<Json>, { getAccounts, processSendCalls, }: {
+    getAccounts: (req: JsonRpcRequest) => Promise<string[]>;
+    processSendCalls?: ProcessSendCallsHook;
+}): Promise<void>;
+export {};
diff --git a/dist/methods/wallet-send-calls.js b/dist/methods/wallet-send-calls.js
new file mode 100644
index 0000000000000000000000000000000000000000..1b074658d5d0663ddd11ee6bd65e61f5ee0087ff
--- /dev/null
+++ b/dist/methods/wallet-send-calls.js
@@ -0,0 +1,34 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.walletSendCalls = void 0;
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const superstruct_1 = require("@metamask/superstruct");
+const utils_1 = require("@metamask/utils");
+const validation_1 = require("../utils/validation");
+const SendCallsStruct = (0, superstruct_1.tuple)([
+    (0, superstruct_1.object)({
+        version: (0, superstruct_1.nonempty)((0, superstruct_1.string)()),
+        from: utils_1.HexChecksumAddressStruct,
+        chainId: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+        calls: (0, superstruct_1.array)((0, superstruct_1.object)({
+            to: (0, superstruct_1.optional)(utils_1.HexChecksumAddressStruct),
+            data: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+            value: (0, superstruct_1.optional)(utils_1.StrictHexStruct),
+        })),
+        capabilities: (0, superstruct_1.optional)((0, superstruct_1.type)({})),
+    }),
+]);
+async function walletSendCalls(req, res, { getAccounts, processSendCalls, }) {
+    if (!processSendCalls) {
+        throw rpc_errors_1.rpcErrors.methodNotSupported();
+    }
+    (0, validation_1.validateParams)(req.params, SendCallsStruct);
+    const params = req.params[0];
+    const from = await (0, validation_1.validateAndNormalizeKeyholder)(params.from, req, {
+        getAccounts,
+    });
+    const sendCalls = Object.assign(Object.assign({}, params), { from });
+    res.result = await processSendCalls(sendCalls, req);
+}
+exports.walletSendCalls = walletSendCalls;
+//# sourceMappingURL=wallet-send-calls.js.map
\ No newline at end of file
diff --git a/dist/utils/validation.d.ts b/dist/utils/validation.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f988d4d0abf5360d43e47b179c930c2cf1745ee4
--- /dev/null
+++ b/dist/utils/validation.d.ts
@@ -0,0 +1,7 @@
+import type { Struct } from '@metamask/superstruct';
+import type { Hex, JsonRpcRequest } from '@metamask/utils';
+export declare function validateAndNormalizeKeyholder(address: Hex, req: JsonRpcRequest, { getAccounts }: {
+    getAccounts: (req: JsonRpcRequest) => Promise<string[]>;
+}): Promise<Hex>;
+export declare function validateParams<ParamsType>(value: unknown | ParamsType, struct: Struct<ParamsType>): asserts value is ParamsType;
+export declare function resemblesAddress(str: string): boolean;
diff --git a/dist/utils/validation.js b/dist/utils/validation.js
new file mode 100644
index 0000000000000000000000000000000000000000..656812c7c268640c9e639e2f61fe3fcb578f6b11
--- /dev/null
+++ b/dist/utils/validation.js
@@ -0,0 +1,43 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.resemblesAddress = exports.validateParams = exports.validateAndNormalizeKeyholder = void 0;
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const superstruct_1 = require("@metamask/superstruct");
+async function validateAndNormalizeKeyholder(address, req, { getAccounts }) {
+    if (typeof address === 'string' &&
+        address.length > 0 &&
+        resemblesAddress(address)) {
+        // Ensure that an "unauthorized" error is thrown if the requester
+        // does not have the `eth_accounts` permission.
+        const accounts = await getAccounts(req);
+        const normalizedAccounts = accounts.map((_address) => _address.toLowerCase());
+        const normalizedAddress = address.toLowerCase();
+        if (normalizedAccounts.includes(normalizedAddress)) {
+            return normalizedAddress;
+        }
+        throw rpc_errors_1.providerErrors.unauthorized();
+    }
+    throw rpc_errors_1.rpcErrors.invalidParams({
+        message: `Invalid parameters: must provide an Ethereum address.`,
+    });
+}
+exports.validateAndNormalizeKeyholder = validateAndNormalizeKeyholder;
+function validateParams(value, struct) {
+    const [error] = (0, superstruct_1.validate)(value, struct);
+    if (error) {
+        throw rpc_errors_1.rpcErrors.invalidInput(formatValidationError(error, `Invalid params`));
+    }
+}
+exports.validateParams = validateParams;
+function resemblesAddress(str) {
+    // hex prefix 2 + 20 bytes
+    return str.length === 2 + 20 * 2;
+}
+exports.resemblesAddress = resemblesAddress;
+function formatValidationError(error, message) {
+    return `${message}\n\n${error
+        .failures()
+        .map((f) => `${f.path.join(' > ')}${f.path.length ? ' - ' : ''}${f.message}`)
+        .join('\n')}`;
+}
+//# sourceMappingURL=validation.js.map
\ No newline at end of file
diff --git a/dist/wallet.d.ts b/dist/wallet.d.ts
index ab7b30a5cf18a0940d76fbb6d2966624a35da9f7..8626dd4f5ed7e59a0493e36afdfdfd3a406b84a9 100644
--- a/dist/wallet.d.ts
+++ b/dist/wallet.d.ts
@@ -1,5 +1,8 @@
 import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';
-import { type JsonRpcRequest } from '@metamask/utils';
+import type { JsonRpcRequest } from '@metamask/utils';
+import type { GetTransactionReceiptsByBatchIdHook } from './methods/wallet-get-calls-status';
+import type { GetCapabilitiesHook } from './methods/wallet-get-capabilities';
+import type { ProcessSendCallsHook } from './methods/wallet-send-calls';
 import type { Block } from './types';
 export declare type TransactionParams = {
     from: string;
@@ -16,6 +19,8 @@ export declare type TypedMessageV1Params = Omit<TypedMessageParams, 'data'> & {
 };
 export interface WalletMiddlewareOptions {
     getAccounts: (req: JsonRpcRequest) => Promise<string[]>;
+    getCapabilities?: GetCapabilitiesHook;
+    getTransactionReceiptsByBatchId?: GetTransactionReceiptsByBatchIdHook;
     processDecryptMessage?: (msgParams: MessageParams, req: JsonRpcRequest) => Promise<string>;
     processEncryptionPublicKey?: (address: string, req: JsonRpcRequest) => Promise<string>;
     processPersonalMessage?: (msgParams: MessageParams, req: JsonRpcRequest) => Promise<string>;
@@ -24,5 +29,6 @@ export interface WalletMiddlewareOptions {
     processTypedMessage?: (msgParams: TypedMessageV1Params, req: JsonRpcRequest, version: string) => Promise<string>;
     processTypedMessageV3?: (msgParams: TypedMessageParams, req: JsonRpcRequest, version: string) => Promise<string>;
     processTypedMessageV4?: (msgParams: TypedMessageParams, req: JsonRpcRequest, version: string) => Promise<string>;
+    processSendCalls?: ProcessSendCallsHook;
 }
-export declare function createWalletMiddleware({ getAccounts, processDecryptMessage, processEncryptionPublicKey, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4, }: WalletMiddlewareOptions): JsonRpcMiddleware<any, Block>;
+export declare function createWalletMiddleware({ getAccounts, getCapabilities, getTransactionReceiptsByBatchId, processDecryptMessage, processEncryptionPublicKey, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4, processSendCalls, }: WalletMiddlewareOptions): JsonRpcMiddleware<any, Block>;
diff --git a/dist/wallet.js b/dist/wallet.js
index 8deadeba3245550f8dbafb778a9386f7bf853a68..85419fbecc3b0e9a8c048fecc112157ae833690c 100644
--- a/dist/wallet.js
+++ b/dist/wallet.js
@@ -28,9 +28,13 @@ const sigUtil = __importStar(require("@metamask/eth-sig-util"));
 const json_rpc_engine_1 = require("@metamask/json-rpc-engine");
 const rpc_errors_1 = require("@metamask/rpc-errors");
 const utils_1 = require("@metamask/utils");
+const wallet_get_calls_status_1 = require("./methods/wallet-get-calls-status");
+const wallet_get_capabilities_1 = require("./methods/wallet-get-capabilities");
+const wallet_send_calls_1 = require("./methods/wallet-send-calls");
 const common_1 = require("./utils/common");
 const normalize_1 = require("./utils/normalize");
-function createWalletMiddleware({ getAccounts, processDecryptMessage, processEncryptionPublicKey, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4, }) {
+const validation_1 = require("./utils/validation");
+function createWalletMiddleware({ getAccounts, getCapabilities, getTransactionReceiptsByBatchId, processDecryptMessage, processEncryptionPublicKey, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4, processSendCalls, }) {
     if (!getAccounts) {
         throw new Error('opts.getAccounts is required');
     }
@@ -49,6 +53,12 @@ function createWalletMiddleware({ getAccounts, processDecryptMessage, processEnc
         eth_getEncryptionPublicKey: (0, json_rpc_engine_1.createAsyncMiddleware)(encryptionPublicKey),
         eth_decrypt: (0, json_rpc_engine_1.createAsyncMiddleware)(decryptMessage),
         personal_ecRecover: (0, json_rpc_engine_1.createAsyncMiddleware)(personalRecover),
+        // EIP-5792
+        wallet_getCapabilities: (0, json_rpc_engine_1.createAsyncMiddleware)(async (params, req) => (0, wallet_get_capabilities_1.walletGetCapabilities)(params, req, { getCapabilities })),
+        wallet_sendCalls: (0, json_rpc_engine_1.createAsyncMiddleware)(async (params, req) => (0, wallet_send_calls_1.walletSendCalls)(params, req, { getAccounts, processSendCalls })),
+        wallet_getCallsStatus: (0, json_rpc_engine_1.createAsyncMiddleware)(async (params, req) => (0, wallet_get_calls_status_1.walletGetCallsStatus)(params, req, {
+            getTransactionReceiptsByBatchId,
+        })),
     });
     //
     // account lookups
@@ -178,7 +188,7 @@ function createWalletMiddleware({ getAccounts, processDecryptMessage, processEnc
         // That means when the first param is definitely an address,
         // and the second param is definitely not, but is hex.
         let address, message;
-        if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {
+        if ((0, validation_1.resemblesAddress)(firstParam) && !(0, validation_1.resemblesAddress)(secondParam)) {
             let warning = `The eth_personalSign method requires params ordered `;
             warning += `[message, address]. This was previously handled incorrectly, `;
             warning += `and has been corrected automatically. `;
@@ -253,22 +263,7 @@ function createWalletMiddleware({ getAccounts, processDecryptMessage, processEnc
      * an error
      */
     async function validateAndNormalizeKeyholder(address, req) {
-        if (typeof address === 'string' &&
-            address.length > 0 &&
-            resemblesAddress(address)) {
-            // Ensure that an "unauthorized" error is thrown if the requester does not have the `eth_accounts`
-            // permission.
-            const accounts = await getAccounts(req);
-            const normalizedAccounts = accounts.map((_address) => _address.toLowerCase());
-            const normalizedAddress = address.toLowerCase();
-            if (normalizedAccounts.includes(normalizedAddress)) {
-                return normalizedAddress;
-            }
-            throw rpc_errors_1.providerErrors.unauthorized();
-        }
-        throw rpc_errors_1.rpcErrors.invalidParams({
-            message: `Invalid parameters: must provide an Ethereum address.`,
-        });
+        return (0, validation_1.validateAndNormalizeKeyholder)(address, req, { getAccounts });
     }
 }
 exports.createWalletMiddleware = createWalletMiddleware;
@@ -309,8 +304,4 @@ function validateVerifyingContract(data) {
         throw rpc_errors_1.rpcErrors.invalidInput();
     }
 }
-function resemblesAddress(str) {
-    // hex prefix 2 + 20 bytes
-    return str.length === 2 + 20 * 2;
-}
 //# sourceMappingURL=wallet.js.map
\ No newline at end of file
