diff --git a/dist/helpers/IncomingTransactionHelper.cjs b/dist/helpers/IncomingTransactionHelper.cjs
index cd4a8158be0960eaf9d74cc6328e0b3bbd06740d..21336f5b778c05f8cd0469ff9964c704c96f26b1 100644
--- a/dist/helpers/IncomingTransactionHelper.cjs
+++ b/dist/helpers/IncomingTransactionHelper.cjs
@@ -20,7 +20,7 @@ exports.IncomingTransactionHelper = void 0;
 // eslint-disable-next-line import-x/no-nodejs-modules
 const events_1 = __importDefault(require("events"));
 const logger_1 = require("../logger.cjs");
-const INTERVAL = 1000 * 30; // 30 Seconds
+const INTERVAL = 1000 * 60 * 4; // 4 Minutes
 class IncomingTransactionHelper {
     constructor({ getCache, getCurrentAccount, getLocalTransactions, includeTokenTransfers, isEnabled, queryEntireHistory, remoteTransactionSource, trimTransactions, updateCache, updateTransactions, }) {
         _IncomingTransactionHelper_instances.add(this);
diff --git a/dist/helpers/IncomingTransactionHelper.mjs b/dist/helpers/IncomingTransactionHelper.mjs
index 45129a2bdc8f5bcb3955eb7c1a82a1164364a084..138efb1d178be8d2c5dc623ecd18b4997fb49b37 100644
--- a/dist/helpers/IncomingTransactionHelper.mjs
+++ b/dist/helpers/IncomingTransactionHelper.mjs
@@ -14,7 +14,7 @@ var _IncomingTransactionHelper_instances, _IncomingTransactionHelper_getCache, _
 // eslint-disable-next-line import-x/no-nodejs-modules
 import EventEmitter from "events";
 import { incomingTransactionsLogger as log } from "../logger.mjs";
-const INTERVAL = 1000 * 30; // 30 Seconds
+const INTERVAL = 1000 * 60 * 4; // 4 Minutes
 export class IncomingTransactionHelper {
     constructor({ getCache, getCurrentAccount, getLocalTransactions, includeTokenTransfers, isEnabled, queryEntireHistory, remoteTransactionSource, trimTransactions, updateCache, updateTransactions, }) {
         _IncomingTransactionHelper_instances.add(this);
diff --git a/dist/utils/validation.cjs b/dist/utils/validation.cjs
index 71521677f3b61f3cc19c78707b09cb83a9a8505c..15997a10940bdfdae2f0250b0af511c40c1c6ff9 100644
--- a/dist/utils/validation.cjs
+++ b/dist/utils/validation.cjs
@@ -32,19 +32,8 @@ const TRANSACTION_ENVELOPE_TYPES_FEE_MARKET = [
  * @throws Throws an error if the transaction is not permitted.
  */
 async function validateTransactionOrigin({ data, from, internalAccounts, origin, permittedAddresses, selectedAddress, txParams, type, }) {
-    const isInternal = origin === controller_utils_1.ORIGIN_METAMASK;
     const isExternal = origin && origin !== controller_utils_1.ORIGIN_METAMASK;
     const { authorizationList, to, type: envelopeType } = txParams;
-    if (isInternal && from !== selectedAddress) {
-        throw rpc_errors_1.rpcErrors.internal({
-            message: `Internally initiated transaction is using invalid account.`,
-            data: {
-                origin,
-                fromAddress: from,
-                selectedAddress,
-            },
-        });
-    }
     if (isExternal && permittedAddresses && !permittedAddresses.includes(from)) {
         throw rpc_errors_1.providerErrors.unauthorized({ data: { origin } });
     }
diff --git a/dist/utils/validation.mjs b/dist/utils/validation.mjs
index 5d4d4cba5f494ce276eda44e96bb88467a39b21e..2ead49fc4359aede7eba724a70151671677b2e49 100644
--- a/dist/utils/validation.mjs
+++ b/dist/utils/validation.mjs
@@ -29,19 +29,8 @@ const TRANSACTION_ENVELOPE_TYPES_FEE_MARKET = [
  * @throws Throws an error if the transaction is not permitted.
  */
 export async function validateTransactionOrigin({ data, from, internalAccounts, origin, permittedAddresses, selectedAddress, txParams, type, }) {
-    const isInternal = origin === ORIGIN_METAMASK;
     const isExternal = origin && origin !== ORIGIN_METAMASK;
     const { authorizationList, to, type: envelopeType } = txParams;
-    if (isInternal && from !== selectedAddress) {
-        throw rpcErrors.internal({
-            message: `Internally initiated transaction is using invalid account.`,
-            data: {
-                origin,
-                fromAddress: from,
-                selectedAddress,
-            },
-        });
-    }
     if (isExternal && permittedAddresses && !permittedAddresses.includes(from)) {
         throw providerErrors.unauthorized({ data: { origin } });
     }
diff --git a/dist/TransactionController.cjs b/dist/TransactionController.cjs
index 7ba44e1fbfcc9644be7e1c9dc43526c854158dbc..dc4936c43634aa8fc43025601e9015ae8e3606bc 100644
--- a/dist/TransactionController.cjs
+++ b/dist/TransactionController.cjs
@@ -2112,7 +2112,7 @@ async function _TransactionController_approveTransaction(transactionId, traceCon
 }, _TransactionController_isRejectError = function _TransactionController_isRejectError(error) {
     return [
         rpc_errors_1.errorCodes.provider.userRejectedRequest,
-        rpc_errors_1.errorCodes.rpc.methodNotSupported,
+        5750,
     ].includes(error.code);
 }, _TransactionController_rejectTransactionAndThrow = function _TransactionController_rejectTransactionAndThrow(transactionId, actionId, error) {
     __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_rejectTransaction).call(this, transactionId, actionId, error);
diff --git a/dist/TransactionController.mjs b/dist/TransactionController.mjs
index ec8769bac826d788846613ddb82e2320ba22462b..2dca7f38aa60a02c7d2e6ba2aefc23f28f85155d 100644
--- a/dist/TransactionController.mjs
+++ b/dist/TransactionController.mjs
@@ -2113,7 +2113,7 @@ async function _TransactionController_approveTransaction(transactionId, traceCon
 }, _TransactionController_isRejectError = function _TransactionController_isRejectError(error) {
     return [
         errorCodes.provider.userRejectedRequest,
-        errorCodes.rpc.methodNotSupported,
+        5750,
     ].includes(error.code);
 }, _TransactionController_rejectTransactionAndThrow = function _TransactionController_rejectTransactionAndThrow(transactionId, actionId, error) {
     __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_rejectTransaction).call(this, transactionId, actionId, error);
