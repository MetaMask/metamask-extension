diff --git a/dist/utils/quote.cjs b/dist/utils/quote.cjs
index 005fd217a6ecb30b0051b0a1f4cbd14ad7edf4b5..8786ec7ef3809ab4a862ef6e4c403ea5170c6b89 100644
--- a/dist/utils/quote.cjs
+++ b/dist/utils/quote.cjs
@@ -15,6 +15,16 @@ const isValidQuoteRequest = (partialRequest, requireAmount = true) => {
     if (requireAmount) {
         stringFields.push('srcTokenAmount');
     }
+    // If bridging and one of the chains is solana, require the dest wallet address
+    if (partialRequest.destChainId &&
+        partialRequest.srcChainId &&
+        (0, bridge_1.isSolanaChainId)(partialRequest.destChainId) ===
+            !(0, bridge_1.isSolanaChainId)(partialRequest.srcChainId)) {
+        stringFields.push('destWalletAddress');
+        if (!partialRequest.destWalletAddress) {
+            return false;
+        }
+    }
     const numberFields = [];
     // if slippage is defined, require it to be a number
     if (partialRequest.slippage !== undefined) {
diff --git a/dist/utils/quote.cjs.map b/dist/utils/quote.cjs.map
index 83727d16c15505100a607be86ec2c731d0cb34eb..a2d0f9cfdd8de9ec9a3d3b0aa553fb16d18caba5 100644
--- a/dist/utils/quote.cjs.map
+++ b/dist/utils/quote.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"quote.cjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  bridgeQuote,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;\n\n  const totalGasLimitInDec = new BigNumber(\n    trade.gasLimit?.toString() ?? '0',\n  ).plus(approval?.gasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote,\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate) => {\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  return {\n    amount,\n    amountMax,\n    valueInCurrency,\n    valueInCurrencyMax,\n    usd,\n    usdMax,\n  };\n};\n\nexport const calcTotalEstimatedNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrency\n      ? new BigNumber(gasFee.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usd\n      ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrencyMax\n      ? new BigNumber(gasFee.valueInCurrencyMax)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usdMax\n      ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"quote.cjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress, isSolanaChainId } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  // If bridging and one of the chains is solana, require the dest wallet address\n  if (\n    partialRequest.destChainId &&\n    partialRequest.srcChainId &&\n    isSolanaChainId(partialRequest.destChainId) ===\n      !isSolanaChainId(partialRequest.srcChainId)\n  ) {\n    stringFields.push('destWalletAddress');\n    if (!partialRequest.destWalletAddress) {\n      return false;\n    }\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  bridgeQuote,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;\n\n  const totalGasLimitInDec = new BigNumber(\n    trade.gasLimit?.toString() ?? '0',\n  ).plus(approval?.gasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote,\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate) => {\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  return {\n    amount,\n    amountMax,\n    valueInCurrency,\n    valueInCurrencyMax,\n    usd,\n    usdMax,\n  };\n};\n\nexport const calcTotalEstimatedNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrency\n      ? new BigNumber(gasFee.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usd\n      ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrencyMax\n      ? new BigNumber(gasFee.valueInCurrencyMax)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usdMax\n      ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/quote.d.cts.map b/dist/utils/quote.d.cts.map
index c0ddce68dc33d641f09a18230345bfee1b4dde3c..c1d90ce3769c60c15ee1f3f1c34c2b9515155144 100644
--- a/dist/utils/quote.d.cts.map
+++ b/dist/utils/quote.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"quote.d.cts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEA0C7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA4CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;;;;;;;;CA4BtC,CAAC;AAEF,eAAO,MAAM,4BAA4B,WAC/B,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"quote.d.cts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEAsD7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA4CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;;;;;;;;CA4BtC,CAAC;AAEF,eAAO,MAAM,4BAA4B,WAC/B,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/quote.d.mts.map b/dist/utils/quote.d.mts.map
index f13748ff86312d560f4f79f529c24658b3e7d000..adfdb7ce601d473b94e90e10a689f45f09ce0cae 100644
--- a/dist/utils/quote.d.mts.map
+++ b/dist/utils/quote.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"quote.d.mts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEA0C7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA4CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;;;;;;;;CA4BtC,CAAC;AAEF,eAAO,MAAM,4BAA4B,WAC/B,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"quote.d.mts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEAsD7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA4CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;;;;;;;;CA4BtC,CAAC;AAEF,eAAO,MAAM,4BAA4B,WAC/B,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/quote.mjs b/dist/utils/quote.mjs
index 84998d9e1c2f07059b686047b2225adcbaeb2b49..0b0454b19b5e241adf5a5fac7490da5374f23fd1 100644
--- a/dist/utils/quote.mjs
+++ b/dist/utils/quote.mjs
@@ -1,6 +1,6 @@
 import { convertHexToDecimal, toHex, weiHexToGweiDec } from "@metamask/controller-utils";
 import { BigNumber } from "bignumber.js";
-import { isNativeAddress } from "./bridge.mjs";
+import { isNativeAddress, isSolanaChainId } from "./bridge.mjs";
 export const isValidQuoteRequest = (partialRequest, requireAmount = true) => {
     const stringFields = [
         'srcTokenAddress',
@@ -12,6 +12,16 @@ export const isValidQuoteRequest = (partialRequest, requireAmount = true) => {
     if (requireAmount) {
         stringFields.push('srcTokenAmount');
     }
+    // If bridging and one of the chains is solana, require the dest wallet address
+    if (partialRequest.destChainId &&
+        partialRequest.srcChainId &&
+        isSolanaChainId(partialRequest.destChainId) ===
+            !isSolanaChainId(partialRequest.srcChainId)) {
+        stringFields.push('destWalletAddress');
+        if (!partialRequest.destWalletAddress) {
+            return false;
+        }
+    }
     const numberFields = [];
     // if slippage is defined, require it to be a number
     if (partialRequest.slippage !== undefined) {
diff --git a/dist/utils/quote.mjs.map b/dist/utils/quote.mjs.map
index faefb7551da554d4aa04b2a3d5af5a54a5f16854..87e1de95b4f08743fdc24c3d2fcfd96ee943cc79 100644
--- a/dist/utils/quote.mjs.map
+++ b/dist/utils/quote.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"quote.mjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  bridgeQuote,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;\n\n  const totalGasLimitInDec = new BigNumber(\n    trade.gasLimit?.toString() ?? '0',\n  ).plus(approval?.gasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote,\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate) => {\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  return {\n    amount,\n    amountMax,\n    valueInCurrency,\n    valueInCurrencyMax,\n    usd,\n    usdMax,\n  };\n};\n\nexport const calcTotalEstimatedNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrency\n      ? new BigNumber(gasFee.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usd\n      ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrencyMax\n      ? new BigNumber(gasFee.valueInCurrencyMax)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usdMax\n      ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"quote.mjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress, isSolanaChainId } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  // If bridging and one of the chains is solana, require the dest wallet address\n  if (\n    partialRequest.destChainId &&\n    partialRequest.srcChainId &&\n    isSolanaChainId(partialRequest.destChainId) ===\n      !isSolanaChainId(partialRequest.srcChainId)\n  ) {\n    stringFields.push('destWalletAddress');\n    if (!partialRequest.destWalletAddress) {\n      return false;\n    }\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  bridgeQuote,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;\n\n  const totalGasLimitInDec = new BigNumber(\n    trade.gasLimit?.toString() ?? '0',\n  ).plus(approval?.gasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote,\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate) => {\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  return {\n    amount,\n    amountMax,\n    valueInCurrency,\n    valueInCurrencyMax,\n    usd,\n    usdMax,\n  };\n};\n\nexport const calcTotalEstimatedNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrency\n      ? new BigNumber(gasFee.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usd\n      ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrencyMax\n      ? new BigNumber(gasFee.valueInCurrencyMax)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usdMax\n      ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
