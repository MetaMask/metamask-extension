diff --git a/dist/sdk/authentication-jwt-bearer/services.cjs b/dist/sdk/authentication-jwt-bearer/services.cjs
index 86e34ea144fe224898ca7921ab337ac66ce59f04..d8d59f4bb5cca60231542de7eb142e5ae4b068fe 100644
--- a/dist/sdk/authentication-jwt-bearer/services.cjs
+++ b/dist/sdk/authentication-jwt-bearer/services.cjs
@@ -1,6 +1,17 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getUserProfileMetaMetrics = exports.authenticate = exports.authorizeOIDC = exports.getNonce = exports.pairIdentifiers = exports.PROFILE_METAMETRICS_URL = exports.SIWE_LOGIN_URL = exports.SRP_LOGIN_URL = exports.OIDC_TOKEN_URL = exports.PAIR_IDENTIFIERS = exports.NONCE_URL = void 0;
+exports.getUserProfileMetaMetrics =
+  exports.authenticate =
+  exports.authorizeOIDC =
+  exports.getNonce =
+  exports.pairIdentifiers =
+  exports.PROFILE_METAMETRICS_URL =
+  exports.SIWE_LOGIN_URL =
+  exports.SRP_LOGIN_URL =
+  exports.OIDC_TOKEN_URL =
+  exports.PAIR_IDENTIFIERS =
+  exports.NONCE_URL =
+    void 0;
 const types_1 = require("./types.cjs");
 const env_1 = require("../../shared/env.cjs");
 const errors_1 = require("../errors.cjs");
@@ -14,18 +25,18 @@ const SRP_LOGIN_URL = (env) => `${(0, env_1.getEnvUrls)(env).authApiUrl}/api/v2/
 exports.SRP_LOGIN_URL = SRP_LOGIN_URL;
 const SIWE_LOGIN_URL = (env) => `${(0, env_1.getEnvUrls)(env).authApiUrl}/api/v2/siwe/login`;
 exports.SIWE_LOGIN_URL = SIWE_LOGIN_URL;
-const PROFILE_METAMETRICS_URL = (env) => `${(0, env_1.getEnvUrls)(env).authApiUrl}/api/v2/profile/metametrics`;
+const PROFILE_METAMETRICS_URL = (env) => `${(0, env_1.getEnvUrls)(env).authApiUrl}/api/v2/profile/lineage`;
 exports.PROFILE_METAMETRICS_URL = PROFILE_METAMETRICS_URL;
 const getAuthenticationUrl = (authType, env) => {
-    switch (authType) {
-        case types_1.AuthType.SRP:
-            return (0, exports.SRP_LOGIN_URL)(env);
-        case types_1.AuthType.SiWE:
-            return (0, exports.SIWE_LOGIN_URL)(env);
-        /* istanbul ignore next */
-        default:
-            throw new errors_1.ValidationError(`Invalid AuthType: ${authType} - unable to create Auth URL`);
-    }
+  switch (authType) {
+    case types_1.AuthType.SRP:
+      return (0, exports.SRP_LOGIN_URL)(env);
+    case types_1.AuthType.SiWE:
+      return (0, exports.SIWE_LOGIN_URL)(env);
+    /* istanbul ignore next */
+    default:
+      throw new errors_1.ValidationError(`Invalid AuthType: ${authType} - unable to create Auth URL`);
+  }
 };
 /**
  * Pair multiple identifiers under a single profile
@@ -37,29 +48,28 @@ const getAuthenticationUrl = (authType, env) => {
  * @returns void.
  */
 async function pairIdentifiers(nonce, logins, accessToken, env) {
-    const pairUrl = new URL((0, exports.PAIR_IDENTIFIERS)(env));
-    try {
-        const response = await fetch(pairUrl, {
-            method: 'POST',
-            headers: {
-                'Content-Type': 'application/json',
-                Authorization: `Bearer ${accessToken}`,
-            },
-            body: JSON.stringify({
-                nonce,
-                logins,
-            }),
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
-        }
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new errors_1.PairError(`unable to pair identifiers: ${errorMessage}`);
+  const pairUrl = new URL((0, exports.PAIR_IDENTIFIERS)(env));
+  try {
+    const response = await fetch(pairUrl, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json",
+        Authorization: `Bearer ${accessToken}`,
+      },
+      body: JSON.stringify({
+        nonce,
+        logins,
+      }),
+    });
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
     }
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new errors_1.PairError(`unable to pair identifiers: ${errorMessage}`);
+  }
 }
 exports.pairIdentifiers = pairIdentifiers;
 /**
@@ -70,26 +80,25 @@ exports.pairIdentifiers = pairIdentifiers;
  * @returns the nonce.
  */
 async function getNonce(id, env) {
-    const nonceUrl = new URL((0, exports.NONCE_URL)(env));
-    nonceUrl.searchParams.set('identifier', id);
-    try {
-        const nonceResponse = await fetch(nonceUrl.toString());
-        if (!nonceResponse.ok) {
-            const responseBody = (await nonceResponse.json());
-            throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
-        }
-        const nonceJson = await nonceResponse.json();
-        return {
-            nonce: nonceJson.nonce,
-            identifier: nonceJson.identifier,
-            expiresIn: nonceJson.expires_in,
-        };
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new errors_1.NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);
+  const nonceUrl = new URL((0, exports.NONCE_URL)(env));
+  nonceUrl.searchParams.set("identifier", id);
+  try {
+    const nonceResponse = await fetch(nonceUrl.toString());
+    if (!nonceResponse.ok) {
+      const responseBody = await nonceResponse.json();
+      throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
     }
+    const nonceJson = await nonceResponse.json();
+    return {
+      nonce: nonceJson.nonce,
+      identifier: nonceJson.identifier,
+      expiresIn: nonceJson.expires_in,
+    };
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new errors_1.NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);
+  }
 }
 exports.getNonce = getNonce;
 /**
@@ -101,36 +110,35 @@ exports.getNonce = getNonce;
  * @returns Access Token from Authorization server
  */
 async function authorizeOIDC(jwtToken, env, platform) {
-    const grantType = 'urn:ietf:params:oauth:grant-type:jwt-bearer';
-    const headers = new Headers({
-        'Content-Type': 'application/x-www-form-urlencoded',
+  const grantType = "urn:ietf:params:oauth:grant-type:jwt-bearer";
+  const headers = new Headers({
+    "Content-Type": "application/x-www-form-urlencoded",
+  });
+  const urlEncodedBody = new URLSearchParams();
+  urlEncodedBody.append("grant_type", grantType);
+  urlEncodedBody.append("client_id", (0, env_1.getOidcClientId)(env, platform));
+  urlEncodedBody.append("assertion", jwtToken);
+  try {
+    const response = await fetch((0, exports.OIDC_TOKEN_URL)(env), {
+      method: "POST",
+      headers,
+      body: urlEncodedBody.toString(),
     });
-    const urlEncodedBody = new URLSearchParams();
-    urlEncodedBody.append('grant_type', grantType);
-    urlEncodedBody.append('client_id', (0, env_1.getOidcClientId)(env, platform));
-    urlEncodedBody.append('assertion', jwtToken);
-    try {
-        const response = await fetch((0, exports.OIDC_TOKEN_URL)(env), {
-            method: 'POST',
-            headers,
-            body: urlEncodedBody.toString(),
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`);
-        }
-        const accessTokenResponse = await response.json();
-        return {
-            accessToken: accessTokenResponse.access_token,
-            expiresIn: accessTokenResponse.expires_in,
-            obtainedAt: Date.now(),
-        };
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new errors_1.SignInError(`unable to get access token: ${errorMessage}`);
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`);
     }
+    const accessTokenResponse = await response.json();
+    return {
+      accessToken: accessTokenResponse.access_token,
+      expiresIn: accessTokenResponse.expires_in,
+      obtainedAt: Date.now(),
+    };
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new errors_1.SignInError(`unable to get access token: ${errorMessage}`);
+  }
 }
 exports.authorizeOIDC = authorizeOIDC;
 /**
@@ -144,46 +152,45 @@ exports.authorizeOIDC = authorizeOIDC;
  * @returns Authentication Token
  */
 async function authenticate(rawMessage, signature, authType, env, metametrics) {
-    const authenticationUrl = getAuthenticationUrl(authType, env);
-    try {
-        const response = await fetch(authenticationUrl, {
-            method: 'POST',
-            headers: {
-                'Content-Type': 'application/json',
-            },
-            body: JSON.stringify({
-                signature,
-                raw_message: rawMessage,
-                ...(metametrics
-                    ? {
-                        metametrics: {
-                            metametrics_id: await metametrics.getMetaMetricsId(),
-                            agent: metametrics.agent,
-                        },
-                    }
-                    : {}),
-            }),
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`);
-        }
-        const loginResponse = await response.json();
-        return {
-            token: loginResponse.token,
-            expiresIn: loginResponse.expires_in,
-            profile: {
-                identifierId: loginResponse.profile.identifier_id,
-                metaMetricsId: loginResponse.profile.metametrics_id,
-                profileId: loginResponse.profile.profile_id,
-            },
-        };
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new errors_1.SignInError(`unable to perform SRP login: ${errorMessage}`);
+  const authenticationUrl = getAuthenticationUrl(authType, env);
+  try {
+    const response = await fetch(authenticationUrl, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        signature,
+        raw_message: rawMessage,
+        ...(metametrics
+          ? {
+              metametrics: {
+                metametrics_id: await metametrics.getMetaMetricsId(),
+                agent: metametrics.agent,
+              },
+            }
+          : {}),
+      }),
+    });
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`);
     }
+    const loginResponse = await response.json();
+    return {
+      token: loginResponse.token,
+      expiresIn: loginResponse.expires_in,
+      profile: {
+        identifierId: loginResponse.profile.identifier_id,
+        metaMetricsId: loginResponse.profile.metametrics_id,
+        profileId: loginResponse.profile.profile_id,
+      },
+    };
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new errors_1.SignInError(`unable to perform SRP login: ${errorMessage}`);
+  }
 }
 exports.authenticate = authenticate;
 /**
@@ -194,26 +201,25 @@ exports.authenticate = authenticate;
  * @returns Profile MetaMetrics information.
  */
 async function getUserProfileMetaMetrics(env, accessToken) {
-    const profileMetaMetricsUrl = new URL((0, exports.PROFILE_METAMETRICS_URL)(env));
-    try {
-        const response = await fetch(profileMetaMetricsUrl, {
-            method: 'GET',
-            headers: {
-                Authorization: `Bearer ${accessToken}`,
-            },
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
-        }
-        const profileJson = await response.json();
-        return profileJson;
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new errors_1.SignInError(`failed to get profile metametrics: ${errorMessage}`);
+  const profileMetaMetricsUrl = new URL((0, exports.PROFILE_METAMETRICS_URL)(env));
+  try {
+    const response = await fetch(profileMetaMetricsUrl, {
+      method: "GET",
+      headers: {
+        Authorization: `Bearer ${accessToken}`,
+      },
+    });
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
     }
+    const profileJson = await response.json();
+    return profileJson;
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new errors_1.SignInError(`failed to get profile metametrics: ${errorMessage}`);
+  }
 }
 exports.getUserProfileMetaMetrics = getUserProfileMetaMetrics;
 //# sourceMappingURL=services.cjs.map
diff --git a/dist/sdk/authentication-jwt-bearer/services.cjs.map b/dist/sdk/authentication-jwt-bearer/services.cjs.map
index 5ae647b1c3eadfde154d63c39070167c4c23c8d7..9748db82ab133ee610b8dc0b144a8dc3bb9feed2 100644
--- a/dist/sdk/authentication-jwt-bearer/services.cjs.map
+++ b/dist/sdk/authentication-jwt-bearer/services.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"services.cjs","sourceRoot":"","sources":["../../../src/sdk/authentication-jwt-bearer/services.ts"],"names":[],"mappings":";;;AAMA,uCAAmC;AAEnC,8CAA+D;AAE/D,0CAKmB;AAEZ,MAAM,SAAS,GAAG,CAAC,GAAQ,EAAE,EAAE,CACpC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,eAAe,CAAC;AADlC,QAAA,SAAS,aACyB;AAExC,MAAM,gBAAgB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAC3C,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,0BAA0B,CAAC;AAD7C,QAAA,gBAAgB,oBAC6B;AAEnD,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAE,EAAE,CACzC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,eAAe,CAAC;AADlC,QAAA,cAAc,kBACoB;AAExC,MAAM,aAAa,GAAG,CAAC,GAAQ,EAAE,EAAE,CACxC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,mBAAmB,CAAC;AADtC,QAAA,aAAa,iBACyB;AAE5C,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAE,EAAE,CACzC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,oBAAoB,CAAC;AADvC,QAAA,cAAc,kBACyB;AAE7C,MAAM,uBAAuB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAClD,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,6BAA6B,CAAC;AADhD,QAAA,uBAAuB,2BACyB;AAE7D,MAAM,oBAAoB,GAAG,CAAC,QAAkB,EAAE,GAAQ,EAAU,EAAE;IACpE,QAAQ,QAAQ,EAAE;QAChB,KAAK,gBAAQ,CAAC,GAAG;YACf,OAAO,IAAA,qBAAa,EAAC,GAAG,CAAC,CAAC;QAC5B,KAAK,gBAAQ,CAAC,IAAI;YAChB,OAAO,IAAA,sBAAc,EAAC,GAAG,CAAC,CAAC;QAC7B,0BAA0B;QAC1B;YACE,MAAM,IAAI,wBAAe,CACvB,qBAAqB,QAAkB,8BAA8B,CACtE,CAAC;KACL;AACH,CAAC,CAAC;AAeF;;;;;;;;GAQG;AACI,KAAK,UAAU,eAAe,CACnC,KAAa,EACb,MAAqB,EACrB,WAAmB,EACnB,GAAQ;IAER,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,IAAA,wBAAgB,EAAC,GAAG,CAAC,CAAC,CAAC;IAE/C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE;YACpC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,WAAW,EAAE;aACvC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK;gBACL,MAAM;aACP,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,uBAAuB,YAAY,CAAC,OAAO,YAAY,YAAY,CAAC,KAAK,EAAE,CAC5E,CAAC;SACH;KACF;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,kBAAS,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;KACpE;AACH,CAAC;AAjCD,0CAiCC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,QAAQ,CAAC,EAAU,EAAE,GAAQ;IACjD,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAA,iBAAS,EAAC,GAAG,CAAC,CAAC,CAAC;IACzC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IAE5C,IAAI;QACF,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE;YACrB,MAAM,YAAY,GAAG,CAAC,MAAM,aAAa,CAAC,IAAI,EAAE,CAAiB,CAAC;YAClE,MAAM,IAAI,KAAK,CACb,uBAAuB,YAAY,CAAC,OAAO,YAAY,YAAY,CAAC,KAAK,EAAE,CAC5E,CAAC;SACH;QAED,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAC7C,OAAO;YACL,KAAK,EAAE,SAAS,CAAC,KAAK;YACtB,UAAU,EAAE,SAAS,CAAC,UAAU;YAChC,SAAS,EAAE,SAAS,CAAC,UAAU;SAChC,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,4BAAmB,CAAC,6BAA6B,YAAY,EAAE,CAAC,CAAC;KAC5E;AACH,CAAC;AAzBD,4BAyBC;AAED;;;;;;;GAOG;AACI,KAAK,UAAU,aAAa,CACjC,QAAgB,EAChB,GAAQ,EACR,QAAkB;IAElB,MAAM,SAAS,GAAG,6CAA6C,CAAC;IAChE,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;QAC1B,cAAc,EAAE,mCAAmC;KACpD,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,IAAI,eAAe,EAAE,CAAC;IAC7C,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC/C,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,IAAA,qBAAe,EAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnE,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAE7C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAA,sBAAc,EAAC,GAAG,CAAC,EAAE;YAChD,MAAM,EAAE,MAAM;YACd,OAAO;YACP,IAAI,EAAE,cAAc,CAAC,QAAQ,EAAE;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAG1C,CAAC;YACF,MAAM,IAAI,KAAK,CACb,eAAe,YAAY,CAAC,iBAAiB,iBAAiB,YAAY,CAAC,KAAK,EAAE,CACnF,CAAC;SACH;QAED,MAAM,mBAAmB,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClD,OAAO;YACL,WAAW,EAAE,mBAAmB,CAAC,YAAY;YAC7C,SAAS,EAAE,mBAAmB,CAAC,UAAU;YACzC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE;SACvB,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,oBAAW,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;KACtE;AACH,CAAC;AA5CD,sCA4CC;AAOD;;;;;;;;;GASG;AACI,KAAK,UAAU,YAAY,CAChC,UAAkB,EAClB,SAAiB,EACjB,QAAkB,EAClB,GAAQ,EACR,WAA6B;IAE7B,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAE9D,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,iBAAiB,EAAE;YAC9C,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,SAAS;gBACT,WAAW,EAAE,UAAU;gBACvB,GAAG,CAAC,WAAW;oBACb,CAAC,CAAC;wBACE,WAAW,EAAE;4BACX,cAAc,EAAE,MAAM,WAAW,CAAC,gBAAgB,EAAE;4BACpD,KAAK,EAAE,WAAW,CAAC,KAAK;yBACzB;qBACF;oBACH,CAAC,CAAC,EAAE,CAAC;aACR,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,GAAG,QAAQ,sBAAsB,YAAY,CAAC,OAAO,iBAAiB,YAAY,CAAC,KAAK,EAAE,CAC3F,CAAC;SACH;QAED,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC5C,OAAO;YACL,KAAK,EAAE,aAAa,CAAC,KAAK;YAC1B,SAAS,EAAE,aAAa,CAAC,UAAU;YACnC,OAAO,EAAE;gBACP,YAAY,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa;gBACjD,aAAa,EAAE,aAAa,CAAC,OAAO,CAAC,cAAc;gBACnD,SAAS,EAAE,aAAa,CAAC,OAAO,CAAC,UAAU;aAC5C;SACF,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,oBAAW,CAAC,gCAAgC,YAAY,EAAE,CAAC,CAAC;KACvE;AACH,CAAC;AApDD,oCAoDC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,yBAAyB,CAC7C,GAAQ,EACR,WAAmB;IAEnB,MAAM,qBAAqB,GAAG,IAAI,GAAG,CAAC,IAAA,+BAAuB,EAAC,GAAG,CAAC,CAAC,CAAC;IAEpE,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,qBAAqB,EAAE;YAClD,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,WAAW,EAAE;aACvC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,uBAAuB,YAAY,CAAC,OAAO,YAAY,YAAY,CAAC,KAAK,EAAE,CAC5E,CAAC;SACH;QAED,MAAM,WAAW,GAA2B,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAElE,OAAO,WAAW,CAAC;KACpB;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,oBAAW,CAAC,sCAAsC,YAAY,EAAE,CAAC,CAAC;KAC7E;AACH,CAAC;AA9BD,8DA8BC","sourcesContent":["import type {\n  AccessToken,\n  ErrorMessage,\n  UserProfile,\n  UserProfileMetaMetrics,\n} from './types';\nimport { AuthType } from './types';\nimport type { Env, Platform } from '../../shared/env';\nimport { getEnvUrls, getOidcClientId } from '../../shared/env';\nimport type { MetaMetricsAuth } from '../../shared/types/services';\nimport {\n  NonceRetrievalError,\n  PairError,\n  SignInError,\n  ValidationError,\n} from '../errors';\n\nexport const NONCE_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/nonce`;\n\nexport const PAIR_IDENTIFIERS = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/identifiers/pair`;\n\nexport const OIDC_TOKEN_URL = (env: Env) =>\n  `${getEnvUrls(env).oidcApiUrl}/oauth2/token`;\n\nexport const SRP_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/srp/login`;\n\nexport const SIWE_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/siwe/login`;\n\nexport const PROFILE_METAMETRICS_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/profile/metametrics`;\n\nconst getAuthenticationUrl = (authType: AuthType, env: Env): string => {\n  switch (authType) {\n    case AuthType.SRP:\n      return SRP_LOGIN_URL(env);\n    case AuthType.SiWE:\n      return SIWE_LOGIN_URL(env);\n    /* istanbul ignore next */\n    default:\n      throw new ValidationError(\n        `Invalid AuthType: ${authType as number} - unable to create Auth URL`,\n      );\n  }\n};\n\ntype NonceResponse = {\n  nonce: string;\n  identifier: string;\n  expiresIn: number;\n};\n\ntype PairRequest = {\n  signature: string;\n  raw_message: string;\n  encrypted_storage_key: string;\n  identifier_type: 'SIWE' | 'SRP';\n};\n\n/**\n * Pair multiple identifiers under a single profile\n *\n * @param nonce - session nonce\n * @param logins - pairing request payload\n * @param accessToken - JWT access token used to access protected resources\n * @param env - server environment\n * @returns void.\n */\nexport async function pairIdentifiers(\n  nonce: string,\n  logins: PairRequest[],\n  accessToken: string,\n  env: Env,\n): Promise<void> {\n  const pairUrl = new URL(PAIR_IDENTIFIERS(env));\n\n  try {\n    const response = await fetch(pairUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        nonce,\n        logins,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new PairError(`unable to pair identifiers: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Get Nonce for JWT Bearer Flow\n *\n * @param id - identifier ID\n * @param env - server environment\n * @returns the nonce.\n */\nexport async function getNonce(id: string, env: Env): Promise<NonceResponse> {\n  const nonceUrl = new URL(NONCE_URL(env));\n  nonceUrl.searchParams.set('identifier', id);\n\n  try {\n    const nonceResponse = await fetch(nonceUrl.toString());\n    if (!nonceResponse.ok) {\n      const responseBody = (await nonceResponse.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const nonceJson = await nonceResponse.json();\n    return {\n      nonce: nonceJson.nonce,\n      identifier: nonceJson.identifier,\n      expiresIn: nonceJson.expires_in,\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Authorize And perform OIDC Flow to get the Access Token\n *\n * @param jwtToken - The original token received from Authentication. This is traded for the Access Token. (the authentication token is single-use)\n * @param env - server environment\n * @param platform - SDK platform\n * @returns Access Token from Authorization server\n */\nexport async function authorizeOIDC(\n  jwtToken: string,\n  env: Env,\n  platform: Platform,\n): Promise<AccessToken> {\n  const grantType = 'urn:ietf:params:oauth:grant-type:jwt-bearer';\n  const headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  });\n\n  const urlEncodedBody = new URLSearchParams();\n  urlEncodedBody.append('grant_type', grantType);\n  urlEncodedBody.append('client_id', getOidcClientId(env, platform));\n  urlEncodedBody.append('assertion', jwtToken);\n\n  try {\n    const response = await fetch(OIDC_TOKEN_URL(env), {\n      method: 'POST',\n      headers,\n      body: urlEncodedBody.toString(),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as {\n        error_description: string;\n        error: string;\n      };\n      throw new Error(\n        `HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const accessTokenResponse = await response.json();\n    return {\n      accessToken: accessTokenResponse.access_token,\n      expiresIn: accessTokenResponse.expires_in,\n      obtainedAt: Date.now(),\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to get access token: ${errorMessage}`);\n  }\n}\n\ntype Authentication = {\n  token: string;\n  expiresIn: number;\n  profile: UserProfile;\n};\n/**\n * Service to Authenticate/Login a user via SIWE or SRP derived key.\n *\n * @param rawMessage - raw message for validation when authenticating\n * @param signature - signed raw message\n * @param authType - authentication type/flow used\n * @param env - server environment\n * @param metametrics - optional metametrics\n * @returns Authentication Token\n */\nexport async function authenticate(\n  rawMessage: string,\n  signature: string,\n  authType: AuthType,\n  env: Env,\n  metametrics?: MetaMetricsAuth,\n): Promise<Authentication> {\n  const authenticationUrl = getAuthenticationUrl(authType, env);\n\n  try {\n    const response = await fetch(authenticationUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        signature,\n        raw_message: rawMessage,\n        ...(metametrics\n          ? {\n              metametrics: {\n                metametrics_id: await metametrics.getMetaMetricsId(),\n                agent: metametrics.agent,\n              },\n            }\n          : {}),\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const loginResponse = await response.json();\n    return {\n      token: loginResponse.token,\n      expiresIn: loginResponse.expires_in,\n      profile: {\n        identifierId: loginResponse.profile.identifier_id,\n        metaMetricsId: loginResponse.profile.metametrics_id,\n        profileId: loginResponse.profile.profile_id,\n      },\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to perform SRP login: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to get the Profile MetaMetrics\n *\n * @param env - server environment\n * @param accessToken - JWT access token used to access protected resources\n * @returns Profile MetaMetrics information.\n */\nexport async function getUserProfileMetaMetrics(\n  env: Env,\n  accessToken: string,\n): Promise<UserProfileMetaMetrics> {\n  const profileMetaMetricsUrl = new URL(PROFILE_METAMETRICS_URL(env));\n\n  try {\n    const response = await fetch(profileMetaMetricsUrl, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const profileJson: UserProfileMetaMetrics = await response.json();\n\n    return profileJson;\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`failed to get profile metametrics: ${errorMessage}`);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"services.cjs","sourceRoot":"","sources":["../../../src/sdk/authentication-jwt-bearer/services.ts"],"names":[],"mappings":";;;AAMA,uCAAmC;AAEnC,8CAA+D;AAE/D,0CAKmB;AAEZ,MAAM,SAAS,GAAG,CAAC,GAAQ,EAAE,EAAE,CACpC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,eAAe,CAAC;AADlC,QAAA,SAAS,aACyB;AAExC,MAAM,gBAAgB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAC3C,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,0BAA0B,CAAC;AAD7C,QAAA,gBAAgB,oBAC6B;AAEnD,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAE,EAAE,CACzC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,eAAe,CAAC;AADlC,QAAA,cAAc,kBACoB;AAExC,MAAM,aAAa,GAAG,CAAC,GAAQ,EAAE,EAAE,CACxC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,mBAAmB,CAAC;AADtC,QAAA,aAAa,iBACyB;AAE5C,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAE,EAAE,CACzC,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,oBAAoB,CAAC;AADvC,QAAA,cAAc,kBACyB;AAE7C,MAAM,uBAAuB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAClD,GAAG,IAAA,gBAAU,EAAC,GAAG,CAAC,CAAC,UAAU,6BAA6B,CAAC;AADhD,QAAA,uBAAuB,2BACyB;AAE7D,MAAM,oBAAoB,GAAG,CAAC,QAAkB,EAAE,GAAQ,EAAU,EAAE;IACpE,QAAQ,QAAQ,EAAE;QAChB,KAAK,gBAAQ,CAAC,GAAG;YACf,OAAO,IAAA,qBAAa,EAAC,GAAG,CAAC,CAAC;QAC5B,KAAK,gBAAQ,CAAC,IAAI;YAChB,OAAO,IAAA,sBAAc,EAAC,GAAG,CAAC,CAAC;QAC7B,0BAA0B;QAC1B;YACE,MAAM,IAAI,wBAAe,CACvB,qBAAqB,QAAkB,8BAA8B,CACtE,CAAC;KACL;AACH,CAAC,CAAC;AAeF;;;;;;;;GAQG;AACI,KAAK,UAAU,eAAe,CACnC,KAAa,EACb,MAAqB,EACrB,WAAmB,EACnB,GAAQ;IAER,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,IAAA,wBAAgB,EAAC,GAAG,CAAC,CAAC,CAAC;IAE/C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE;YACpC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,WAAW,EAAE;aACvC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK;gBACL,MAAM;aACP,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,uBAAuB,YAAY,CAAC,OAAO,YAAY,YAAY,CAAC,KAAK,EAAE,CAC5E,CAAC;SACH;KACF;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,kBAAS,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;KACpE;AACH,CAAC;AAjCD,0CAiCC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,QAAQ,CAAC,EAAU,EAAE,GAAQ;IACjD,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAA,iBAAS,EAAC,GAAG,CAAC,CAAC,CAAC;IACzC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IAE5C,IAAI;QACF,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE;YACrB,MAAM,YAAY,GAAG,CAAC,MAAM,aAAa,CAAC,IAAI,EAAE,CAAiB,CAAC;YAClE,MAAM,IAAI,KAAK,CACb,uBAAuB,YAAY,CAAC,OAAO,YAAY,YAAY,CAAC,KAAK,EAAE,CAC5E,CAAC;SACH;QAED,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAC7C,OAAO;YACL,KAAK,EAAE,SAAS,CAAC,KAAK;YACtB,UAAU,EAAE,SAAS,CAAC,UAAU;YAChC,SAAS,EAAE,SAAS,CAAC,UAAU;SAChC,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,4BAAmB,CAAC,6BAA6B,YAAY,EAAE,CAAC,CAAC;KAC5E;AACH,CAAC;AAzBD,4BAyBC;AAED;;;;;;;GAOG;AACI,KAAK,UAAU,aAAa,CACjC,QAAgB,EAChB,GAAQ,EACR,QAAkB;IAElB,MAAM,SAAS,GAAG,6CAA6C,CAAC;IAChE,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;QAC1B,cAAc,EAAE,mCAAmC;KACpD,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,IAAI,eAAe,EAAE,CAAC;IAC7C,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC/C,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,IAAA,qBAAe,EAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnE,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAE7C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAA,sBAAc,EAAC,GAAG,CAAC,EAAE;YAChD,MAAM,EAAE,MAAM;YACd,OAAO;YACP,IAAI,EAAE,cAAc,CAAC,QAAQ,EAAE;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAG1C,CAAC;YACF,MAAM,IAAI,KAAK,CACb,eAAe,YAAY,CAAC,iBAAiB,iBAAiB,YAAY,CAAC,KAAK,EAAE,CACnF,CAAC;SACH;QAED,MAAM,mBAAmB,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClD,OAAO;YACL,WAAW,EAAE,mBAAmB,CAAC,YAAY;YAC7C,SAAS,EAAE,mBAAmB,CAAC,UAAU;YACzC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE;SACvB,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,oBAAW,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;KACtE;AACH,CAAC;AA5CD,sCA4CC;AAOD;;;;;;;;;GASG;AACI,KAAK,UAAU,YAAY,CAChC,UAAkB,EAClB,SAAiB,EACjB,QAAkB,EAClB,GAAQ,EACR,WAA6B;IAE7B,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAE9D,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,iBAAiB,EAAE;YAC9C,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,SAAS;gBACT,WAAW,EAAE,UAAU;gBACvB,GAAG,CAAC,WAAW;oBACb,CAAC,CAAC;wBACE,WAAW,EAAE;4BACX,cAAc,EAAE,MAAM,WAAW,CAAC,gBAAgB,EAAE;4BACpD,KAAK,EAAE,WAAW,CAAC,KAAK;yBACzB;qBACF;oBACH,CAAC,CAAC,EAAE,CAAC;aACR,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,GAAG,QAAQ,sBAAsB,YAAY,CAAC,OAAO,iBAAiB,YAAY,CAAC,KAAK,EAAE,CAC3F,CAAC;SACH;QAED,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC5C,OAAO;YACL,KAAK,EAAE,aAAa,CAAC,KAAK;YAC1B,SAAS,EAAE,aAAa,CAAC,UAAU;YACnC,OAAO,EAAE;gBACP,YAAY,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa;gBACjD,aAAa,EAAE,aAAa,CAAC,OAAO,CAAC,cAAc;gBACnD,SAAS,EAAE,aAAa,CAAC,OAAO,CAAC,UAAU;aAC5C;SACF,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,oBAAW,CAAC,gCAAgC,YAAY,EAAE,CAAC,CAAC;KACvE;AACH,CAAC;AApDD,oCAoDC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,yBAAyB,CAC7C,GAAQ,EACR,WAAmB;IAEnB,MAAM,qBAAqB,GAAG,IAAI,GAAG,CAAC,IAAA,+BAAuB,EAAC,GAAG,CAAC,CAAC,CAAC;IAEpE,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,qBAAqB,EAAE;YAClD,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,WAAW,EAAE;aACvC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,uBAAuB,YAAY,CAAC,OAAO,YAAY,YAAY,CAAC,KAAK,EAAE,CAC5E,CAAC;SACH;QAED,MAAM,WAAW,GAA2B,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAElE,OAAO,WAAW,CAAC;KACpB;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,MAAM,YAAY,GAChB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,oBAAW,CAAC,sCAAsC,YAAY,EAAE,CAAC,CAAC;KAC7E;AACH,CAAC;AA9BD,8DA8BC","sourcesContent":["import type {\n  AccessToken,\n  ErrorMessage,\n  UserProfile,\n  UserProfileMetaMetrics,\n} from './types';\nimport { AuthType } from './types';\nimport type { Env, Platform } from '../../shared/env';\nimport { getEnvUrls, getOidcClientId } from '../../shared/env';\nimport type { MetaMetricsAuth } from '../../shared/types/services';\nimport {\n  NonceRetrievalError,\n  PairError,\n  SignInError,\n  ValidationError,\n} from '../errors';\n\nexport const NONCE_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/nonce`;\n\nexport const PAIR_IDENTIFIERS = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/identifiers/pair`;\n\nexport const OIDC_TOKEN_URL = (env: Env) =>\n  `${getEnvUrls(env).oidcApiUrl}/oauth2/token`;\n\nexport const SRP_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/srp/login`;\n\nexport const SIWE_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/siwe/login`;\n\nexport const PROFILE_METAMETRICS_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/profile/lineage`;\n\nconst getAuthenticationUrl = (authType: AuthType, env: Env): string => {\n  switch (authType) {\n    case AuthType.SRP:\n      return SRP_LOGIN_URL(env);\n    case AuthType.SiWE:\n      return SIWE_LOGIN_URL(env);\n    /* istanbul ignore next */\n    default:\n      throw new ValidationError(\n        `Invalid AuthType: ${authType as number} - unable to create Auth URL`,\n      );\n  }\n};\n\ntype NonceResponse = {\n  nonce: string;\n  identifier: string;\n  expiresIn: number;\n};\n\ntype PairRequest = {\n  signature: string;\n  raw_message: string;\n  encrypted_storage_key: string;\n  identifier_type: 'SIWE' | 'SRP';\n};\n\n/**\n * Pair multiple identifiers under a single profile\n *\n * @param nonce - session nonce\n * @param logins - pairing request payload\n * @param accessToken - JWT access token used to access protected resources\n * @param env - server environment\n * @returns void.\n */\nexport async function pairIdentifiers(\n  nonce: string,\n  logins: PairRequest[],\n  accessToken: string,\n  env: Env,\n): Promise<void> {\n  const pairUrl = new URL(PAIR_IDENTIFIERS(env));\n\n  try {\n    const response = await fetch(pairUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        nonce,\n        logins,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new PairError(`unable to pair identifiers: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Get Nonce for JWT Bearer Flow\n *\n * @param id - identifier ID\n * @param env - server environment\n * @returns the nonce.\n */\nexport async function getNonce(id: string, env: Env): Promise<NonceResponse> {\n  const nonceUrl = new URL(NONCE_URL(env));\n  nonceUrl.searchParams.set('identifier', id);\n\n  try {\n    const nonceResponse = await fetch(nonceUrl.toString());\n    if (!nonceResponse.ok) {\n      const responseBody = (await nonceResponse.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const nonceJson = await nonceResponse.json();\n    return {\n      nonce: nonceJson.nonce,\n      identifier: nonceJson.identifier,\n      expiresIn: nonceJson.expires_in,\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Authorize And perform OIDC Flow to get the Access Token\n *\n * @param jwtToken - The original token received from Authentication. This is traded for the Access Token. (the authentication token is single-use)\n * @param env - server environment\n * @param platform - SDK platform\n * @returns Access Token from Authorization server\n */\nexport async function authorizeOIDC(\n  jwtToken: string,\n  env: Env,\n  platform: Platform,\n): Promise<AccessToken> {\n  const grantType = 'urn:ietf:params:oauth:grant-type:jwt-bearer';\n  const headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  });\n\n  const urlEncodedBody = new URLSearchParams();\n  urlEncodedBody.append('grant_type', grantType);\n  urlEncodedBody.append('client_id', getOidcClientId(env, platform));\n  urlEncodedBody.append('assertion', jwtToken);\n\n  try {\n    const response = await fetch(OIDC_TOKEN_URL(env), {\n      method: 'POST',\n      headers,\n      body: urlEncodedBody.toString(),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as {\n        error_description: string;\n        error: string;\n      };\n      throw new Error(\n        `HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const accessTokenResponse = await response.json();\n    return {\n      accessToken: accessTokenResponse.access_token,\n      expiresIn: accessTokenResponse.expires_in,\n      obtainedAt: Date.now(),\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to get access token: ${errorMessage}`);\n  }\n}\n\ntype Authentication = {\n  token: string;\n  expiresIn: number;\n  profile: UserProfile;\n};\n/**\n * Service to Authenticate/Login a user via SIWE or SRP derived key.\n *\n * @param rawMessage - raw message for validation when authenticating\n * @param signature - signed raw message\n * @param authType - authentication type/flow used\n * @param env - server environment\n * @param metametrics - optional metametrics\n * @returns Authentication Token\n */\nexport async function authenticate(\n  rawMessage: string,\n  signature: string,\n  authType: AuthType,\n  env: Env,\n  metametrics?: MetaMetricsAuth,\n): Promise<Authentication> {\n  const authenticationUrl = getAuthenticationUrl(authType, env);\n\n  try {\n    const response = await fetch(authenticationUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        signature,\n        raw_message: rawMessage,\n        ...(metametrics\n          ? {\n              metametrics: {\n                metametrics_id: await metametrics.getMetaMetricsId(),\n                agent: metametrics.agent,\n              },\n            }\n          : {}),\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const loginResponse = await response.json();\n    return {\n      token: loginResponse.token,\n      expiresIn: loginResponse.expires_in,\n      profile: {\n        identifierId: loginResponse.profile.identifier_id,\n        metaMetricsId: loginResponse.profile.metametrics_id,\n        profileId: loginResponse.profile.profile_id,\n      },\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to perform SRP login: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to get the Profile MetaMetrics\n *\n * @param env - server environment\n * @param accessToken - JWT access token used to access protected resources\n * @returns Profile MetaMetrics information.\n */\nexport async function getUserProfileMetaMetrics(\n  env: Env,\n  accessToken: string,\n): Promise<UserProfileMetaMetrics> {\n  const profileMetaMetricsUrl = new URL(PROFILE_METAMETRICS_URL(env));\n\n  try {\n    const response = await fetch(profileMetaMetricsUrl, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const profileJson: UserProfileMetaMetrics = await response.json();\n\n    return profileJson;\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`failed to get profile metametrics: ${errorMessage}`);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/sdk/authentication-jwt-bearer/services.mjs b/dist/sdk/authentication-jwt-bearer/services.mjs
index ee22634bb4d0d4c59fc7f20a8e20d8081c5b30d9..095f1fb1515f01effbb6fa42e0fe4611931ee02c 100644
--- a/dist/sdk/authentication-jwt-bearer/services.mjs
+++ b/dist/sdk/authentication-jwt-bearer/services.mjs
@@ -6,17 +6,17 @@ export const PAIR_IDENTIFIERS = (env) => `${getEnvUrls(env).authApiUrl}/api/v2/i
 export const OIDC_TOKEN_URL = (env) => `${getEnvUrls(env).oidcApiUrl}/oauth2/token`;
 export const SRP_LOGIN_URL = (env) => `${getEnvUrls(env).authApiUrl}/api/v2/srp/login`;
 export const SIWE_LOGIN_URL = (env) => `${getEnvUrls(env).authApiUrl}/api/v2/siwe/login`;
-export const PROFILE_METAMETRICS_URL = (env) => `${getEnvUrls(env).authApiUrl}/api/v2/profile/metametrics`;
+export const PROFILE_METAMETRICS_URL = (env) => `${getEnvUrls(env).authApiUrl}/api/v2/profile/lineage`;
 const getAuthenticationUrl = (authType, env) => {
-    switch (authType) {
-        case AuthType.SRP:
-            return SRP_LOGIN_URL(env);
-        case AuthType.SiWE:
-            return SIWE_LOGIN_URL(env);
-        /* istanbul ignore next */
-        default:
-            throw new ValidationError(`Invalid AuthType: ${authType} - unable to create Auth URL`);
-    }
+  switch (authType) {
+    case AuthType.SRP:
+      return SRP_LOGIN_URL(env);
+    case AuthType.SiWE:
+      return SIWE_LOGIN_URL(env);
+    /* istanbul ignore next */
+    default:
+      throw new ValidationError(`Invalid AuthType: ${authType} - unable to create Auth URL`);
+  }
 };
 /**
  * Pair multiple identifiers under a single profile
@@ -28,29 +28,28 @@ const getAuthenticationUrl = (authType, env) => {
  * @returns void.
  */
 export async function pairIdentifiers(nonce, logins, accessToken, env) {
-    const pairUrl = new URL(PAIR_IDENTIFIERS(env));
-    try {
-        const response = await fetch(pairUrl, {
-            method: 'POST',
-            headers: {
-                'Content-Type': 'application/json',
-                Authorization: `Bearer ${accessToken}`,
-            },
-            body: JSON.stringify({
-                nonce,
-                logins,
-            }),
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
-        }
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new PairError(`unable to pair identifiers: ${errorMessage}`);
+  const pairUrl = new URL(PAIR_IDENTIFIERS(env));
+  try {
+    const response = await fetch(pairUrl, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json",
+        Authorization: `Bearer ${accessToken}`,
+      },
+      body: JSON.stringify({
+        nonce,
+        logins,
+      }),
+    });
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
     }
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new PairError(`unable to pair identifiers: ${errorMessage}`);
+  }
 }
 /**
  * Service to Get Nonce for JWT Bearer Flow
@@ -60,26 +59,25 @@ export async function pairIdentifiers(nonce, logins, accessToken, env) {
  * @returns the nonce.
  */
 export async function getNonce(id, env) {
-    const nonceUrl = new URL(NONCE_URL(env));
-    nonceUrl.searchParams.set('identifier', id);
-    try {
-        const nonceResponse = await fetch(nonceUrl.toString());
-        if (!nonceResponse.ok) {
-            const responseBody = (await nonceResponse.json());
-            throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
-        }
-        const nonceJson = await nonceResponse.json();
-        return {
-            nonce: nonceJson.nonce,
-            identifier: nonceJson.identifier,
-            expiresIn: nonceJson.expires_in,
-        };
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);
+  const nonceUrl = new URL(NONCE_URL(env));
+  nonceUrl.searchParams.set("identifier", id);
+  try {
+    const nonceResponse = await fetch(nonceUrl.toString());
+    if (!nonceResponse.ok) {
+      const responseBody = await nonceResponse.json();
+      throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
     }
+    const nonceJson = await nonceResponse.json();
+    return {
+      nonce: nonceJson.nonce,
+      identifier: nonceJson.identifier,
+      expiresIn: nonceJson.expires_in,
+    };
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);
+  }
 }
 /**
  * Service to Authorize And perform OIDC Flow to get the Access Token
@@ -90,36 +88,35 @@ export async function getNonce(id, env) {
  * @returns Access Token from Authorization server
  */
 export async function authorizeOIDC(jwtToken, env, platform) {
-    const grantType = 'urn:ietf:params:oauth:grant-type:jwt-bearer';
-    const headers = new Headers({
-        'Content-Type': 'application/x-www-form-urlencoded',
+  const grantType = "urn:ietf:params:oauth:grant-type:jwt-bearer";
+  const headers = new Headers({
+    "Content-Type": "application/x-www-form-urlencoded",
+  });
+  const urlEncodedBody = new URLSearchParams();
+  urlEncodedBody.append("grant_type", grantType);
+  urlEncodedBody.append("client_id", getOidcClientId(env, platform));
+  urlEncodedBody.append("assertion", jwtToken);
+  try {
+    const response = await fetch(OIDC_TOKEN_URL(env), {
+      method: "POST",
+      headers,
+      body: urlEncodedBody.toString(),
     });
-    const urlEncodedBody = new URLSearchParams();
-    urlEncodedBody.append('grant_type', grantType);
-    urlEncodedBody.append('client_id', getOidcClientId(env, platform));
-    urlEncodedBody.append('assertion', jwtToken);
-    try {
-        const response = await fetch(OIDC_TOKEN_URL(env), {
-            method: 'POST',
-            headers,
-            body: urlEncodedBody.toString(),
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`);
-        }
-        const accessTokenResponse = await response.json();
-        return {
-            accessToken: accessTokenResponse.access_token,
-            expiresIn: accessTokenResponse.expires_in,
-            obtainedAt: Date.now(),
-        };
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new SignInError(`unable to get access token: ${errorMessage}`);
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`);
     }
+    const accessTokenResponse = await response.json();
+    return {
+      accessToken: accessTokenResponse.access_token,
+      expiresIn: accessTokenResponse.expires_in,
+      obtainedAt: Date.now(),
+    };
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new SignInError(`unable to get access token: ${errorMessage}`);
+  }
 }
 /**
  * Service to Authenticate/Login a user via SIWE or SRP derived key.
@@ -132,46 +129,45 @@ export async function authorizeOIDC(jwtToken, env, platform) {
  * @returns Authentication Token
  */
 export async function authenticate(rawMessage, signature, authType, env, metametrics) {
-    const authenticationUrl = getAuthenticationUrl(authType, env);
-    try {
-        const response = await fetch(authenticationUrl, {
-            method: 'POST',
-            headers: {
-                'Content-Type': 'application/json',
-            },
-            body: JSON.stringify({
-                signature,
-                raw_message: rawMessage,
-                ...(metametrics
-                    ? {
-                        metametrics: {
-                            metametrics_id: await metametrics.getMetaMetricsId(),
-                            agent: metametrics.agent,
-                        },
-                    }
-                    : {}),
-            }),
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`);
-        }
-        const loginResponse = await response.json();
-        return {
-            token: loginResponse.token,
-            expiresIn: loginResponse.expires_in,
-            profile: {
-                identifierId: loginResponse.profile.identifier_id,
-                metaMetricsId: loginResponse.profile.metametrics_id,
-                profileId: loginResponse.profile.profile_id,
-            },
-        };
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new SignInError(`unable to perform SRP login: ${errorMessage}`);
+  const authenticationUrl = getAuthenticationUrl(authType, env);
+  try {
+    const response = await fetch(authenticationUrl, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        signature,
+        raw_message: rawMessage,
+        ...(metametrics
+          ? {
+              metametrics: {
+                metametrics_id: await metametrics.getMetaMetricsId(),
+                agent: metametrics.agent,
+              },
+            }
+          : {}),
+      }),
+    });
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`);
     }
+    const loginResponse = await response.json();
+    return {
+      token: loginResponse.token,
+      expiresIn: loginResponse.expires_in,
+      profile: {
+        identifierId: loginResponse.profile.identifier_id,
+        metaMetricsId: loginResponse.profile.metametrics_id,
+        profileId: loginResponse.profile.profile_id,
+      },
+    };
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new SignInError(`unable to perform SRP login: ${errorMessage}`);
+  }
 }
 /**
  * Service to get the Profile MetaMetrics
@@ -181,25 +177,24 @@ export async function authenticate(rawMessage, signature, authType, env, metamet
  * @returns Profile MetaMetrics information.
  */
 export async function getUserProfileMetaMetrics(env, accessToken) {
-    const profileMetaMetricsUrl = new URL(PROFILE_METAMETRICS_URL(env));
-    try {
-        const response = await fetch(profileMetaMetricsUrl, {
-            method: 'GET',
-            headers: {
-                Authorization: `Bearer ${accessToken}`,
-            },
-        });
-        if (!response.ok) {
-            const responseBody = (await response.json());
-            throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
-        }
-        const profileJson = await response.json();
-        return profileJson;
-    }
-    catch (e) {
-        /* istanbul ignore next */
-        const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? '');
-        throw new SignInError(`failed to get profile metametrics: ${errorMessage}`);
+  const profileMetaMetricsUrl = new URL(PROFILE_METAMETRICS_URL(env));
+  try {
+    const response = await fetch(profileMetaMetricsUrl, {
+      method: "GET",
+      headers: {
+        Authorization: `Bearer ${accessToken}`,
+      },
+    });
+    if (!response.ok) {
+      const responseBody = await response.json();
+      throw new Error(`HTTP error message: ${responseBody.message}, error: ${responseBody.error}`);
     }
+    const profileJson = await response.json();
+    return profileJson;
+  } catch (e) {
+    /* istanbul ignore next */
+    const errorMessage = e instanceof Error ? e.message : JSON.stringify(e ?? "");
+    throw new SignInError(`failed to get profile metametrics: ${errorMessage}`);
+  }
 }
 //# sourceMappingURL=services.mjs.map
diff --git a/dist/sdk/authentication-jwt-bearer/services.mjs.map b/dist/sdk/authentication-jwt-bearer/services.mjs.map
index 2feed135e56b8459f9eddcb700d6809c0c4c301c..6d0e25016980e64a0c89a40ebca4006d77c5d781 100644
--- a/dist/sdk/authentication-jwt-bearer/services.mjs.map
+++ b/dist/sdk/authentication-jwt-bearer/services.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"services.mjs","sourceRoot":"","sources":["../../../src/sdk/authentication-jwt-bearer/services.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccessToken,\n  ErrorMessage,\n  UserProfile,\n  UserProfileMetaMetrics,\n} from './types';\nimport { AuthType } from './types';\nimport type { Env, Platform } from '../../shared/env';\nimport { getEnvUrls, getOidcClientId } from '../../shared/env';\nimport type { MetaMetricsAuth } from '../../shared/types/services';\nimport {\n  NonceRetrievalError,\n  PairError,\n  SignInError,\n  ValidationError,\n} from '../errors';\n\nexport const NONCE_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/nonce`;\n\nexport const PAIR_IDENTIFIERS = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/identifiers/pair`;\n\nexport const OIDC_TOKEN_URL = (env: Env) =>\n  `${getEnvUrls(env).oidcApiUrl}/oauth2/token`;\n\nexport const SRP_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/srp/login`;\n\nexport const SIWE_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/siwe/login`;\n\nexport const PROFILE_METAMETRICS_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/profile/metametrics`;\n\nconst getAuthenticationUrl = (authType: AuthType, env: Env): string => {\n  switch (authType) {\n    case AuthType.SRP:\n      return SRP_LOGIN_URL(env);\n    case AuthType.SiWE:\n      return SIWE_LOGIN_URL(env);\n    /* istanbul ignore next */\n    default:\n      throw new ValidationError(\n        `Invalid AuthType: ${authType as number} - unable to create Auth URL`,\n      );\n  }\n};\n\ntype NonceResponse = {\n  nonce: string;\n  identifier: string;\n  expiresIn: number;\n};\n\ntype PairRequest = {\n  signature: string;\n  raw_message: string;\n  encrypted_storage_key: string;\n  identifier_type: 'SIWE' | 'SRP';\n};\n\n/**\n * Pair multiple identifiers under a single profile\n *\n * @param nonce - session nonce\n * @param logins - pairing request payload\n * @param accessToken - JWT access token used to access protected resources\n * @param env - server environment\n * @returns void.\n */\nexport async function pairIdentifiers(\n  nonce: string,\n  logins: PairRequest[],\n  accessToken: string,\n  env: Env,\n): Promise<void> {\n  const pairUrl = new URL(PAIR_IDENTIFIERS(env));\n\n  try {\n    const response = await fetch(pairUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        nonce,\n        logins,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new PairError(`unable to pair identifiers: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Get Nonce for JWT Bearer Flow\n *\n * @param id - identifier ID\n * @param env - server environment\n * @returns the nonce.\n */\nexport async function getNonce(id: string, env: Env): Promise<NonceResponse> {\n  const nonceUrl = new URL(NONCE_URL(env));\n  nonceUrl.searchParams.set('identifier', id);\n\n  try {\n    const nonceResponse = await fetch(nonceUrl.toString());\n    if (!nonceResponse.ok) {\n      const responseBody = (await nonceResponse.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const nonceJson = await nonceResponse.json();\n    return {\n      nonce: nonceJson.nonce,\n      identifier: nonceJson.identifier,\n      expiresIn: nonceJson.expires_in,\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Authorize And perform OIDC Flow to get the Access Token\n *\n * @param jwtToken - The original token received from Authentication. This is traded for the Access Token. (the authentication token is single-use)\n * @param env - server environment\n * @param platform - SDK platform\n * @returns Access Token from Authorization server\n */\nexport async function authorizeOIDC(\n  jwtToken: string,\n  env: Env,\n  platform: Platform,\n): Promise<AccessToken> {\n  const grantType = 'urn:ietf:params:oauth:grant-type:jwt-bearer';\n  const headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  });\n\n  const urlEncodedBody = new URLSearchParams();\n  urlEncodedBody.append('grant_type', grantType);\n  urlEncodedBody.append('client_id', getOidcClientId(env, platform));\n  urlEncodedBody.append('assertion', jwtToken);\n\n  try {\n    const response = await fetch(OIDC_TOKEN_URL(env), {\n      method: 'POST',\n      headers,\n      body: urlEncodedBody.toString(),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as {\n        error_description: string;\n        error: string;\n      };\n      throw new Error(\n        `HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const accessTokenResponse = await response.json();\n    return {\n      accessToken: accessTokenResponse.access_token,\n      expiresIn: accessTokenResponse.expires_in,\n      obtainedAt: Date.now(),\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to get access token: ${errorMessage}`);\n  }\n}\n\ntype Authentication = {\n  token: string;\n  expiresIn: number;\n  profile: UserProfile;\n};\n/**\n * Service to Authenticate/Login a user via SIWE or SRP derived key.\n *\n * @param rawMessage - raw message for validation when authenticating\n * @param signature - signed raw message\n * @param authType - authentication type/flow used\n * @param env - server environment\n * @param metametrics - optional metametrics\n * @returns Authentication Token\n */\nexport async function authenticate(\n  rawMessage: string,\n  signature: string,\n  authType: AuthType,\n  env: Env,\n  metametrics?: MetaMetricsAuth,\n): Promise<Authentication> {\n  const authenticationUrl = getAuthenticationUrl(authType, env);\n\n  try {\n    const response = await fetch(authenticationUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        signature,\n        raw_message: rawMessage,\n        ...(metametrics\n          ? {\n              metametrics: {\n                metametrics_id: await metametrics.getMetaMetricsId(),\n                agent: metametrics.agent,\n              },\n            }\n          : {}),\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const loginResponse = await response.json();\n    return {\n      token: loginResponse.token,\n      expiresIn: loginResponse.expires_in,\n      profile: {\n        identifierId: loginResponse.profile.identifier_id,\n        metaMetricsId: loginResponse.profile.metametrics_id,\n        profileId: loginResponse.profile.profile_id,\n      },\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to perform SRP login: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to get the Profile MetaMetrics\n *\n * @param env - server environment\n * @param accessToken - JWT access token used to access protected resources\n * @returns Profile MetaMetrics information.\n */\nexport async function getUserProfileMetaMetrics(\n  env: Env,\n  accessToken: string,\n): Promise<UserProfileMetaMetrics> {\n  const profileMetaMetricsUrl = new URL(PROFILE_METAMETRICS_URL(env));\n\n  try {\n    const response = await fetch(profileMetaMetricsUrl, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const profileJson: UserProfileMetaMetrics = await response.json();\n\n    return profileJson;\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`failed to get profile metametrics: ${errorMessage}`);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"services.mjs","sourceRoot":"","sources":["../../../src/sdk/authentication-jwt-bearer/services.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccessToken,\n  ErrorMessage,\n  UserProfile,\n  UserProfileMetaMetrics,\n} from './types';\nimport { AuthType } from './types';\nimport type { Env, Platform } from '../../shared/env';\nimport { getEnvUrls, getOidcClientId } from '../../shared/env';\nimport type { MetaMetricsAuth } from '../../shared/types/services';\nimport {\n  NonceRetrievalError,\n  PairError,\n  SignInError,\n  ValidationError,\n} from '../errors';\n\nexport const NONCE_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/nonce`;\n\nexport const PAIR_IDENTIFIERS = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/identifiers/pair`;\n\nexport const OIDC_TOKEN_URL = (env: Env) =>\n  `${getEnvUrls(env).oidcApiUrl}/oauth2/token`;\n\nexport const SRP_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/srp/login`;\n\nexport const SIWE_LOGIN_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/siwe/login`;\n\nexport const PROFILE_METAMETRICS_URL = (env: Env) =>\n  `${getEnvUrls(env).authApiUrl}/api/v2/profile/lineage`;\n\nconst getAuthenticationUrl = (authType: AuthType, env: Env): string => {\n  switch (authType) {\n    case AuthType.SRP:\n      return SRP_LOGIN_URL(env);\n    case AuthType.SiWE:\n      return SIWE_LOGIN_URL(env);\n    /* istanbul ignore next */\n    default:\n      throw new ValidationError(\n        `Invalid AuthType: ${authType as number} - unable to create Auth URL`,\n      );\n  }\n};\n\ntype NonceResponse = {\n  nonce: string;\n  identifier: string;\n  expiresIn: number;\n};\n\ntype PairRequest = {\n  signature: string;\n  raw_message: string;\n  encrypted_storage_key: string;\n  identifier_type: 'SIWE' | 'SRP';\n};\n\n/**\n * Pair multiple identifiers under a single profile\n *\n * @param nonce - session nonce\n * @param logins - pairing request payload\n * @param accessToken - JWT access token used to access protected resources\n * @param env - server environment\n * @returns void.\n */\nexport async function pairIdentifiers(\n  nonce: string,\n  logins: PairRequest[],\n  accessToken: string,\n  env: Env,\n): Promise<void> {\n  const pairUrl = new URL(PAIR_IDENTIFIERS(env));\n\n  try {\n    const response = await fetch(pairUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        nonce,\n        logins,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new PairError(`unable to pair identifiers: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Get Nonce for JWT Bearer Flow\n *\n * @param id - identifier ID\n * @param env - server environment\n * @returns the nonce.\n */\nexport async function getNonce(id: string, env: Env): Promise<NonceResponse> {\n  const nonceUrl = new URL(NONCE_URL(env));\n  nonceUrl.searchParams.set('identifier', id);\n\n  try {\n    const nonceResponse = await fetch(nonceUrl.toString());\n    if (!nonceResponse.ok) {\n      const responseBody = (await nonceResponse.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const nonceJson = await nonceResponse.json();\n    return {\n      nonce: nonceJson.nonce,\n      identifier: nonceJson.identifier,\n      expiresIn: nonceJson.expires_in,\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new NonceRetrievalError(`failed to generate nonce: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to Authorize And perform OIDC Flow to get the Access Token\n *\n * @param jwtToken - The original token received from Authentication. This is traded for the Access Token. (the authentication token is single-use)\n * @param env - server environment\n * @param platform - SDK platform\n * @returns Access Token from Authorization server\n */\nexport async function authorizeOIDC(\n  jwtToken: string,\n  env: Env,\n  platform: Platform,\n): Promise<AccessToken> {\n  const grantType = 'urn:ietf:params:oauth:grant-type:jwt-bearer';\n  const headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  });\n\n  const urlEncodedBody = new URLSearchParams();\n  urlEncodedBody.append('grant_type', grantType);\n  urlEncodedBody.append('client_id', getOidcClientId(env, platform));\n  urlEncodedBody.append('assertion', jwtToken);\n\n  try {\n    const response = await fetch(OIDC_TOKEN_URL(env), {\n      method: 'POST',\n      headers,\n      body: urlEncodedBody.toString(),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as {\n        error_description: string;\n        error: string;\n      };\n      throw new Error(\n        `HTTP error: ${responseBody.error_description}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const accessTokenResponse = await response.json();\n    return {\n      accessToken: accessTokenResponse.access_token,\n      expiresIn: accessTokenResponse.expires_in,\n      obtainedAt: Date.now(),\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to get access token: ${errorMessage}`);\n  }\n}\n\ntype Authentication = {\n  token: string;\n  expiresIn: number;\n  profile: UserProfile;\n};\n/**\n * Service to Authenticate/Login a user via SIWE or SRP derived key.\n *\n * @param rawMessage - raw message for validation when authenticating\n * @param signature - signed raw message\n * @param authType - authentication type/flow used\n * @param env - server environment\n * @param metametrics - optional metametrics\n * @returns Authentication Token\n */\nexport async function authenticate(\n  rawMessage: string,\n  signature: string,\n  authType: AuthType,\n  env: Env,\n  metametrics?: MetaMetricsAuth,\n): Promise<Authentication> {\n  const authenticationUrl = getAuthenticationUrl(authType, env);\n\n  try {\n    const response = await fetch(authenticationUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        signature,\n        raw_message: rawMessage,\n        ...(metametrics\n          ? {\n              metametrics: {\n                metametrics_id: await metametrics.getMetaMetricsId(),\n                agent: metametrics.agent,\n              },\n            }\n          : {}),\n      }),\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `${authType} login HTTP error: ${responseBody.message}, error code: ${responseBody.error}`,\n      );\n    }\n\n    const loginResponse = await response.json();\n    return {\n      token: loginResponse.token,\n      expiresIn: loginResponse.expires_in,\n      profile: {\n        identifierId: loginResponse.profile.identifier_id,\n        metaMetricsId: loginResponse.profile.metametrics_id,\n        profileId: loginResponse.profile.profile_id,\n      },\n    };\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`unable to perform SRP login: ${errorMessage}`);\n  }\n}\n\n/**\n * Service to get the Profile MetaMetrics\n *\n * @param env - server environment\n * @param accessToken - JWT access token used to access protected resources\n * @returns Profile MetaMetrics information.\n */\nexport async function getUserProfileMetaMetrics(\n  env: Env,\n  accessToken: string,\n): Promise<UserProfileMetaMetrics> {\n  const profileMetaMetricsUrl = new URL(PROFILE_METAMETRICS_URL(env));\n\n  try {\n    const response = await fetch(profileMetaMetricsUrl, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      const responseBody = (await response.json()) as ErrorMessage;\n      throw new Error(\n        `HTTP error message: ${responseBody.message}, error: ${responseBody.error}`,\n      );\n    }\n\n    const profileJson: UserProfileMetaMetrics = await response.json();\n\n    return profileJson;\n  } catch (e) {\n    /* istanbul ignore next */\n    const errorMessage =\n      e instanceof Error ? e.message : JSON.stringify(e ?? '');\n    throw new SignInError(`failed to get profile metametrics: ${errorMessage}`);\n  }\n}\n"]}
\ No newline at end of file
