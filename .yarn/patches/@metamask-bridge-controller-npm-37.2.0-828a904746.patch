diff --git a/dist/bridge-controller.cjs b/dist/bridge-controller.cjs
index 09e7c76ba2fdf13084ba7ffbf8366794ee9a4317..40a8e5772b50aa6378be5afa4404ed584753e42f 100644
--- a/dist/bridge-controller.cjs
+++ b/dist/bridge-controller.cjs
@@ -33,7 +33,6 @@ const constants_1 = require("./utils/metrics/constants.cjs");
 const properties_1 = require("./utils/metrics/properties.cjs");
 const quote_1 = require("./utils/quote.cjs");
 const snaps_1 = require("./utils/snaps.cjs");
-const validators_1 = require("./utils/validators.cjs");
 const metadata = {
     quoteRequest: {
         persist: false,
@@ -156,37 +155,6 @@ class BridgeController extends (0, polling_controller_1.StaticIntervalPollingCon
                 });
             }
         };
-        /**
-         * Fetches quotes for specified request without updating the controller state
-         * This method does not start polling for quotes and does not emit UnifiedSwapBridge events
-         *
-         * @param quoteRequest - The parameters for quote requests to fetch
-         * @param abortSignal - The abort signal to cancel all the requests
-         * @param featureId - The feature ID that maps to quoteParam overrides from LD
-         * @returns A list of validated quotes
-         */
-        this.fetchQuotes = async (quoteRequest, abortSignal = null, featureId = null) => {
-            const bridgeFeatureFlags = (0, feature_flags_1.getBridgeFeatureFlags)(this.messagingSystem);
-            // If featureId is specified, retrieve the quoteRequestOverrides for that featureId
-            const quoteRequestOverrides = featureId
-                ? bridgeFeatureFlags.quoteRequestOverrides?.[featureId]
-                : undefined;
-            // If quoteRequestOverrides is specified, merge it with the quoteRequest
-            const baseQuotes = await (0, fetch_1.fetchBridgeQuotes)(quoteRequestOverrides
-                ? { ...quoteRequest, ...quoteRequestOverrides }
-                : quoteRequest, abortSignal, __classPrivateFieldGet(this, _BridgeController_clientId, "f"), __classPrivateFieldGet(this, _BridgeController_fetchFn, "f"), __classPrivateFieldGet(this, _BridgeController_config, "f").customBridgeApiBaseUrl ?? bridge_1.BRIDGE_PROD_API_BASE_URL);
-            const quotesWithL1GasFees = await __classPrivateFieldGet(this, _BridgeController_appendL1GasFees, "f").call(this, baseQuotes);
-            const quotesWithSolanaFees = await __classPrivateFieldGet(this, _BridgeController_appendSolanaFees, "f").call(this, baseQuotes);
-            const quotesWithFees = quotesWithL1GasFees ?? quotesWithSolanaFees ?? baseQuotes;
-            // Sort perps quotes by increasing estimated processing time (fastest first)
-            if (featureId === validators_1.FeatureId.PERPS) {
-                return quotesWithFees.sort((a, b) => {
-                    return (a.estimatedProcessingTimeInSeconds -
-                        b.estimatedProcessingTimeInSeconds);
-                });
-            }
-            return quotesWithFees;
-        };
         _BridgeController_getExchangeRateSources.set(this, () => {
             return {
                 ...this.messagingSystem.call('MultichainAssetsRatesController:getState'),
@@ -295,6 +263,23 @@ class BridgeController extends (0, polling_controller_1.StaticIntervalPollingCon
                 state.quoteRequest = updatedQuoteRequest;
                 state.quoteFetchError = bridge_1.DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;
             });
+            const fetchQuotes = async () => {
+                // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond
+                // eslint-disable-next-line @typescript-eslint/no-floating-promises
+                __classPrivateFieldGet(this, _BridgeController_setMinimumBalanceForRentExemptionInLamports, "f").call(this, updatedQuoteRequest.srcChainId);
+                const quotes = await (0, fetch_1.fetchBridgeQuotes)(updatedQuoteRequest, 
+                // AbortController is always defined by this line, because we assign it a few lines above,
+                // not sure why Jest thinks it's not
+                // Linters accurately say that it's defined
+                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+                __classPrivateFieldGet(this, _BridgeController_abortController, "f").signal, __classPrivateFieldGet(this, _BridgeController_clientId, "f"), __classPrivateFieldGet(this, _BridgeController_fetchFn, "f"), __classPrivateFieldGet(this, _BridgeController_config, "f").customBridgeApiBaseUrl ?? bridge_1.BRIDGE_PROD_API_BASE_URL);
+                const quotesWithL1GasFees = await __classPrivateFieldGet(this, _BridgeController_appendL1GasFees, "f").call(this, quotes);
+                const quotesWithSolanaFees = await __classPrivateFieldGet(this, _BridgeController_appendSolanaFees, "f").call(this, quotes);
+                this.update((state) => {
+                    state.quotes = quotesWithL1GasFees ?? quotesWithSolanaFees ?? quotes;
+                    state.quotesLoadingStatus = types_1.RequestStatus.FETCHED;
+                });
+            };
             try {
                 await __classPrivateFieldGet(this, _BridgeController_trace, "f").call(this, {
                     name: (0, bridge_2.isCrossChain)(updatedQuoteRequest.srcChainId, updatedQuoteRequest.destChainId)
@@ -304,21 +289,7 @@ class BridgeController extends (0, polling_controller_1.StaticIntervalPollingCon
                         srcChainId: (0, caip_formatters_1.formatChainIdToCaip)(updatedQuoteRequest.srcChainId),
                         destChainId: (0, caip_formatters_1.formatChainIdToCaip)(updatedQuoteRequest.destChainId),
                     },
-                }, async () => {
-                    // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond
-                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
-                    __classPrivateFieldGet(this, _BridgeController_setMinimumBalanceForRentExemptionInLamports, "f").call(this, updatedQuoteRequest.srcChainId);
-                    const quotes = await this.fetchQuotes(updatedQuoteRequest, 
-                    // AbortController is always defined by this line, because we assign it a few lines above,
-                    // not sure why Jest thinks it's not
-                    // Linters accurately say that it's defined
-                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-                    __classPrivateFieldGet(this, _BridgeController_abortController, "f").signal);
-                    this.update((state) => {
-                        state.quotes = quotes;
-                        state.quotesLoadingStatus = types_1.RequestStatus.FETCHED;
-                    });
-                });
+                }, fetchQuotes);
             }
             catch (error) {
                 const isAbortError = error.name === 'AbortError';
@@ -608,7 +579,6 @@ class BridgeController extends (0, polling_controller_1.StaticIntervalPollingCon
         this.messagingSystem.registerActionHandler(`${bridge_1.BRIDGE_CONTROLLER_NAME}:getBridgeERC20Allowance`, this.getBridgeERC20Allowance.bind(this));
         this.messagingSystem.registerActionHandler(`${bridge_1.BRIDGE_CONTROLLER_NAME}:trackUnifiedSwapBridgeEvent`, this.trackUnifiedSwapBridgeEvent.bind(this));
         this.messagingSystem.registerActionHandler(`${bridge_1.BRIDGE_CONTROLLER_NAME}:stopPollingForQuotes`, this.stopPollingForQuotes.bind(this));
-        this.messagingSystem.registerActionHandler(`${bridge_1.BRIDGE_CONTROLLER_NAME}:fetchQuotes`, this.fetchQuotes.bind(this));
     }
 }
 exports.BridgeController = BridgeController;
diff --git a/dist/bridge-controller.cjs.map b/dist/bridge-controller.cjs.map
index d1b2bf56449eb89e529bf10f7e79532d1d4e5911..419cf9658ad0b8044aa135756508032312bee681 100644
--- a/dist/bridge-controller.cjs.map
+++ b/dist/bridge-controller.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"bridge-controller.cjs","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { StateMetadata } from '@metamask/base-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { TransactionController } from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  type BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_PROD_API_BASE_URL,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  REFRESH_INTERVAL_MS,\n} from './constants/bridge';\nimport { CHAIN_IDS } from './constants/chains';\nimport { TraceName } from './constants/traces';\nimport { selectIsAssetExchangeRateInState } from './selectors';\nimport type { QuoteRequest } from './types';\nimport {\n  type L1GasFees,\n  type GenericQuoteRequest,\n  type SolanaFees,\n  type QuoteResponse,\n  type TxData,\n  type BridgeControllerState,\n  type BridgeControllerMessenger,\n  type FetchFunction,\n  RequestStatus,\n} from './types';\nimport { getAssetIdsForToken, toExchangeRates } from './utils/assets';\nimport { hasSufficientBalance } from './utils/balance';\nimport {\n  getDefaultBridgeControllerState,\n  isCrossChain,\n  isSolanaChainId,\n  sumHexes,\n} from './utils/bridge';\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { getBridgeFeatureFlags } from './utils/feature-flags';\nimport { fetchAssetPrices, fetchBridgeQuotes } from './utils/fetch';\nimport { UnifiedSwapBridgeEventName } from './utils/metrics/constants';\nimport {\n  formatProviderLabel,\n  getActionTypeFromQuoteRequest,\n  getRequestParams,\n  getSwapTypeFromQuote,\n  isCustomSlippage,\n  isHardwareWallet,\n  toInputChangedPropertyKey,\n  toInputChangedPropertyValue,\n} from './utils/metrics/properties';\nimport type {\n  QuoteFetchData,\n  RequestMetadata,\n  RequestParams,\n  RequiredEventContextFromClient,\n} from './utils/metrics/types';\nimport { type CrossChainSwapsEventProperties } from './utils/metrics/types';\nimport { isValidQuoteRequest } from './utils/quote';\nimport {\n  getFeeForTransactionRequest,\n  getMinimumBalanceForRentExemptionRequest,\n} from './utils/snaps';\nimport { FeatureId } from './utils/validators';\n\nconst metadata: StateMetadata<BridgeControllerState> = {\n  quoteRequest: {\n    persist: false,\n    anonymous: false,\n  },\n  quotes: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesInitialLoadTime: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLastFetched: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLoadingStatus: {\n    persist: false,\n    anonymous: false,\n  },\n  quoteFetchError: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesRefreshCount: {\n    persist: false,\n    anonymous: false,\n  },\n  assetExchangeRates: {\n    persist: false,\n    anonymous: false,\n  },\n  minimumBalanceForRentExemptionInLamports: {\n    persist: false,\n    anonymous: false,\n  },\n};\n\nconst RESET_STATE_ABORT_MESSAGE = 'Reset controller state';\n\n/**\n * The input to start polling for the {@link BridgeController}\n *\n * @param networkClientId - The network client ID of the selected network\n * @param updatedQuoteRequest - The updated quote request\n * @param context - The context contains properties that can't be populated by the\n * controller and need to be provided by the client for analytics\n */\ntype BridgePollingInput = {\n  networkClientId: NetworkClientId;\n  updatedQuoteRequest: GenericQuoteRequest;\n  context: Pick<\n    RequiredEventContextFromClient,\n    UnifiedSwapBridgeEventName.QuoteError\n  >[UnifiedSwapBridgeEventName.QuoteError] &\n    Pick<\n      RequiredEventContextFromClient,\n      UnifiedSwapBridgeEventName.QuotesRequested\n    >[UnifiedSwapBridgeEventName.QuotesRequested];\n};\n\nexport class BridgeController extends StaticIntervalPollingController<BridgePollingInput>()<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState,\n  BridgeControllerMessenger\n> {\n  #abortController: AbortController | undefined;\n\n  #quotesFirstFetched: number | undefined;\n\n  readonly #clientId: string;\n\n  readonly #getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #trackMetaMetricsFn: <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    properties: CrossChainSwapsEventProperties<T>,\n  ) => void;\n\n  readonly #trace: TraceCallback;\n\n  readonly #config: {\n    customBridgeApiBaseUrl?: string;\n  };\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    getLayer1GasFee,\n    fetchFn,\n    config,\n    trackMetaMetricsFn,\n    traceFn,\n  }: {\n    messenger: BridgeControllerMessenger;\n    state?: Partial<BridgeControllerState>;\n    clientId: BridgeClientId;\n    getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n    fetchFn: FetchFunction;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    trackMetaMetricsFn: <\n      T extends\n        (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n    >(\n      eventName: T,\n      properties: CrossChainSwapsEventProperties<T>,\n    ) => void;\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultBridgeControllerState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.#abortController = new AbortController();\n    this.#getLayer1GasFee = getLayer1GasFee;\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#trackMetaMetricsFn = trackMetaMetricsFn;\n    this.#config = config ?? {};\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:setChainIntervalLength`,\n      this.setChainIntervalLength.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:updateBridgeQuoteRequestParams`,\n      this.updateBridgeQuoteRequestParams.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:getBridgeERC20Allowance`,\n      this.getBridgeERC20Allowance.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:trackUnifiedSwapBridgeEvent`,\n      this.trackUnifiedSwapBridgeEvent.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:stopPollingForQuotes`,\n      this.stopPollingForQuotes.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:fetchQuotes`,\n      this.fetchQuotes.bind(this),\n    );\n  }\n\n  _executePoll = async (pollingInput: BridgePollingInput) => {\n    await this.#fetchBridgeQuotes(pollingInput);\n  };\n\n  updateBridgeQuoteRequestParams = async (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n    context: BridgePollingInput['context'],\n  ) => {\n    this.stopAllPolling();\n    this.#abortController?.abort('Quote request updated');\n\n    this.#trackInputChangedEvents(paramsToUpdate);\n\n    const updatedQuoteRequest = {\n      ...DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest,\n      ...paramsToUpdate,\n    };\n\n    this.update((state) => {\n      state.quoteRequest = updatedQuoteRequest;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      // Reset required minimum balance if the source chain is not Solana\n      if (\n        updatedQuoteRequest.srcChainId &&\n        !isSolanaChainId(updatedQuoteRequest.srcChainId)\n      ) {\n        state.minimumBalanceForRentExemptionInLamports =\n          DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n      }\n    });\n\n    await this.#fetchAssetExchangeRates(updatedQuoteRequest).catch((error) =>\n      console.warn('Failed to fetch asset exchange rates', error),\n    );\n\n    if (isValidQuoteRequest(updatedQuoteRequest)) {\n      this.#quotesFirstFetched = Date.now();\n      const providerConfig = this.#getSelectedNetworkClient()?.configuration;\n\n      let insufficientBal: boolean | undefined;\n      if (isSolanaChainId(updatedQuoteRequest.srcChainId)) {\n        // If the source chain is not an EVM network, use value from params\n        insufficientBal = paramsToUpdate.insufficientBal;\n      } else if (providerConfig?.rpcUrl?.includes('tenderly')) {\n        // If the rpcUrl is a tenderly fork (e2e tests), set insufficientBal=true\n        // The bridge-api filters out quotes if the balance on mainnet is insufficient so this override allows quotes to always be returned\n        insufficientBal = true;\n      } else {\n        // Otherwise query the src token balance from the RPC provider\n        insufficientBal =\n          paramsToUpdate.insufficientBal ??\n          !(await this.#hasSufficientBalance(updatedQuoteRequest));\n      }\n\n      const networkClientId = this.#getSelectedNetworkClientId();\n      // Set refresh rate based on the source chain before starting polling\n      this.setChainIntervalLength();\n      this.startPolling({\n        networkClientId,\n        updatedQuoteRequest: {\n          ...updatedQuoteRequest,\n          insufficientBal,\n        },\n        context,\n      });\n    }\n  };\n\n  /**\n   * Fetches quotes for specified request without updating the controller state\n   * This method does not start polling for quotes and does not emit UnifiedSwapBridge events\n   *\n   * @param quoteRequest - The parameters for quote requests to fetch\n   * @param abortSignal - The abort signal to cancel all the requests\n   * @param featureId - The feature ID that maps to quoteParam overrides from LD\n   * @returns A list of validated quotes\n   */\n  fetchQuotes = async (\n    quoteRequest: GenericQuoteRequest,\n    abortSignal: AbortSignal | null = null,\n    featureId: FeatureId | null = null,\n  ): Promise<QuoteResponse[]> => {\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n    // If featureId is specified, retrieve the quoteRequestOverrides for that featureId\n    const quoteRequestOverrides = featureId\n      ? bridgeFeatureFlags.quoteRequestOverrides?.[featureId]\n      : undefined;\n\n    // If quoteRequestOverrides is specified, merge it with the quoteRequest\n    const baseQuotes = await fetchBridgeQuotes(\n      quoteRequestOverrides\n        ? { ...quoteRequest, ...quoteRequestOverrides }\n        : quoteRequest,\n      abortSignal,\n      this.#clientId,\n      this.#fetchFn,\n      this.#config.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n    );\n    const quotesWithL1GasFees = await this.#appendL1GasFees(baseQuotes);\n    const quotesWithSolanaFees = await this.#appendSolanaFees(baseQuotes);\n    const quotesWithFees =\n      quotesWithL1GasFees ?? quotesWithSolanaFees ?? baseQuotes;\n    // Sort perps quotes by increasing estimated processing time (fastest first)\n    if (featureId === FeatureId.PERPS) {\n      return quotesWithFees.sort((a, b) => {\n        return (\n          a.estimatedProcessingTimeInSeconds -\n          b.estimatedProcessingTimeInSeconds\n        );\n      });\n    }\n    return quotesWithFees;\n  };\n\n  readonly #getExchangeRateSources = () => {\n    return {\n      ...this.messagingSystem.call('MultichainAssetsRatesController:getState'),\n      ...this.messagingSystem.call('CurrencyRateController:getState'),\n      ...this.messagingSystem.call('TokenRatesController:getState'),\n      ...this.state,\n    };\n  };\n\n  /**\n   * Fetches the exchange rates for the assets in the quote request if they are not already in the state\n   * In addition to the selected tokens, this also fetches the native asset for the source and destination chains\n   *\n   * @param quoteRequest - The quote request\n   * @param quoteRequest.srcChainId - The source chain ID\n   * @param quoteRequest.srcTokenAddress - The source token address\n   * @param quoteRequest.destChainId - The destination chain ID\n   * @param quoteRequest.destTokenAddress - The destination token address\n   */\n  readonly #fetchAssetExchangeRates = async ({\n    srcChainId,\n    srcTokenAddress,\n    destChainId,\n    destTokenAddress,\n  }: Partial<GenericQuoteRequest>) => {\n    const assetIds: Set<CaipAssetType> = new Set([]);\n    const exchangeRateSources = this.#getExchangeRateSources();\n    if (\n      srcTokenAddress &&\n      srcChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        srcChainId,\n        srcTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(srcTokenAddress, srcChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n    if (\n      destTokenAddress &&\n      destChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        destChainId,\n        destTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(destTokenAddress, destChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n\n    const currency = this.messagingSystem.call(\n      'CurrencyRateController:getState',\n    ).currentCurrency;\n\n    if (assetIds.size === 0) {\n      return;\n    }\n\n    const pricesByAssetId = await fetchAssetPrices({\n      assetIds,\n      currencies: new Set([currency]),\n      clientId: this.#clientId,\n      fetchFn: this.#fetchFn,\n    });\n    const exchangeRates = toExchangeRates(currency, pricesByAssetId);\n    this.update((state) => {\n      state.assetExchangeRates = {\n        ...state.assetExchangeRates,\n        ...exchangeRates,\n      };\n    });\n  };\n\n  readonly #hasSufficientBalance = async (\n    quoteRequest: GenericQuoteRequest,\n  ) => {\n    const walletAddress = this.#getMultichainSelectedAccount()?.address;\n    const srcChainIdInHex = formatChainIdToHex(quoteRequest.srcChainId);\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    const normalizedSrcTokenAddress = formatAddressToCaipReference(\n      quoteRequest.srcTokenAddress,\n    );\n\n    return (\n      provider &&\n      walletAddress &&\n      normalizedSrcTokenAddress &&\n      quoteRequest.srcTokenAmount &&\n      srcChainIdInHex &&\n      (await hasSufficientBalance(\n        provider,\n        walletAddress,\n        normalizedSrcTokenAddress,\n        quoteRequest.srcTokenAmount,\n        srcChainIdInHex,\n      ))\n    );\n  };\n\n  stopPollingForQuotes = (reason?: string) => {\n    this.stopAllPolling();\n    this.#abortController?.abort(reason);\n  };\n\n  resetState = () => {\n    this.stopPollingForQuotes(RESET_STATE_ABORT_MESSAGE);\n\n    this.update((state) => {\n      // Cannot do direct assignment to state, i.e. state = {... }, need to manually assign each field\n      state.quoteRequest = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.assetExchangeRates =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.assetExchangeRates;\n      state.minimumBalanceForRentExemptionInLamports =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n    });\n  };\n\n  /**\n   * Sets the interval length based on the source chain\n   */\n  setChainIntervalLength = () => {\n    const { state } = this;\n    const { srcChainId } = state.quoteRequest;\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n\n    const refreshRateOverride = srcChainId\n      ? bridgeFeatureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : undefined;\n    const defaultRefreshRate = bridgeFeatureFlags.refreshRate;\n    this.setIntervalLength(refreshRateOverride ?? defaultRefreshRate);\n  };\n\n  readonly #fetchBridgeQuotes = async ({\n    networkClientId: _networkClientId,\n    updatedQuoteRequest,\n    context,\n  }: BridgePollingInput) => {\n    this.#abortController?.abort('New quote request');\n    this.#abortController = new AbortController();\n\n    this.trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.QuotesRequested,\n      context,\n    );\n    this.update((state) => {\n      state.quotesLoadingStatus = RequestStatus.LOADING;\n      state.quoteRequest = updatedQuoteRequest;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n    });\n\n    try {\n      await this.#trace(\n        {\n          name: isCrossChain(\n            updatedQuoteRequest.srcChainId,\n            updatedQuoteRequest.destChainId,\n          )\n            ? TraceName.BridgeQuotesFetched\n            : TraceName.SwapQuotesFetched,\n          data: {\n            srcChainId: formatChainIdToCaip(updatedQuoteRequest.srcChainId),\n            destChainId: formatChainIdToCaip(updatedQuoteRequest.destChainId),\n          },\n        },\n        async () => {\n          // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#setMinimumBalanceForRentExemptionInLamports(\n            updatedQuoteRequest.srcChainId,\n          );\n          const quotes = await this.fetchQuotes(\n            updatedQuoteRequest,\n            // AbortController is always defined by this line, because we assign it a few lines above,\n            // not sure why Jest thinks it's not\n            // Linters accurately say that it's defined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.#abortController!.signal as AbortSignal,\n          );\n\n          this.update((state) => {\n            state.quotes = quotes;\n            state.quotesLoadingStatus = RequestStatus.FETCHED;\n          });\n        },\n      );\n    } catch (error) {\n      const isAbortError = (error as Error).name === 'AbortError';\n      const isAbortedDueToReset = error === RESET_STATE_ABORT_MESSAGE;\n      if (isAbortedDueToReset || isAbortError) {\n        // Exit the function early to avoid other state updates\n        return;\n      }\n\n      this.update((state) => {\n        state.quoteFetchError =\n          error instanceof Error ? error.message : 'Unknown error';\n        state.quotesLoadingStatus = RequestStatus.ERROR;\n        state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      });\n      this.trackUnifiedSwapBridgeEvent(\n        UnifiedSwapBridgeEventName.QuoteError,\n        context,\n      );\n      console.log('Failed to fetch bridge quotes', error);\n    }\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n    const { maxRefreshCount } = bridgeFeatureFlags;\n\n    // Stop polling if the maximum number of refreshes has been reached\n    if (\n      updatedQuoteRequest.insufficientBal ||\n      (!updatedQuoteRequest.insufficientBal &&\n        this.state.quotesRefreshCount >= maxRefreshCount)\n    ) {\n      this.stopAllPolling();\n    }\n\n    // Update quote fetching stats\n    const quotesLastFetched = Date.now();\n    this.update((state) => {\n      state.quotesInitialLoadTime =\n        state.quotesRefreshCount === 0 && this.#quotesFirstFetched\n          ? quotesLastFetched - this.#quotesFirstFetched\n          : this.state.quotesInitialLoadTime;\n      state.quotesLastFetched = quotesLastFetched;\n      state.quotesRefreshCount += 1;\n    });\n  };\n\n  readonly #appendL1GasFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & L1GasFees)[] | undefined> => {\n    // Indicates whether some of the quotes are not for optimism or base\n    const hasInvalidQuotes = quotes.some(({ quote }) => {\n      const chainId = formatChainIdToCaip(quote.srcChainId);\n      return ![CHAIN_IDS.OPTIMISM, CHAIN_IDS.BASE]\n        .map(formatChainIdToCaip)\n        .includes(chainId);\n    });\n\n    // Only append L1 gas fees if all quotes are for either optimism or base\n    if (hasInvalidQuotes) {\n      return undefined;\n    }\n\n    const l1GasFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { quote, trade, approval } = quoteResponse;\n        const chainId = numberToHex(quote.srcChainId);\n\n        const getTxParams = (txData: TxData) => ({\n          from: txData.from,\n          to: txData.to,\n          value: txData.value,\n          data: txData.data,\n          gasLimit: txData.gasLimit?.toString(),\n        });\n        const approvalL1GasFees = approval\n          ? await this.#getLayer1GasFee({\n              transactionParams: getTxParams(approval),\n              chainId,\n            })\n          : '0x0';\n        const tradeL1GasFees = await this.#getLayer1GasFee({\n          transactionParams: getTxParams(trade),\n          chainId,\n        });\n\n        if (approvalL1GasFees === undefined || tradeL1GasFees === undefined) {\n          return undefined;\n        }\n\n        return {\n          ...quoteResponse,\n          l1GasFeesInHexWei: sumHexes(approvalL1GasFees, tradeL1GasFees),\n        };\n      }),\n    );\n\n    const quotesWithL1GasFees = (await l1GasFeePromises).reduce<\n      (QuoteResponse & L1GasFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating L1 gas fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithL1GasFees;\n  };\n\n  readonly #setMinimumBalanceForRentExemptionInLamports = (\n    srcChainId: GenericQuoteRequest['srcChainId'],\n  ): Promise<void> | undefined => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n\n    return isSolanaChainId(srcChainId) && selectedAccount?.metadata?.snap?.id\n      ? this.messagingSystem\n          .call(\n            'SnapController:handleRequest',\n            getMinimumBalanceForRentExemptionRequest(\n              selectedAccount.metadata.snap?.id,\n            ),\n          ) // eslint-disable-next-line promise/always-return\n          .then((result) => {\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports = String(result);\n            });\n          })\n          .catch((error) => {\n            console.error(\n              'Error setting minimum balance for rent exemption',\n              error,\n            );\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports =\n                DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n            });\n          })\n      : undefined;\n  };\n\n  readonly #appendSolanaFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & SolanaFees)[] | undefined> => {\n    // Return early if some of the quotes are not for solana\n    if (\n      quotes.some(({ quote: { srcChainId } }) => !isSolanaChainId(srcChainId))\n    ) {\n      return undefined;\n    }\n\n    const solanaFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { trade } = quoteResponse;\n        const selectedAccount = this.#getMultichainSelectedAccount();\n\n        if (selectedAccount?.metadata?.snap?.id && typeof trade === 'string') {\n          const { value: fees } = (await this.messagingSystem.call(\n            'SnapController:handleRequest',\n            getFeeForTransactionRequest(\n              selectedAccount.metadata.snap?.id,\n              trade,\n            ),\n          )) as { value: string };\n\n          return {\n            ...quoteResponse,\n            solanaFeesInLamports: fees,\n          };\n        }\n        return quoteResponse;\n      }),\n    );\n\n    const quotesWithSolanaFees = (await solanaFeePromises).reduce<\n      (QuoteResponse & SolanaFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating solana fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithSolanaFees;\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getSelectedNetworkClientId() {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    // console.log('===selectedNetworkClientId', selectedNetworkClientId);\n    return selectedNetworkClientId;\n  }\n\n  #getSelectedNetworkClient() {\n    const selectedNetworkClientId = this.#getSelectedNetworkClientId();\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return networkClient;\n  }\n\n  readonly #getRequestParams = (): Omit<\n    RequestParams,\n    'token_symbol_source' | 'token_symbol_destination'\n  > => {\n    const srcChainIdCaip = formatChainIdToCaip(\n      this.state.quoteRequest.srcChainId ||\n        this.#getSelectedNetworkClient().configuration.chainId,\n    );\n    return getRequestParams(this.state.quoteRequest, srcChainIdCaip);\n  };\n\n  readonly #getRequestMetadata = (): Omit<\n    RequestMetadata,\n    'stx_enabled' | 'usd_amount_source' | 'security_warnings'\n  > => {\n    return {\n      slippage_limit: this.state.quoteRequest.slippage,\n      swap_type: getSwapTypeFromQuote(this.state.quoteRequest),\n      is_hardware_wallet: isHardwareWallet(\n        this.#getMultichainSelectedAccount(),\n      ),\n      custom_slippage: isCustomSlippage(this.state.quoteRequest.slippage),\n    };\n  };\n\n  readonly #getQuoteFetchData = (): Omit<\n    QuoteFetchData,\n    'best_quote_provider' | 'price_impact'\n  > => {\n    return {\n      can_submit: !this.state.quoteRequest.insufficientBal, // TODO check if balance is sufficient for network fees\n      quotes_count: this.state.quotes.length,\n      quotes_list: this.state.quotes.map(({ quote }) =>\n        formatProviderLabel(quote),\n      ),\n      initial_load_time_all_quotes: this.state.quotesInitialLoadTime ?? 0,\n    };\n  };\n\n  readonly #getEventProperties = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ): CrossChainSwapsEventProperties<T> => {\n    const baseProperties = {\n      action_type: getActionTypeFromQuoteRequest(this.state.quoteRequest),\n      ...propertiesFromClient,\n    };\n    switch (eventName) {\n      case UnifiedSwapBridgeEventName.ButtonClicked:\n      case UnifiedSwapBridgeEventName.PageViewed:\n        return {\n          ...this.#getRequestParams(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesReceived:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          refresh_count: this.state.quotesRefreshCount,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesRequested:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuoteError:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          error_message: this.state.quoteFetchError,\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.AllQuotesOpened:\n      case UnifiedSwapBridgeEventName.AllQuotesSorted:\n      case UnifiedSwapBridgeEventName.QuoteSelected:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.SnapConfirmationViewed:\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n        };\n      case UnifiedSwapBridgeEventName.Submitted:\n      case UnifiedSwapBridgeEventName.Failed: {\n        // Populate the properties that the error occurred before the tx was submitted\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...propertiesFromClient,\n        };\n      }\n      // These are populated by BridgeStatusController\n      case UnifiedSwapBridgeEventName.Completed:\n        return propertiesFromClient;\n      case UnifiedSwapBridgeEventName.InputChanged:\n      default:\n        return baseProperties;\n    }\n  };\n\n  readonly #trackInputChangedEvents = (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n  ) => {\n    Object.entries(paramsToUpdate).forEach(([key, value]) => {\n      const inputKey = toInputChangedPropertyKey[key as keyof QuoteRequest];\n      const inputValue =\n        toInputChangedPropertyValue[key as keyof QuoteRequest]?.(\n          paramsToUpdate,\n        );\n      if (\n        inputKey &&\n        inputValue !== undefined &&\n        value !== this.state.quoteRequest[key as keyof GenericQuoteRequest]\n      ) {\n        this.trackUnifiedSwapBridgeEvent(\n          UnifiedSwapBridgeEventName.InputChanged,\n          {\n            input: inputKey,\n            value: inputValue,\n          },\n        );\n      }\n    });\n  };\n\n  /**\n   * This method tracks cross-chain swaps events\n   *\n   * @param eventName - The name of the event to track\n   * @param propertiesFromClient - Properties that can't be calculated from the event name and need to be provided by the client\n   * @example\n   * this.trackUnifiedSwapBridgeEvent(UnifiedSwapBridgeEventName.ActionOpened, {\n   *   location: MetaMetricsSwapsEventSource.MainView,\n   * });\n   */\n  trackUnifiedSwapBridgeEvent = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    try {\n      const combinedPropertiesForEvent = this.#getEventProperties<T>(\n        eventName,\n        propertiesFromClient,\n      );\n\n      this.#trackMetaMetricsFn(eventName, combinedPropertiesForEvent);\n    } catch (error) {\n      console.error(\n        'Error tracking cross-chain swaps MetaMetrics event',\n        error,\n      );\n    }\n  };\n\n  /**\n   *\n   * @param contractAddress - The address of the ERC20 token contract\n   * @param chainId - The hex chain ID of the bridge network\n   * @returns The atomic allowance of the ERC20 token contract\n   */\n  getBridgeERC20Allowance = async (\n    contractAddress: string,\n    chainId: Hex,\n  ): Promise<string> => {\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    if (!provider) {\n      throw new Error('No provider found');\n    }\n\n    const ethersProvider = new Web3Provider(provider);\n    const contract = new Contract(contractAddress, abiERC20, ethersProvider);\n    const { address: walletAddress } =\n      this.#getMultichainSelectedAccount() ?? {};\n    const allowance: BigNumber = await contract.allowance(\n      walletAddress,\n      METABRIDGE_CHAIN_TO_ADDRESS_MAP[chainId],\n    );\n    return allowance.toString();\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"bridge-controller.cjs","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { StateMetadata } from '@metamask/base-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { TransactionController } from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  type BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_PROD_API_BASE_URL,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  REFRESH_INTERVAL_MS,\n} from './constants/bridge';\nimport { CHAIN_IDS } from './constants/chains';\nimport { TraceName } from './constants/traces';\nimport { selectIsAssetExchangeRateInState } from './selectors';\nimport type { QuoteRequest } from './types';\nimport {\n  type L1GasFees,\n  type GenericQuoteRequest,\n  type SolanaFees,\n  type QuoteResponse,\n  type TxData,\n  type BridgeControllerState,\n  type BridgeControllerMessenger,\n  type FetchFunction,\n  RequestStatus,\n} from './types';\nimport { getAssetIdsForToken, toExchangeRates } from './utils/assets';\nimport { hasSufficientBalance } from './utils/balance';\nimport {\n  getDefaultBridgeControllerState,\n  isCrossChain,\n  isSolanaChainId,\n  sumHexes,\n} from './utils/bridge';\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { getBridgeFeatureFlags } from './utils/feature-flags';\nimport { fetchAssetPrices, fetchBridgeQuotes } from './utils/fetch';\nimport { UnifiedSwapBridgeEventName } from './utils/metrics/constants';\nimport {\n  formatProviderLabel,\n  getActionTypeFromQuoteRequest,\n  getRequestParams,\n  getSwapTypeFromQuote,\n  isCustomSlippage,\n  isHardwareWallet,\n  toInputChangedPropertyKey,\n  toInputChangedPropertyValue,\n} from './utils/metrics/properties';\nimport type {\n  QuoteFetchData,\n  RequestMetadata,\n  RequestParams,\n  RequiredEventContextFromClient,\n} from './utils/metrics/types';\nimport { type CrossChainSwapsEventProperties } from './utils/metrics/types';\nimport { isValidQuoteRequest } from './utils/quote';\nimport {\n  getFeeForTransactionRequest,\n  getMinimumBalanceForRentExemptionRequest,\n} from './utils/snaps';\n\nconst metadata: StateMetadata<BridgeControllerState> = {\n  quoteRequest: {\n    persist: false,\n    anonymous: false,\n  },\n  quotes: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesInitialLoadTime: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLastFetched: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLoadingStatus: {\n    persist: false,\n    anonymous: false,\n  },\n  quoteFetchError: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesRefreshCount: {\n    persist: false,\n    anonymous: false,\n  },\n  assetExchangeRates: {\n    persist: false,\n    anonymous: false,\n  },\n  minimumBalanceForRentExemptionInLamports: {\n    persist: false,\n    anonymous: false,\n  },\n};\n\nconst RESET_STATE_ABORT_MESSAGE = 'Reset controller state';\n\n/**\n * The input to start polling for the {@link BridgeController}\n *\n * @param networkClientId - The network client ID of the selected network\n * @param updatedQuoteRequest - The updated quote request\n * @param context - The context contains properties that can't be populated by the\n * controller and need to be provided by the client for analytics\n */\ntype BridgePollingInput = {\n  networkClientId: NetworkClientId;\n  updatedQuoteRequest: GenericQuoteRequest;\n  context: Pick<\n    RequiredEventContextFromClient,\n    UnifiedSwapBridgeEventName.QuoteError\n  >[UnifiedSwapBridgeEventName.QuoteError] &\n    Pick<\n      RequiredEventContextFromClient,\n      UnifiedSwapBridgeEventName.QuotesRequested\n    >[UnifiedSwapBridgeEventName.QuotesRequested];\n};\n\nexport class BridgeController extends StaticIntervalPollingController<BridgePollingInput>()<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState,\n  BridgeControllerMessenger\n> {\n  #abortController: AbortController | undefined;\n\n  #quotesFirstFetched: number | undefined;\n\n  readonly #clientId: string;\n\n  readonly #getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #trackMetaMetricsFn: <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    properties: CrossChainSwapsEventProperties<T>,\n  ) => void;\n\n  readonly #trace: TraceCallback;\n\n  readonly #config: {\n    customBridgeApiBaseUrl?: string;\n  };\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    getLayer1GasFee,\n    fetchFn,\n    config,\n    trackMetaMetricsFn,\n    traceFn,\n  }: {\n    messenger: BridgeControllerMessenger;\n    state?: Partial<BridgeControllerState>;\n    clientId: BridgeClientId;\n    getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n    fetchFn: FetchFunction;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    trackMetaMetricsFn: <\n      T extends\n        (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n    >(\n      eventName: T,\n      properties: CrossChainSwapsEventProperties<T>,\n    ) => void;\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultBridgeControllerState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.#abortController = new AbortController();\n    this.#getLayer1GasFee = getLayer1GasFee;\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#trackMetaMetricsFn = trackMetaMetricsFn;\n    this.#config = config ?? {};\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:setChainIntervalLength`,\n      this.setChainIntervalLength.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:updateBridgeQuoteRequestParams`,\n      this.updateBridgeQuoteRequestParams.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:getBridgeERC20Allowance`,\n      this.getBridgeERC20Allowance.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:trackUnifiedSwapBridgeEvent`,\n      this.trackUnifiedSwapBridgeEvent.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:stopPollingForQuotes`,\n      this.stopPollingForQuotes.bind(this),\n    );\n  }\n\n  _executePoll = async (pollingInput: BridgePollingInput) => {\n    await this.#fetchBridgeQuotes(pollingInput);\n  };\n\n  updateBridgeQuoteRequestParams = async (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n    context: BridgePollingInput['context'],\n  ) => {\n    this.stopAllPolling();\n    this.#abortController?.abort('Quote request updated');\n\n    this.#trackInputChangedEvents(paramsToUpdate);\n\n    const updatedQuoteRequest = {\n      ...DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest,\n      ...paramsToUpdate,\n    };\n\n    this.update((state) => {\n      state.quoteRequest = updatedQuoteRequest;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      // Reset required minimum balance if the source chain is not Solana\n      if (\n        updatedQuoteRequest.srcChainId &&\n        !isSolanaChainId(updatedQuoteRequest.srcChainId)\n      ) {\n        state.minimumBalanceForRentExemptionInLamports =\n          DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n      }\n    });\n\n    await this.#fetchAssetExchangeRates(updatedQuoteRequest).catch((error) =>\n      console.warn('Failed to fetch asset exchange rates', error),\n    );\n\n    if (isValidQuoteRequest(updatedQuoteRequest)) {\n      this.#quotesFirstFetched = Date.now();\n      const providerConfig = this.#getSelectedNetworkClient()?.configuration;\n\n      let insufficientBal: boolean | undefined;\n      if (isSolanaChainId(updatedQuoteRequest.srcChainId)) {\n        // If the source chain is not an EVM network, use value from params\n        insufficientBal = paramsToUpdate.insufficientBal;\n      } else if (providerConfig?.rpcUrl?.includes('tenderly')) {\n        // If the rpcUrl is a tenderly fork (e2e tests), set insufficientBal=true\n        // The bridge-api filters out quotes if the balance on mainnet is insufficient so this override allows quotes to always be returned\n        insufficientBal = true;\n      } else {\n        // Otherwise query the src token balance from the RPC provider\n        insufficientBal =\n          paramsToUpdate.insufficientBal ??\n          !(await this.#hasSufficientBalance(updatedQuoteRequest));\n      }\n\n      const networkClientId = this.#getSelectedNetworkClientId();\n      // Set refresh rate based on the source chain before starting polling\n      this.setChainIntervalLength();\n      this.startPolling({\n        networkClientId,\n        updatedQuoteRequest: {\n          ...updatedQuoteRequest,\n          insufficientBal,\n        },\n        context,\n      });\n    }\n  };\n\n  readonly #getExchangeRateSources = () => {\n    return {\n      ...this.messagingSystem.call('MultichainAssetsRatesController:getState'),\n      ...this.messagingSystem.call('CurrencyRateController:getState'),\n      ...this.messagingSystem.call('TokenRatesController:getState'),\n      ...this.state,\n    };\n  };\n\n  /**\n   * Fetches the exchange rates for the assets in the quote request if they are not already in the state\n   * In addition to the selected tokens, this also fetches the native asset for the source and destination chains\n   *\n   * @param quoteRequest - The quote request\n   * @param quoteRequest.srcChainId - The source chain ID\n   * @param quoteRequest.srcTokenAddress - The source token address\n   * @param quoteRequest.destChainId - The destination chain ID\n   * @param quoteRequest.destTokenAddress - The destination token address\n   */\n  readonly #fetchAssetExchangeRates = async ({\n    srcChainId,\n    srcTokenAddress,\n    destChainId,\n    destTokenAddress,\n  }: Partial<GenericQuoteRequest>) => {\n    const assetIds: Set<CaipAssetType> = new Set([]);\n    const exchangeRateSources = this.#getExchangeRateSources();\n    if (\n      srcTokenAddress &&\n      srcChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        srcChainId,\n        srcTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(srcTokenAddress, srcChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n    if (\n      destTokenAddress &&\n      destChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        destChainId,\n        destTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(destTokenAddress, destChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n\n    const currency = this.messagingSystem.call(\n      'CurrencyRateController:getState',\n    ).currentCurrency;\n\n    if (assetIds.size === 0) {\n      return;\n    }\n\n    const pricesByAssetId = await fetchAssetPrices({\n      assetIds,\n      currencies: new Set([currency]),\n      clientId: this.#clientId,\n      fetchFn: this.#fetchFn,\n    });\n    const exchangeRates = toExchangeRates(currency, pricesByAssetId);\n    this.update((state) => {\n      state.assetExchangeRates = {\n        ...state.assetExchangeRates,\n        ...exchangeRates,\n      };\n    });\n  };\n\n  readonly #hasSufficientBalance = async (\n    quoteRequest: GenericQuoteRequest,\n  ) => {\n    const walletAddress = this.#getMultichainSelectedAccount()?.address;\n    const srcChainIdInHex = formatChainIdToHex(quoteRequest.srcChainId);\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    const normalizedSrcTokenAddress = formatAddressToCaipReference(\n      quoteRequest.srcTokenAddress,\n    );\n\n    return (\n      provider &&\n      walletAddress &&\n      normalizedSrcTokenAddress &&\n      quoteRequest.srcTokenAmount &&\n      srcChainIdInHex &&\n      (await hasSufficientBalance(\n        provider,\n        walletAddress,\n        normalizedSrcTokenAddress,\n        quoteRequest.srcTokenAmount,\n        srcChainIdInHex,\n      ))\n    );\n  };\n\n  stopPollingForQuotes = (reason?: string) => {\n    this.stopAllPolling();\n    this.#abortController?.abort(reason);\n  };\n\n  resetState = () => {\n    this.stopPollingForQuotes(RESET_STATE_ABORT_MESSAGE);\n\n    this.update((state) => {\n      // Cannot do direct assignment to state, i.e. state = {... }, need to manually assign each field\n      state.quoteRequest = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.assetExchangeRates =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.assetExchangeRates;\n      state.minimumBalanceForRentExemptionInLamports =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n    });\n  };\n\n  /**\n   * Sets the interval length based on the source chain\n   */\n  setChainIntervalLength = () => {\n    const { state } = this;\n    const { srcChainId } = state.quoteRequest;\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n\n    const refreshRateOverride = srcChainId\n      ? bridgeFeatureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : undefined;\n    const defaultRefreshRate = bridgeFeatureFlags.refreshRate;\n    this.setIntervalLength(refreshRateOverride ?? defaultRefreshRate);\n  };\n\n  readonly #fetchBridgeQuotes = async ({\n    networkClientId: _networkClientId,\n    updatedQuoteRequest,\n    context,\n  }: BridgePollingInput) => {\n    this.#abortController?.abort('New quote request');\n    this.#abortController = new AbortController();\n\n    this.trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.QuotesRequested,\n      context,\n    );\n    this.update((state) => {\n      state.quotesLoadingStatus = RequestStatus.LOADING;\n      state.quoteRequest = updatedQuoteRequest;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n    });\n\n    const fetchQuotes = async () => {\n      // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#setMinimumBalanceForRentExemptionInLamports(\n        updatedQuoteRequest.srcChainId,\n      );\n      const quotes = await fetchBridgeQuotes(\n        updatedQuoteRequest,\n        // AbortController is always defined by this line, because we assign it a few lines above,\n        // not sure why Jest thinks it's not\n        // Linters accurately say that it's defined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.#abortController!.signal as AbortSignal,\n        this.#clientId,\n        this.#fetchFn,\n        this.#config.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n      );\n\n      const quotesWithL1GasFees = await this.#appendL1GasFees(quotes);\n      const quotesWithSolanaFees = await this.#appendSolanaFees(quotes);\n\n      this.update((state) => {\n        state.quotes = quotesWithL1GasFees ?? quotesWithSolanaFees ?? quotes;\n        state.quotesLoadingStatus = RequestStatus.FETCHED;\n      });\n    };\n\n    try {\n      await this.#trace(\n        {\n          name: isCrossChain(\n            updatedQuoteRequest.srcChainId,\n            updatedQuoteRequest.destChainId,\n          )\n            ? TraceName.BridgeQuotesFetched\n            : TraceName.SwapQuotesFetched,\n          data: {\n            srcChainId: formatChainIdToCaip(updatedQuoteRequest.srcChainId),\n            destChainId: formatChainIdToCaip(updatedQuoteRequest.destChainId),\n          },\n        },\n        fetchQuotes,\n      );\n    } catch (error) {\n      const isAbortError = (error as Error).name === 'AbortError';\n      const isAbortedDueToReset = error === RESET_STATE_ABORT_MESSAGE;\n      if (isAbortedDueToReset || isAbortError) {\n        // Exit the function early to avoid other state updates\n        return;\n      }\n\n      this.update((state) => {\n        state.quoteFetchError =\n          error instanceof Error ? error.message : 'Unknown error';\n        state.quotesLoadingStatus = RequestStatus.ERROR;\n        state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      });\n      this.trackUnifiedSwapBridgeEvent(\n        UnifiedSwapBridgeEventName.QuoteError,\n        context,\n      );\n      console.log('Failed to fetch bridge quotes', error);\n    }\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n    const { maxRefreshCount } = bridgeFeatureFlags;\n\n    // Stop polling if the maximum number of refreshes has been reached\n    if (\n      updatedQuoteRequest.insufficientBal ||\n      (!updatedQuoteRequest.insufficientBal &&\n        this.state.quotesRefreshCount >= maxRefreshCount)\n    ) {\n      this.stopAllPolling();\n    }\n\n    // Update quote fetching stats\n    const quotesLastFetched = Date.now();\n    this.update((state) => {\n      state.quotesInitialLoadTime =\n        state.quotesRefreshCount === 0 && this.#quotesFirstFetched\n          ? quotesLastFetched - this.#quotesFirstFetched\n          : this.state.quotesInitialLoadTime;\n      state.quotesLastFetched = quotesLastFetched;\n      state.quotesRefreshCount += 1;\n    });\n  };\n\n  readonly #appendL1GasFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & L1GasFees)[] | undefined> => {\n    // Indicates whether some of the quotes are not for optimism or base\n    const hasInvalidQuotes = quotes.some(({ quote }) => {\n      const chainId = formatChainIdToCaip(quote.srcChainId);\n      return ![CHAIN_IDS.OPTIMISM, CHAIN_IDS.BASE]\n        .map(formatChainIdToCaip)\n        .includes(chainId);\n    });\n\n    // Only append L1 gas fees if all quotes are for either optimism or base\n    if (hasInvalidQuotes) {\n      return undefined;\n    }\n\n    const l1GasFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { quote, trade, approval } = quoteResponse;\n        const chainId = numberToHex(quote.srcChainId);\n\n        const getTxParams = (txData: TxData) => ({\n          from: txData.from,\n          to: txData.to,\n          value: txData.value,\n          data: txData.data,\n          gasLimit: txData.gasLimit?.toString(),\n        });\n        const approvalL1GasFees = approval\n          ? await this.#getLayer1GasFee({\n              transactionParams: getTxParams(approval),\n              chainId,\n            })\n          : '0x0';\n        const tradeL1GasFees = await this.#getLayer1GasFee({\n          transactionParams: getTxParams(trade),\n          chainId,\n        });\n\n        if (approvalL1GasFees === undefined || tradeL1GasFees === undefined) {\n          return undefined;\n        }\n\n        return {\n          ...quoteResponse,\n          l1GasFeesInHexWei: sumHexes(approvalL1GasFees, tradeL1GasFees),\n        };\n      }),\n    );\n\n    const quotesWithL1GasFees = (await l1GasFeePromises).reduce<\n      (QuoteResponse & L1GasFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating L1 gas fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithL1GasFees;\n  };\n\n  readonly #setMinimumBalanceForRentExemptionInLamports = (\n    srcChainId: GenericQuoteRequest['srcChainId'],\n  ): Promise<void> | undefined => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n\n    return isSolanaChainId(srcChainId) && selectedAccount?.metadata?.snap?.id\n      ? this.messagingSystem\n          .call(\n            'SnapController:handleRequest',\n            getMinimumBalanceForRentExemptionRequest(\n              selectedAccount.metadata.snap?.id,\n            ),\n          ) // eslint-disable-next-line promise/always-return\n          .then((result) => {\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports = String(result);\n            });\n          })\n          .catch((error) => {\n            console.error(\n              'Error setting minimum balance for rent exemption',\n              error,\n            );\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports =\n                DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n            });\n          })\n      : undefined;\n  };\n\n  readonly #appendSolanaFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & SolanaFees)[] | undefined> => {\n    // Return early if some of the quotes are not for solana\n    if (\n      quotes.some(({ quote: { srcChainId } }) => !isSolanaChainId(srcChainId))\n    ) {\n      return undefined;\n    }\n\n    const solanaFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { trade } = quoteResponse;\n        const selectedAccount = this.#getMultichainSelectedAccount();\n\n        if (selectedAccount?.metadata?.snap?.id && typeof trade === 'string') {\n          const { value: fees } = (await this.messagingSystem.call(\n            'SnapController:handleRequest',\n            getFeeForTransactionRequest(\n              selectedAccount.metadata.snap?.id,\n              trade,\n            ),\n          )) as { value: string };\n\n          return {\n            ...quoteResponse,\n            solanaFeesInLamports: fees,\n          };\n        }\n        return quoteResponse;\n      }),\n    );\n\n    const quotesWithSolanaFees = (await solanaFeePromises).reduce<\n      (QuoteResponse & SolanaFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating solana fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithSolanaFees;\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getSelectedNetworkClientId() {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    // console.log('===selectedNetworkClientId', selectedNetworkClientId);\n    return selectedNetworkClientId;\n  }\n\n  #getSelectedNetworkClient() {\n    const selectedNetworkClientId = this.#getSelectedNetworkClientId();\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return networkClient;\n  }\n\n  readonly #getRequestParams = (): Omit<\n    RequestParams,\n    'token_symbol_source' | 'token_symbol_destination'\n  > => {\n    const srcChainIdCaip = formatChainIdToCaip(\n      this.state.quoteRequest.srcChainId ||\n        this.#getSelectedNetworkClient().configuration.chainId,\n    );\n    return getRequestParams(this.state.quoteRequest, srcChainIdCaip);\n  };\n\n  readonly #getRequestMetadata = (): Omit<\n    RequestMetadata,\n    'stx_enabled' | 'usd_amount_source' | 'security_warnings'\n  > => {\n    return {\n      slippage_limit: this.state.quoteRequest.slippage,\n      swap_type: getSwapTypeFromQuote(this.state.quoteRequest),\n      is_hardware_wallet: isHardwareWallet(\n        this.#getMultichainSelectedAccount(),\n      ),\n      custom_slippage: isCustomSlippage(this.state.quoteRequest.slippage),\n    };\n  };\n\n  readonly #getQuoteFetchData = (): Omit<\n    QuoteFetchData,\n    'best_quote_provider' | 'price_impact'\n  > => {\n    return {\n      can_submit: !this.state.quoteRequest.insufficientBal, // TODO check if balance is sufficient for network fees\n      quotes_count: this.state.quotes.length,\n      quotes_list: this.state.quotes.map(({ quote }) =>\n        formatProviderLabel(quote),\n      ),\n      initial_load_time_all_quotes: this.state.quotesInitialLoadTime ?? 0,\n    };\n  };\n\n  readonly #getEventProperties = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ): CrossChainSwapsEventProperties<T> => {\n    const baseProperties = {\n      action_type: getActionTypeFromQuoteRequest(this.state.quoteRequest),\n      ...propertiesFromClient,\n    };\n    switch (eventName) {\n      case UnifiedSwapBridgeEventName.ButtonClicked:\n      case UnifiedSwapBridgeEventName.PageViewed:\n        return {\n          ...this.#getRequestParams(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesReceived:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          refresh_count: this.state.quotesRefreshCount,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesRequested:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuoteError:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          error_message: this.state.quoteFetchError,\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.AllQuotesOpened:\n      case UnifiedSwapBridgeEventName.AllQuotesSorted:\n      case UnifiedSwapBridgeEventName.QuoteSelected:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.SnapConfirmationViewed:\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n        };\n      case UnifiedSwapBridgeEventName.Submitted:\n      case UnifiedSwapBridgeEventName.Failed: {\n        // Populate the properties that the error occurred before the tx was submitted\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...propertiesFromClient,\n        };\n      }\n      // These are populated by BridgeStatusController\n      case UnifiedSwapBridgeEventName.Completed:\n        return propertiesFromClient;\n      case UnifiedSwapBridgeEventName.InputChanged:\n      default:\n        return baseProperties;\n    }\n  };\n\n  readonly #trackInputChangedEvents = (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n  ) => {\n    Object.entries(paramsToUpdate).forEach(([key, value]) => {\n      const inputKey = toInputChangedPropertyKey[key as keyof QuoteRequest];\n      const inputValue =\n        toInputChangedPropertyValue[key as keyof QuoteRequest]?.(\n          paramsToUpdate,\n        );\n      if (\n        inputKey &&\n        inputValue !== undefined &&\n        value !== this.state.quoteRequest[key as keyof GenericQuoteRequest]\n      ) {\n        this.trackUnifiedSwapBridgeEvent(\n          UnifiedSwapBridgeEventName.InputChanged,\n          {\n            input: inputKey,\n            value: inputValue,\n          },\n        );\n      }\n    });\n  };\n\n  /**\n   * This method tracks cross-chain swaps events\n   *\n   * @param eventName - The name of the event to track\n   * @param propertiesFromClient - Properties that can't be calculated from the event name and need to be provided by the client\n   * @example\n   * this.trackUnifiedSwapBridgeEvent(UnifiedSwapBridgeEventName.ActionOpened, {\n   *   location: MetaMetricsSwapsEventSource.MainView,\n   * });\n   */\n  trackUnifiedSwapBridgeEvent = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    try {\n      const combinedPropertiesForEvent = this.#getEventProperties<T>(\n        eventName,\n        propertiesFromClient,\n      );\n\n      this.#trackMetaMetricsFn(eventName, combinedPropertiesForEvent);\n    } catch (error) {\n      console.error(\n        'Error tracking cross-chain swaps MetaMetrics event',\n        error,\n      );\n    }\n  };\n\n  /**\n   *\n   * @param contractAddress - The address of the ERC20 token contract\n   * @param chainId - The hex chain ID of the bridge network\n   * @returns The atomic allowance of the ERC20 token contract\n   */\n  getBridgeERC20Allowance = async (\n    contractAddress: string,\n    chainId: Hex,\n  ): Promise<string> => {\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    if (!provider) {\n      throw new Error('No provider found');\n    }\n\n    const ethersProvider = new Web3Provider(provider);\n    const contract = new Contract(contractAddress, abiERC20, ethersProvider);\n    const { address: walletAddress } =\n      this.#getMultichainSelectedAccount() ?? {};\n    const allowance: BigNumber = await contract.allowance(\n      walletAddress,\n      METABRIDGE_CHAIN_TO_ADDRESS_MAP[chainId],\n    );\n    return allowance.toString();\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/bridge-controller.d.cts b/dist/bridge-controller.d.cts
index df336ba5ce8ebe1aeb23b399484e1072366064f1..01829736f5f1564814d3fa411a176818ca546b27 100644
--- a/dist/bridge-controller.d.cts
+++ b/dist/bridge-controller.d.cts
@@ -3,11 +3,10 @@ import type { NetworkClientId } from "@metamask/network-controller";
 import type { TransactionController } from "@metamask/transaction-controller";
 import { type Hex } from "@metamask/utils";
 import { type BridgeClientId, BRIDGE_CONTROLLER_NAME } from "./constants/bridge.cjs";
-import { type GenericQuoteRequest, type QuoteResponse, type BridgeControllerState, type BridgeControllerMessenger, type FetchFunction } from "./types.cjs";
+import { type GenericQuoteRequest, type BridgeControllerState, type BridgeControllerMessenger, type FetchFunction } from "./types.cjs";
 import { UnifiedSwapBridgeEventName } from "./utils/metrics/constants.cjs";
 import type { RequiredEventContextFromClient } from "./utils/metrics/types.cjs";
 import { type CrossChainSwapsEventProperties } from "./utils/metrics/types.cjs";
-import { FeatureId } from "./utils/validators.cjs";
 /**
  * The input to start polling for the {@link BridgeController}
  *
@@ -52,16 +51,6 @@ export declare class BridgeController extends BridgeController_base<typeof BRIDG
     });
     _executePoll: (pollingInput: BridgePollingInput) => Promise<void>;
     updateBridgeQuoteRequestParams: (paramsToUpdate: Partial<GenericQuoteRequest>, context: BridgePollingInput['context']) => Promise<void>;
-    /**
-     * Fetches quotes for specified request without updating the controller state
-     * This method does not start polling for quotes and does not emit UnifiedSwapBridge events
-     *
-     * @param quoteRequest - The parameters for quote requests to fetch
-     * @param abortSignal - The abort signal to cancel all the requests
-     * @param featureId - The feature ID that maps to quoteParam overrides from LD
-     * @returns A list of validated quotes
-     */
-    fetchQuotes: (quoteRequest: GenericQuoteRequest, abortSignal?: AbortSignal | null, featureId?: FeatureId | null) => Promise<QuoteResponse[]>;
     stopPollingForQuotes: (reason?: string) => void;
     resetState: () => void;
     /**
diff --git a/dist/bridge-controller.d.cts.map b/dist/bridge-controller.d.cts.map
index 8cbde03614fe4fe6b7a0dc7304be48d25d66881b..b823c043b96a8dbc0af2719a13e40c8dc1bcb72c 100644
--- a/dist/bridge-controller.d.cts.map
+++ b/dist/bridge-controller.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"bridge-controller.d.cts","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,aAAa,EAAE,mCAAmC;AAEhE,OAAO,KAAK,EAAE,eAAe,EAAE,qCAAqC;AAEpE,OAAO,KAAK,EAAE,qBAAqB,EAAE,yCAAyC;AAE9E,OAAO,EAAe,KAAK,GAAG,EAAE,wBAAwB;AAExD,OAAO,EACL,KAAK,cAAc,EACnB,sBAAsB,EAKvB,+BAA2B;AAK5B,OAAO,EAEL,KAAK,mBAAmB,EAExB,KAAK,aAAa,EAElB,KAAK,qBAAqB,EAC1B,KAAK,yBAAyB,EAC9B,KAAK,aAAa,EAEnB,oBAAgB;AAgBjB,OAAO,EAAE,0BAA0B,EAAE,sCAAkC;AAWvE,OAAO,KAAK,EAIV,8BAA8B,EAC/B,kCAA8B;AAC/B,OAAO,EAAE,KAAK,8BAA8B,EAAE,kCAA8B;AAM5E,OAAO,EAAE,SAAS,EAAE,+BAA2B;AA2C/C;;;;;;;GAOG;AACH,KAAK,kBAAkB,GAAG;IACxB,eAAe,EAAE,eAAe,CAAC;IACjC,mBAAmB,EAAE,mBAAmB,CAAC;IACzC,OAAO,EAAE,IAAI,CACX,8BAA8B,EAC9B,0BAA0B,CAAC,UAAU,CACtC,CAAC,0BAA0B,CAAC,UAAU,CAAC,GACtC,IAAI,CACF,8BAA8B,EAC9B,0BAA0B,CAAC,eAAe,CAC3C,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;CACjD,CAAC;;;;;;;;;;;;;;;;AAEF,qBAAa,gBAAiB,SAAQ,sBACpC,OAAO,sBAAsB,EAC7B,qBAAqB,EACrB,yBAAyB,CAC1B;;gBAyBa,EACV,SAAS,EACT,KAAK,EACL,QAAQ,EACR,eAAe,EACf,OAAO,EACP,MAAM,EACN,kBAAkB,EAClB,OAAO,GACR,EAAE;QACD,SAAS,EAAE,yBAAyB,CAAC;QACrC,KAAK,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACvC,QAAQ,EAAE,cAAc,CAAC;QACzB,eAAe,EAAE,OAAO,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;QACxE,OAAO,EAAE,aAAa,CAAC;QACvB,MAAM,CAAC,EAAE;YACP,sBAAsB,CAAC,EAAE,MAAM,CAAC;SACjC,CAAC;QACF,kBAAkB,EAAE,CAClB,CAAC,SACC,CAAC,OAAO,0BAA0B,CAAC,CAAC,MAAM,OAAO,0BAA0B,CAAC,EAE9E,SAAS,EAAE,CAAC,EACZ,UAAU,EAAE,8BAA8B,CAAC,CAAC,CAAC,KAC1C,IAAI,CAAC;QACV,OAAO,CAAC,EAAE,aAAa,CAAC;KACzB;IAoDD,YAAY,iBAAwB,kBAAkB,mBAEpD;IAEF,8BAA8B,mBACZ,QAAQ,mBAAmB,CAAC,WACnC,kBAAkB,CAAC,SAAS,CAAC,mBAqEtC;IAEF;;;;;;;;OAQG;IACH,WAAW,iBACK,mBAAmB,gBACpB,WAAW,GAAG,IAAI,cACpB,SAAS,GAAG,IAAI,KAC1B,QAAQ,aAAa,EAAE,CAAC,CA+BzB;IAyGF,oBAAoB,YAAa,MAAM,UAGrC;IAEF,UAAU,aAqBR;IAEF;;OAEG;IACH,sBAAsB,aAUpB;IAoZF;;;;;;;;;OASG;IACH,2BAA2B,iIAoBzB;IAEF;;;;;OAKG;IACH,uBAAuB,oBACJ,MAAM,WACd,GAAG,KACX,QAAQ,MAAM,CAAC,CAehB;CACH"}
\ No newline at end of file
+{"version":3,"file":"bridge-controller.d.cts","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,aAAa,EAAE,mCAAmC;AAEhE,OAAO,KAAK,EAAE,eAAe,EAAE,qCAAqC;AAEpE,OAAO,KAAK,EAAE,qBAAqB,EAAE,yCAAyC;AAE9E,OAAO,EAAe,KAAK,GAAG,EAAE,wBAAwB;AAExD,OAAO,EACL,KAAK,cAAc,EACnB,sBAAsB,EAKvB,+BAA2B;AAK5B,OAAO,EAEL,KAAK,mBAAmB,EAIxB,KAAK,qBAAqB,EAC1B,KAAK,yBAAyB,EAC9B,KAAK,aAAa,EAEnB,oBAAgB;AAgBjB,OAAO,EAAE,0BAA0B,EAAE,sCAAkC;AAWvE,OAAO,KAAK,EAIV,8BAA8B,EAC/B,kCAA8B;AAC/B,OAAO,EAAE,KAAK,8BAA8B,EAAE,kCAA8B;AAgD5E;;;;;;;GAOG;AACH,KAAK,kBAAkB,GAAG;IACxB,eAAe,EAAE,eAAe,CAAC;IACjC,mBAAmB,EAAE,mBAAmB,CAAC;IACzC,OAAO,EAAE,IAAI,CACX,8BAA8B,EAC9B,0BAA0B,CAAC,UAAU,CACtC,CAAC,0BAA0B,CAAC,UAAU,CAAC,GACtC,IAAI,CACF,8BAA8B,EAC9B,0BAA0B,CAAC,eAAe,CAC3C,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;CACjD,CAAC;;;;;;;;;;;;;;;;AAEF,qBAAa,gBAAiB,SAAQ,sBACpC,OAAO,sBAAsB,EAC7B,qBAAqB,EACrB,yBAAyB,CAC1B;;gBAyBa,EACV,SAAS,EACT,KAAK,EACL,QAAQ,EACR,eAAe,EACf,OAAO,EACP,MAAM,EACN,kBAAkB,EAClB,OAAO,GACR,EAAE;QACD,SAAS,EAAE,yBAAyB,CAAC;QACrC,KAAK,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACvC,QAAQ,EAAE,cAAc,CAAC;QACzB,eAAe,EAAE,OAAO,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;QACxE,OAAO,EAAE,aAAa,CAAC;QACvB,MAAM,CAAC,EAAE;YACP,sBAAsB,CAAC,EAAE,MAAM,CAAC;SACjC,CAAC;QACF,kBAAkB,EAAE,CAClB,CAAC,SACC,CAAC,OAAO,0BAA0B,CAAC,CAAC,MAAM,OAAO,0BAA0B,CAAC,EAE9E,SAAS,EAAE,CAAC,EACZ,UAAU,EAAE,8BAA8B,CAAC,CAAC,CAAC,KAC1C,IAAI,CAAC;QACV,OAAO,CAAC,EAAE,aAAa,CAAC;KACzB;IAgDD,YAAY,iBAAwB,kBAAkB,mBAEpD;IAEF,8BAA8B,mBACZ,QAAQ,mBAAmB,CAAC,WACnC,kBAAkB,CAAC,SAAS,CAAC,mBAqEtC;IAyGF,oBAAoB,YAAa,MAAM,UAGrC;IAEF,UAAU,aAqBR;IAEF;;OAEG;IACH,sBAAsB,aAUpB;IA4ZF;;;;;;;;;OASG;IACH,2BAA2B,iIAoBzB;IAEF;;;;;OAKG;IACH,uBAAuB,oBACJ,MAAM,WACd,GAAG,KACX,QAAQ,MAAM,CAAC,CAehB;CACH"}
\ No newline at end of file
diff --git a/dist/bridge-controller.d.mts b/dist/bridge-controller.d.mts
index 4dbdffa64ac8d5d59550a59c1c34ca536ddf6b9e..8e47715df67727a48ed0bffc248238ce438a8c89 100644
--- a/dist/bridge-controller.d.mts
+++ b/dist/bridge-controller.d.mts
@@ -3,11 +3,10 @@ import type { NetworkClientId } from "@metamask/network-controller";
 import type { TransactionController } from "@metamask/transaction-controller";
 import { type Hex } from "@metamask/utils";
 import { type BridgeClientId, BRIDGE_CONTROLLER_NAME } from "./constants/bridge.mjs";
-import { type GenericQuoteRequest, type QuoteResponse, type BridgeControllerState, type BridgeControllerMessenger, type FetchFunction } from "./types.mjs";
+import { type GenericQuoteRequest, type BridgeControllerState, type BridgeControllerMessenger, type FetchFunction } from "./types.mjs";
 import { UnifiedSwapBridgeEventName } from "./utils/metrics/constants.mjs";
 import type { RequiredEventContextFromClient } from "./utils/metrics/types.mjs";
 import { type CrossChainSwapsEventProperties } from "./utils/metrics/types.mjs";
-import { FeatureId } from "./utils/validators.mjs";
 /**
  * The input to start polling for the {@link BridgeController}
  *
@@ -52,16 +51,6 @@ export declare class BridgeController extends BridgeController_base<typeof BRIDG
     });
     _executePoll: (pollingInput: BridgePollingInput) => Promise<void>;
     updateBridgeQuoteRequestParams: (paramsToUpdate: Partial<GenericQuoteRequest>, context: BridgePollingInput['context']) => Promise<void>;
-    /**
-     * Fetches quotes for specified request without updating the controller state
-     * This method does not start polling for quotes and does not emit UnifiedSwapBridge events
-     *
-     * @param quoteRequest - The parameters for quote requests to fetch
-     * @param abortSignal - The abort signal to cancel all the requests
-     * @param featureId - The feature ID that maps to quoteParam overrides from LD
-     * @returns A list of validated quotes
-     */
-    fetchQuotes: (quoteRequest: GenericQuoteRequest, abortSignal?: AbortSignal | null, featureId?: FeatureId | null) => Promise<QuoteResponse[]>;
     stopPollingForQuotes: (reason?: string) => void;
     resetState: () => void;
     /**
diff --git a/dist/bridge-controller.d.mts.map b/dist/bridge-controller.d.mts.map
index 0acbe54c386f4bf7fd477dd53904a3007685e32a..0f23944717758375b9a72177a2a08a1c33dcbd0c 100644
--- a/dist/bridge-controller.d.mts.map
+++ b/dist/bridge-controller.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"bridge-controller.d.mts","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,aAAa,EAAE,mCAAmC;AAEhE,OAAO,KAAK,EAAE,eAAe,EAAE,qCAAqC;AAEpE,OAAO,KAAK,EAAE,qBAAqB,EAAE,yCAAyC;AAE9E,OAAO,EAAe,KAAK,GAAG,EAAE,wBAAwB;AAExD,OAAO,EACL,KAAK,cAAc,EACnB,sBAAsB,EAKvB,+BAA2B;AAK5B,OAAO,EAEL,KAAK,mBAAmB,EAExB,KAAK,aAAa,EAElB,KAAK,qBAAqB,EAC1B,KAAK,yBAAyB,EAC9B,KAAK,aAAa,EAEnB,oBAAgB;AAgBjB,OAAO,EAAE,0BAA0B,EAAE,sCAAkC;AAWvE,OAAO,KAAK,EAIV,8BAA8B,EAC/B,kCAA8B;AAC/B,OAAO,EAAE,KAAK,8BAA8B,EAAE,kCAA8B;AAM5E,OAAO,EAAE,SAAS,EAAE,+BAA2B;AA2C/C;;;;;;;GAOG;AACH,KAAK,kBAAkB,GAAG;IACxB,eAAe,EAAE,eAAe,CAAC;IACjC,mBAAmB,EAAE,mBAAmB,CAAC;IACzC,OAAO,EAAE,IAAI,CACX,8BAA8B,EAC9B,0BAA0B,CAAC,UAAU,CACtC,CAAC,0BAA0B,CAAC,UAAU,CAAC,GACtC,IAAI,CACF,8BAA8B,EAC9B,0BAA0B,CAAC,eAAe,CAC3C,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;CACjD,CAAC;;;;;;;;;;;;;;;;AAEF,qBAAa,gBAAiB,SAAQ,sBACpC,OAAO,sBAAsB,EAC7B,qBAAqB,EACrB,yBAAyB,CAC1B;;gBAyBa,EACV,SAAS,EACT,KAAK,EACL,QAAQ,EACR,eAAe,EACf,OAAO,EACP,MAAM,EACN,kBAAkB,EAClB,OAAO,GACR,EAAE;QACD,SAAS,EAAE,yBAAyB,CAAC;QACrC,KAAK,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACvC,QAAQ,EAAE,cAAc,CAAC;QACzB,eAAe,EAAE,OAAO,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;QACxE,OAAO,EAAE,aAAa,CAAC;QACvB,MAAM,CAAC,EAAE;YACP,sBAAsB,CAAC,EAAE,MAAM,CAAC;SACjC,CAAC;QACF,kBAAkB,EAAE,CAClB,CAAC,SACC,CAAC,OAAO,0BAA0B,CAAC,CAAC,MAAM,OAAO,0BAA0B,CAAC,EAE9E,SAAS,EAAE,CAAC,EACZ,UAAU,EAAE,8BAA8B,CAAC,CAAC,CAAC,KAC1C,IAAI,CAAC;QACV,OAAO,CAAC,EAAE,aAAa,CAAC;KACzB;IAoDD,YAAY,iBAAwB,kBAAkB,mBAEpD;IAEF,8BAA8B,mBACZ,QAAQ,mBAAmB,CAAC,WACnC,kBAAkB,CAAC,SAAS,CAAC,mBAqEtC;IAEF;;;;;;;;OAQG;IACH,WAAW,iBACK,mBAAmB,gBACpB,WAAW,GAAG,IAAI,cACpB,SAAS,GAAG,IAAI,KAC1B,QAAQ,aAAa,EAAE,CAAC,CA+BzB;IAyGF,oBAAoB,YAAa,MAAM,UAGrC;IAEF,UAAU,aAqBR;IAEF;;OAEG;IACH,sBAAsB,aAUpB;IAoZF;;;;;;;;;OASG;IACH,2BAA2B,iIAoBzB;IAEF;;;;;OAKG;IACH,uBAAuB,oBACJ,MAAM,WACd,GAAG,KACX,QAAQ,MAAM,CAAC,CAehB;CACH"}
\ No newline at end of file
+{"version":3,"file":"bridge-controller.d.mts","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,aAAa,EAAE,mCAAmC;AAEhE,OAAO,KAAK,EAAE,eAAe,EAAE,qCAAqC;AAEpE,OAAO,KAAK,EAAE,qBAAqB,EAAE,yCAAyC;AAE9E,OAAO,EAAe,KAAK,GAAG,EAAE,wBAAwB;AAExD,OAAO,EACL,KAAK,cAAc,EACnB,sBAAsB,EAKvB,+BAA2B;AAK5B,OAAO,EAEL,KAAK,mBAAmB,EAIxB,KAAK,qBAAqB,EAC1B,KAAK,yBAAyB,EAC9B,KAAK,aAAa,EAEnB,oBAAgB;AAgBjB,OAAO,EAAE,0BAA0B,EAAE,sCAAkC;AAWvE,OAAO,KAAK,EAIV,8BAA8B,EAC/B,kCAA8B;AAC/B,OAAO,EAAE,KAAK,8BAA8B,EAAE,kCAA8B;AAgD5E;;;;;;;GAOG;AACH,KAAK,kBAAkB,GAAG;IACxB,eAAe,EAAE,eAAe,CAAC;IACjC,mBAAmB,EAAE,mBAAmB,CAAC;IACzC,OAAO,EAAE,IAAI,CACX,8BAA8B,EAC9B,0BAA0B,CAAC,UAAU,CACtC,CAAC,0BAA0B,CAAC,UAAU,CAAC,GACtC,IAAI,CACF,8BAA8B,EAC9B,0BAA0B,CAAC,eAAe,CAC3C,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;CACjD,CAAC;;;;;;;;;;;;;;;;AAEF,qBAAa,gBAAiB,SAAQ,sBACpC,OAAO,sBAAsB,EAC7B,qBAAqB,EACrB,yBAAyB,CAC1B;;gBAyBa,EACV,SAAS,EACT,KAAK,EACL,QAAQ,EACR,eAAe,EACf,OAAO,EACP,MAAM,EACN,kBAAkB,EAClB,OAAO,GACR,EAAE;QACD,SAAS,EAAE,yBAAyB,CAAC;QACrC,KAAK,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACvC,QAAQ,EAAE,cAAc,CAAC;QACzB,eAAe,EAAE,OAAO,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;QACxE,OAAO,EAAE,aAAa,CAAC;QACvB,MAAM,CAAC,EAAE;YACP,sBAAsB,CAAC,EAAE,MAAM,CAAC;SACjC,CAAC;QACF,kBAAkB,EAAE,CAClB,CAAC,SACC,CAAC,OAAO,0BAA0B,CAAC,CAAC,MAAM,OAAO,0BAA0B,CAAC,EAE9E,SAAS,EAAE,CAAC,EACZ,UAAU,EAAE,8BAA8B,CAAC,CAAC,CAAC,KAC1C,IAAI,CAAC;QACV,OAAO,CAAC,EAAE,aAAa,CAAC;KACzB;IAgDD,YAAY,iBAAwB,kBAAkB,mBAEpD;IAEF,8BAA8B,mBACZ,QAAQ,mBAAmB,CAAC,WACnC,kBAAkB,CAAC,SAAS,CAAC,mBAqEtC;IAyGF,oBAAoB,YAAa,MAAM,UAGrC;IAEF,UAAU,aAqBR;IAEF;;OAEG;IACH,sBAAsB,aAUpB;IA4ZF;;;;;;;;;OASG;IACH,2BAA2B,iIAoBzB;IAEF;;;;;OAKG;IACH,uBAAuB,oBACJ,MAAM,WACd,GAAG,KACX,QAAQ,MAAM,CAAC,CAehB;CACH"}
\ No newline at end of file
diff --git a/dist/bridge-controller.mjs b/dist/bridge-controller.mjs
index 94c03df57267d32046acebb79b50aebe02df96cb..47d248848f5e87742a6b2edd73bab35d96498061 100644
--- a/dist/bridge-controller.mjs
+++ b/dist/bridge-controller.mjs
@@ -30,7 +30,6 @@ import { UnifiedSwapBridgeEventName } from "./utils/metrics/constants.mjs";
 import { formatProviderLabel, getActionTypeFromQuoteRequest, getRequestParams, getSwapTypeFromQuote, isCustomSlippage, isHardwareWallet, toInputChangedPropertyKey, toInputChangedPropertyValue } from "./utils/metrics/properties.mjs";
 import { isValidQuoteRequest } from "./utils/quote.mjs";
 import { getFeeForTransactionRequest, getMinimumBalanceForRentExemptionRequest } from "./utils/snaps.mjs";
-import { FeatureId } from "./utils/validators.mjs";
 const metadata = {
     quoteRequest: {
         persist: false,
@@ -153,37 +152,6 @@ export class BridgeController extends StaticIntervalPollingController() {
                 });
             }
         };
-        /**
-         * Fetches quotes for specified request without updating the controller state
-         * This method does not start polling for quotes and does not emit UnifiedSwapBridge events
-         *
-         * @param quoteRequest - The parameters for quote requests to fetch
-         * @param abortSignal - The abort signal to cancel all the requests
-         * @param featureId - The feature ID that maps to quoteParam overrides from LD
-         * @returns A list of validated quotes
-         */
-        this.fetchQuotes = async (quoteRequest, abortSignal = null, featureId = null) => {
-            const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);
-            // If featureId is specified, retrieve the quoteRequestOverrides for that featureId
-            const quoteRequestOverrides = featureId
-                ? bridgeFeatureFlags.quoteRequestOverrides?.[featureId]
-                : undefined;
-            // If quoteRequestOverrides is specified, merge it with the quoteRequest
-            const baseQuotes = await fetchBridgeQuotes(quoteRequestOverrides
-                ? { ...quoteRequest, ...quoteRequestOverrides }
-                : quoteRequest, abortSignal, __classPrivateFieldGet(this, _BridgeController_clientId, "f"), __classPrivateFieldGet(this, _BridgeController_fetchFn, "f"), __classPrivateFieldGet(this, _BridgeController_config, "f").customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL);
-            const quotesWithL1GasFees = await __classPrivateFieldGet(this, _BridgeController_appendL1GasFees, "f").call(this, baseQuotes);
-            const quotesWithSolanaFees = await __classPrivateFieldGet(this, _BridgeController_appendSolanaFees, "f").call(this, baseQuotes);
-            const quotesWithFees = quotesWithL1GasFees ?? quotesWithSolanaFees ?? baseQuotes;
-            // Sort perps quotes by increasing estimated processing time (fastest first)
-            if (featureId === FeatureId.PERPS) {
-                return quotesWithFees.sort((a, b) => {
-                    return (a.estimatedProcessingTimeInSeconds -
-                        b.estimatedProcessingTimeInSeconds);
-                });
-            }
-            return quotesWithFees;
-        };
         _BridgeController_getExchangeRateSources.set(this, () => {
             return {
                 ...this.messagingSystem.call('MultichainAssetsRatesController:getState'),
@@ -292,6 +260,23 @@ export class BridgeController extends StaticIntervalPollingController() {
                 state.quoteRequest = updatedQuoteRequest;
                 state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;
             });
+            const fetchQuotes = async () => {
+                // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond
+                // eslint-disable-next-line @typescript-eslint/no-floating-promises
+                __classPrivateFieldGet(this, _BridgeController_setMinimumBalanceForRentExemptionInLamports, "f").call(this, updatedQuoteRequest.srcChainId);
+                const quotes = await fetchBridgeQuotes(updatedQuoteRequest, 
+                // AbortController is always defined by this line, because we assign it a few lines above,
+                // not sure why Jest thinks it's not
+                // Linters accurately say that it's defined
+                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+                __classPrivateFieldGet(this, _BridgeController_abortController, "f").signal, __classPrivateFieldGet(this, _BridgeController_clientId, "f"), __classPrivateFieldGet(this, _BridgeController_fetchFn, "f"), __classPrivateFieldGet(this, _BridgeController_config, "f").customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL);
+                const quotesWithL1GasFees = await __classPrivateFieldGet(this, _BridgeController_appendL1GasFees, "f").call(this, quotes);
+                const quotesWithSolanaFees = await __classPrivateFieldGet(this, _BridgeController_appendSolanaFees, "f").call(this, quotes);
+                this.update((state) => {
+                    state.quotes = quotesWithL1GasFees ?? quotesWithSolanaFees ?? quotes;
+                    state.quotesLoadingStatus = RequestStatus.FETCHED;
+                });
+            };
             try {
                 await __classPrivateFieldGet(this, _BridgeController_trace, "f").call(this, {
                     name: isCrossChain(updatedQuoteRequest.srcChainId, updatedQuoteRequest.destChainId)
@@ -301,21 +286,7 @@ export class BridgeController extends StaticIntervalPollingController() {
                         srcChainId: formatChainIdToCaip(updatedQuoteRequest.srcChainId),
                         destChainId: formatChainIdToCaip(updatedQuoteRequest.destChainId),
                     },
-                }, async () => {
-                    // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond
-                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
-                    __classPrivateFieldGet(this, _BridgeController_setMinimumBalanceForRentExemptionInLamports, "f").call(this, updatedQuoteRequest.srcChainId);
-                    const quotes = await this.fetchQuotes(updatedQuoteRequest, 
-                    // AbortController is always defined by this line, because we assign it a few lines above,
-                    // not sure why Jest thinks it's not
-                    // Linters accurately say that it's defined
-                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-                    __classPrivateFieldGet(this, _BridgeController_abortController, "f").signal);
-                    this.update((state) => {
-                        state.quotes = quotes;
-                        state.quotesLoadingStatus = RequestStatus.FETCHED;
-                    });
-                });
+                }, fetchQuotes);
             }
             catch (error) {
                 const isAbortError = error.name === 'AbortError';
@@ -605,7 +576,6 @@ export class BridgeController extends StaticIntervalPollingController() {
         this.messagingSystem.registerActionHandler(`${BRIDGE_CONTROLLER_NAME}:getBridgeERC20Allowance`, this.getBridgeERC20Allowance.bind(this));
         this.messagingSystem.registerActionHandler(`${BRIDGE_CONTROLLER_NAME}:trackUnifiedSwapBridgeEvent`, this.trackUnifiedSwapBridgeEvent.bind(this));
         this.messagingSystem.registerActionHandler(`${BRIDGE_CONTROLLER_NAME}:stopPollingForQuotes`, this.stopPollingForQuotes.bind(this));
-        this.messagingSystem.registerActionHandler(`${BRIDGE_CONTROLLER_NAME}:fetchQuotes`, this.fetchQuotes.bind(this));
     }
 }
 _BridgeController_abortController = new WeakMap(), _BridgeController_quotesFirstFetched = new WeakMap(), _BridgeController_clientId = new WeakMap(), _BridgeController_getLayer1GasFee = new WeakMap(), _BridgeController_fetchFn = new WeakMap(), _BridgeController_trackMetaMetricsFn = new WeakMap(), _BridgeController_trace = new WeakMap(), _BridgeController_config = new WeakMap(), _BridgeController_getExchangeRateSources = new WeakMap(), _BridgeController_fetchAssetExchangeRates = new WeakMap(), _BridgeController_hasSufficientBalance = new WeakMap(), _BridgeController_fetchBridgeQuotes = new WeakMap(), _BridgeController_appendL1GasFees = new WeakMap(), _BridgeController_setMinimumBalanceForRentExemptionInLamports = new WeakMap(), _BridgeController_appendSolanaFees = new WeakMap(), _BridgeController_getRequestParams = new WeakMap(), _BridgeController_getRequestMetadata = new WeakMap(), _BridgeController_getQuoteFetchData = new WeakMap(), _BridgeController_getEventProperties = new WeakMap(), _BridgeController_trackInputChangedEvents = new WeakMap(), _BridgeController_instances = new WeakSet(), _BridgeController_getMultichainSelectedAccount = function _BridgeController_getMultichainSelectedAccount() {
diff --git a/dist/bridge-controller.mjs.map b/dist/bridge-controller.mjs.map
index 5990295f81da1ba9ffae74090ed068b5f29f5165..5e7646a128c0ca440acab6b85c12a020294fdf6d 100644
--- a/dist/bridge-controller.mjs.map
+++ b/dist/bridge-controller.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"bridge-controller.mjs","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,QAAQ,EAAE,iCAAiC;AACpD,OAAO,EAAE,YAAY,EAAE,iCAAiC;AAGxD,OAAO,EAAE,QAAQ,EAAE,oCAAoC;AAEvD,OAAO,EAAE,+BAA+B,EAAE,qCAAqC;AAG/E,OAAO,EAAE,WAAW,EAAY,wBAAwB;AAExD,OAAO,EAEL,sBAAsB,EACtB,wBAAwB,EACxB,+BAA+B,EAC/B,+BAA+B,EAC/B,mBAAmB,EACpB,+BAA2B;AAC5B,OAAO,EAAE,SAAS,EAAE,+BAA2B;AAC/C,OAAO,EAAE,SAAS,EAAE,+BAA2B;AAC/C,OAAO,EAAE,gCAAgC,EAAE,wBAAoB;AAE/D,OAAO,EASL,aAAa,EACd,oBAAgB;AACjB,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,2BAAuB;AACtE,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AACvD,OAAO,EACL,+BAA+B,EAC/B,YAAY,EACZ,eAAe,EACf,QAAQ,EACT,2BAAuB;AACxB,OAAO,EACL,4BAA4B,EAC5B,mBAAmB,EACnB,kBAAkB,EACnB,oCAAgC;AACjC,OAAO,EAAE,qBAAqB,EAAE,kCAA8B;AAC9D,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,0BAAsB;AACpE,OAAO,EAAE,0BAA0B,EAAE,sCAAkC;AACvE,OAAO,EACL,mBAAmB,EACnB,6BAA6B,EAC7B,gBAAgB,EAChB,oBAAoB,EACpB,gBAAgB,EAChB,gBAAgB,EAChB,yBAAyB,EACzB,2BAA2B,EAC5B,uCAAmC;AAQpC,OAAO,EAAE,mBAAmB,EAAE,0BAAsB;AACpD,OAAO,EACL,2BAA2B,EAC3B,wCAAwC,EACzC,0BAAsB;AACvB,OAAO,EAAE,SAAS,EAAE,+BAA2B;AAE/C,MAAM,QAAQ,GAAyC;IACrD,YAAY,EAAE;QACZ,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,MAAM,EAAE;QACN,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,qBAAqB,EAAE;QACrB,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,iBAAiB,EAAE;QACjB,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,mBAAmB,EAAE;QACnB,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,eAAe,EAAE;QACf,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,kBAAkB,EAAE;QAClB,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,kBAAkB,EAAE;QAClB,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;IACD,wCAAwC,EAAE;QACxC,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB;CACF,CAAC;AAEF,MAAM,yBAAyB,GAAG,wBAAwB,CAAC;AAuB3D,MAAM,OAAO,gBAAiB,SAAQ,+BAA+B,EAIpE;IAyBC,YAAY,EACV,SAAS,EACT,KAAK,EACL,QAAQ,EACR,eAAe,EACf,OAAO,EACP,MAAM,EACN,kBAAkB,EAClB,OAAO,GAkBR;QACC,KAAK,CAAC;YACJ,IAAI,EAAE,sBAAsB;YAC5B,QAAQ;YACR,SAAS;YACT,KAAK,EAAE;gBACL,GAAG,+BAA+B,EAAE;gBACpC,GAAG,KAAK;aACT;SACF,CAAC,CAAC;;QA3DL,oDAA8C;QAE9C,uDAAwC;QAE/B,6CAAkB;QAElB,oDAAyE;QAEzE,4CAAwB;QAExB,uDAMC;QAED,0CAAsB;QAEtB,2CAEP;QAgFF,iBAAY,GAAG,KAAK,EAAE,YAAgC,EAAE,EAAE;YACxD,MAAM,uBAAA,IAAI,2CAAmB,MAAvB,IAAI,EAAoB,YAAY,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,mCAA8B,GAAG,KAAK,EACpC,cAA4C,EAC5C,OAAsC,EACtC,EAAE;YACF,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,uBAAA,IAAI,yCAAiB,EAAE,KAAK,CAAC,uBAAuB,CAAC,CAAC;YAEtD,uBAAA,IAAI,iDAAyB,MAA7B,IAAI,EAA0B,cAAc,CAAC,CAAC;YAE9C,MAAM,mBAAmB,GAAG;gBAC1B,GAAG,+BAA+B,CAAC,YAAY;gBAC/C,GAAG,cAAc;aAClB,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,KAAK,CAAC,YAAY,GAAG,mBAAmB,CAAC;gBACzC,KAAK,CAAC,MAAM,GAAG,+BAA+B,CAAC,MAAM,CAAC;gBACtD,KAAK,CAAC,iBAAiB;oBACrB,+BAA+B,CAAC,iBAAiB,CAAC;gBACpD,KAAK,CAAC,mBAAmB;oBACvB,+BAA+B,CAAC,mBAAmB,CAAC;gBACtD,KAAK,CAAC,eAAe,GAAG,+BAA+B,CAAC,eAAe,CAAC;gBACxE,KAAK,CAAC,kBAAkB;oBACtB,+BAA+B,CAAC,kBAAkB,CAAC;gBACrD,KAAK,CAAC,qBAAqB;oBACzB,+BAA+B,CAAC,qBAAqB,CAAC;gBACxD,mEAAmE;gBACnE,IACE,mBAAmB,CAAC,UAAU;oBAC9B,CAAC,eAAe,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAChD;oBACA,KAAK,CAAC,wCAAwC;wBAC5C,+BAA+B,CAAC,wCAAwC,CAAC;iBAC5E;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,uBAAA,IAAI,iDAAyB,MAA7B,IAAI,EAA0B,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CACvE,OAAO,CAAC,IAAI,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAC5D,CAAC;YAEF,IAAI,mBAAmB,CAAC,mBAAmB,CAAC,EAAE;gBAC5C,uBAAA,IAAI,wCAAuB,IAAI,CAAC,GAAG,EAAE,MAAA,CAAC;gBACtC,MAAM,cAAc,GAAG,uBAAA,IAAI,+EAA0B,MAA9B,IAAI,CAA4B,EAAE,aAAa,CAAC;gBAEvE,IAAI,eAAoC,CAAC;gBACzC,IAAI,eAAe,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE;oBACnD,mEAAmE;oBACnE,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC;iBAClD;qBAAM,IAAI,cAAc,EAAE,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE;oBACvD,yEAAyE;oBACzE,mIAAmI;oBACnI,eAAe,GAAG,IAAI,CAAC;iBACxB;qBAAM;oBACL,8DAA8D;oBAC9D,eAAe;wBACb,cAAc,CAAC,eAAe;4BAC9B,CAAC,CAAC,MAAM,uBAAA,IAAI,8CAAsB,MAA1B,IAAI,EAAuB,mBAAmB,CAAC,CAAC,CAAC;iBAC5D;gBAED,MAAM,eAAe,GAAG,uBAAA,IAAI,iFAA4B,MAAhC,IAAI,CAA8B,CAAC;gBAC3D,qEAAqE;gBACrE,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,IAAI,CAAC,YAAY,CAAC;oBAChB,eAAe;oBACf,mBAAmB,EAAE;wBACnB,GAAG,mBAAmB;wBACtB,eAAe;qBAChB;oBACD,OAAO;iBACR,CAAC,CAAC;aACJ;QACH,CAAC,CAAC;QAEF;;;;;;;;WAQG;QACH,gBAAW,GAAG,KAAK,EACjB,YAAiC,EACjC,cAAkC,IAAI,EACtC,YAA8B,IAAI,EACR,EAAE;YAC5B,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACvE,mFAAmF;YACnF,MAAM,qBAAqB,GAAG,SAAS;gBACrC,CAAC,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,CAAC,SAAS,CAAC;gBACvD,CAAC,CAAC,SAAS,CAAC;YAEd,wEAAwE;YACxE,MAAM,UAAU,GAAG,MAAM,iBAAiB,CACxC,qBAAqB;gBACnB,CAAC,CAAC,EAAE,GAAG,YAAY,EAAE,GAAG,qBAAqB,EAAE;gBAC/C,CAAC,CAAC,YAAY,EAChB,WAAW,EACX,uBAAA,IAAI,kCAAU,EACd,uBAAA,IAAI,iCAAS,EACb,uBAAA,IAAI,gCAAQ,CAAC,sBAAsB,IAAI,wBAAwB,CAChE,CAAC;YACF,MAAM,mBAAmB,GAAG,MAAM,uBAAA,IAAI,yCAAiB,MAArB,IAAI,EAAkB,UAAU,CAAC,CAAC;YACpE,MAAM,oBAAoB,GAAG,MAAM,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,EAAmB,UAAU,CAAC,CAAC;YACtE,MAAM,cAAc,GAClB,mBAAmB,IAAI,oBAAoB,IAAI,UAAU,CAAC;YAC5D,4EAA4E;YAC5E,IAAI,SAAS,KAAK,SAAS,CAAC,KAAK,EAAE;gBACjC,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBAClC,OAAO,CACL,CAAC,CAAC,gCAAgC;wBAClC,CAAC,CAAC,gCAAgC,CACnC,CAAC;gBACJ,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,cAAc,CAAC;QACxB,CAAC,CAAC;QAEO,mDAA0B,GAAG,EAAE;YACtC,OAAO;gBACL,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,0CAA0C,CAAC;gBACxE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iCAAiC,CAAC;gBAC/D,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,+BAA+B,CAAC;gBAC7D,GAAG,IAAI,CAAC,KAAK;aACd,CAAC;QACJ,CAAC,EAAC;QAEF;;;;;;;;;WASG;QACM,oDAA2B,KAAK,EAAE,EACzC,UAAU,EACV,eAAe,EACf,WAAW,EACX,gBAAgB,GACa,EAAE,EAAE;YACjC,MAAM,QAAQ,GAAuB,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;YACjD,MAAM,mBAAmB,GAAG,uBAAA,IAAI,gDAAwB,MAA5B,IAAI,CAA0B,CAAC;YAC3D,IACE,eAAe;gBACf,UAAU;gBACV,CAAC,gCAAgC,CAC/B,mBAAmB,EACnB,UAAU,EACV,eAAe,CAChB,EACD;gBACA,mBAAmB,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CACnE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CACtB,CAAC;aACH;YACD,IACE,gBAAgB;gBAChB,WAAW;gBACX,CAAC,gCAAgC,CAC/B,mBAAmB,EACnB,WAAW,EACX,gBAAgB,CACjB,EACD;gBACA,mBAAmB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CACrE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CACtB,CAAC;aACH;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACxC,iCAAiC,CAClC,CAAC,eAAe,CAAC;YAElB,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;gBACvB,OAAO;aACR;YAED,MAAM,eAAe,GAAG,MAAM,gBAAgB,CAAC;gBAC7C,QAAQ;gBACR,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAC/B,QAAQ,EAAE,uBAAA,IAAI,kCAAU;gBACxB,OAAO,EAAE,uBAAA,IAAI,iCAAS;aACvB,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,KAAK,CAAC,kBAAkB,GAAG;oBACzB,GAAG,KAAK,CAAC,kBAAkB;oBAC3B,GAAG,aAAa;iBACjB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,EAAC;QAEO,iDAAwB,KAAK,EACpC,YAAiC,EACjC,EAAE;YACF,MAAM,aAAa,GAAG,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,CAAgC,EAAE,OAAO,CAAC;YACpE,MAAM,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YACpE,MAAM,QAAQ,GAAG,uBAAA,IAAI,+EAA0B,MAA9B,IAAI,CAA4B,EAAE,QAAQ,CAAC;YAC5D,MAAM,yBAAyB,GAAG,4BAA4B,CAC5D,YAAY,CAAC,eAAe,CAC7B,CAAC;YAEF,OAAO,CACL,QAAQ;gBACR,aAAa;gBACb,yBAAyB;gBACzB,YAAY,CAAC,cAAc;gBAC3B,eAAe;gBACf,CAAC,MAAM,oBAAoB,CACzB,QAAQ,EACR,aAAa,EACb,yBAAyB,EACzB,YAAY,CAAC,cAAc,EAC3B,eAAe,CAChB,CAAC,CACH,CAAC;QACJ,CAAC,EAAC;QAEF,yBAAoB,GAAG,CAAC,MAAe,EAAE,EAAE;YACzC,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,uBAAA,IAAI,yCAAiB,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC,CAAC;QAEF,eAAU,GAAG,GAAG,EAAE;YAChB,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,CAAC;YAErD,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,gGAAgG;gBAChG,KAAK,CAAC,YAAY,GAAG,+BAA+B,CAAC,YAAY,CAAC;gBAClE,KAAK,CAAC,qBAAqB;oBACzB,+BAA+B,CAAC,qBAAqB,CAAC;gBACxD,KAAK,CAAC,MAAM,GAAG,+BAA+B,CAAC,MAAM,CAAC;gBACtD,KAAK,CAAC,iBAAiB;oBACrB,+BAA+B,CAAC,iBAAiB,CAAC;gBACpD,KAAK,CAAC,mBAAmB;oBACvB,+BAA+B,CAAC,mBAAmB,CAAC;gBACtD,KAAK,CAAC,eAAe,GAAG,+BAA+B,CAAC,eAAe,CAAC;gBACxE,KAAK,CAAC,kBAAkB;oBACtB,+BAA+B,CAAC,kBAAkB,CAAC;gBACrD,KAAK,CAAC,kBAAkB;oBACtB,+BAA+B,CAAC,kBAAkB,CAAC;gBACrD,KAAK,CAAC,wCAAwC;oBAC5C,+BAA+B,CAAC,wCAAwC,CAAC;YAC7E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;WAEG;QACH,2BAAsB,GAAG,GAAG,EAAE;YAC5B,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YACvB,MAAM,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC;YAC1C,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAEvE,MAAM,mBAAmB,GAAG,UAAU;gBACpC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,EAAE,WAAW;gBACzE,CAAC,CAAC,SAAS,CAAC;YACd,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,WAAW,CAAC;YAC1D,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,IAAI,kBAAkB,CAAC,CAAC;QACpE,CAAC,CAAC;QAEO,8CAAqB,KAAK,EAAE,EACnC,eAAe,EAAE,gBAAgB,EACjC,mBAAmB,EACnB,OAAO,GACY,EAAE,EAAE;YACvB,uBAAA,IAAI,yCAAiB,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,uBAAA,IAAI,qCAAoB,IAAI,eAAe,EAAE,MAAA,CAAC;YAE9C,IAAI,CAAC,2BAA2B,CAC9B,0BAA0B,CAAC,eAAe,EAC1C,OAAO,CACR,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,KAAK,CAAC,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC;gBAClD,KAAK,CAAC,YAAY,GAAG,mBAAmB,CAAC;gBACzC,KAAK,CAAC,eAAe,GAAG,+BAA+B,CAAC,eAAe,CAAC;YAC1E,CAAC,CAAC,CAAC;YAEH,IAAI;gBACF,MAAM,uBAAA,IAAI,+BAAO,MAAX,IAAI,EACR;oBACE,IAAI,EAAE,YAAY,CAChB,mBAAmB,CAAC,UAAU,EAC9B,mBAAmB,CAAC,WAAW,CAChC;wBACC,CAAC,CAAC,SAAS,CAAC,mBAAmB;wBAC/B,CAAC,CAAC,SAAS,CAAC,iBAAiB;oBAC/B,IAAI,EAAE;wBACJ,UAAU,EAAE,mBAAmB,CAAC,mBAAmB,CAAC,UAAU,CAAC;wBAC/D,WAAW,EAAE,mBAAmB,CAAC,mBAAmB,CAAC,WAAW,CAAC;qBAClE;iBACF,EACD,KAAK,IAAI,EAAE;oBACT,oGAAoG;oBACpG,mEAAmE;oBACnE,uBAAA,IAAI,qEAA6C,MAAjD,IAAI,EACF,mBAAmB,CAAC,UAAU,CAC/B,CAAC;oBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CACnC,mBAAmB;oBACnB,0FAA0F;oBAC1F,oCAAoC;oBACpC,2CAA2C;oBAC3C,oEAAoE;oBACpE,uBAAA,IAAI,yCAAkB,CAAC,MAAqB,CAC7C,CAAC;oBAEF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;wBACpB,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;wBACtB,KAAK,CAAC,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC;oBACpD,CAAC,CAAC,CAAC;gBACL,CAAC,CACF,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,YAAY,GAAI,KAAe,CAAC,IAAI,KAAK,YAAY,CAAC;gBAC5D,MAAM,mBAAmB,GAAG,KAAK,KAAK,yBAAyB,CAAC;gBAChE,IAAI,mBAAmB,IAAI,YAAY,EAAE;oBACvC,uDAAuD;oBACvD,OAAO;iBACR;gBAED,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;oBACpB,KAAK,CAAC,eAAe;wBACnB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;oBAC3D,KAAK,CAAC,mBAAmB,GAAG,aAAa,CAAC,KAAK,CAAC;oBAChD,KAAK,CAAC,MAAM,GAAG,+BAA+B,CAAC,MAAM,CAAC;gBACxD,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,2BAA2B,CAC9B,0BAA0B,CAAC,UAAU,EACrC,OAAO,CACR,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;aACrD;YACD,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACvE,MAAM,EAAE,eAAe,EAAE,GAAG,kBAAkB,CAAC;YAE/C,mEAAmE;YACnE,IACE,mBAAmB,CAAC,eAAe;gBACnC,CAAC,CAAC,mBAAmB,CAAC,eAAe;oBACnC,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,eAAe,CAAC,EACnD;gBACA,IAAI,CAAC,cAAc,EAAE,CAAC;aACvB;YAED,8BAA8B;YAC9B,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,KAAK,CAAC,qBAAqB;oBACzB,KAAK,CAAC,kBAAkB,KAAK,CAAC,IAAI,uBAAA,IAAI,4CAAoB;wBACxD,CAAC,CAAC,iBAAiB,GAAG,uBAAA,IAAI,4CAAoB;wBAC9C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC;gBACvC,KAAK,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;gBAC5C,KAAK,CAAC,kBAAkB,IAAI,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,EAAC;QAEO,4CAAmB,KAAK,EAC/B,MAAuB,EAC6B,EAAE;YACtD,oEAAoE;YACpE,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;gBACjD,MAAM,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBACtD,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC;qBACzC,GAAG,CAAC,mBAAmB,CAAC;qBACxB,QAAQ,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YAEH,wEAAwE;YACxE,IAAI,gBAAgB,EAAE;gBACpB,OAAO,SAAS,CAAC;aAClB;YAED,MAAM,gBAAgB,GAAG,OAAO,CAAC,UAAU,CACzC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,EAAE;gBACjC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,aAAa,CAAC;gBACjD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAE9C,MAAM,WAAW,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,CAAC;oBACvC,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,EAAE,EAAE,MAAM,CAAC,EAAE;oBACb,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE;iBACtC,CAAC,CAAC;gBACH,MAAM,iBAAiB,GAAG,QAAQ;oBAChC,CAAC,CAAC,MAAM,uBAAA,IAAI,yCAAiB,MAArB,IAAI,EAAkB;wBAC1B,iBAAiB,EAAE,WAAW,CAAC,QAAQ,CAAC;wBACxC,OAAO;qBACR,CAAC;oBACJ,CAAC,CAAC,KAAK,CAAC;gBACV,MAAM,cAAc,GAAG,MAAM,uBAAA,IAAI,yCAAiB,MAArB,IAAI,EAAkB;oBACjD,iBAAiB,EAAE,WAAW,CAAC,KAAK,CAAC;oBACrC,OAAO;iBACR,CAAC,CAAC;gBAEH,IAAI,iBAAiB,KAAK,SAAS,IAAI,cAAc,KAAK,SAAS,EAAE;oBACnE,OAAO,SAAS,CAAC;iBAClB;gBAED,OAAO;oBACL,GAAG,aAAa;oBAChB,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB,EAAE,cAAc,CAAC;iBAC/D,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;YAEF,MAAM,mBAAmB,GAAG,CAAC,MAAM,gBAAgB,CAAC,CAAC,MAAM,CAEzD,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBAChB,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,KAAK,EAAE;oBACjD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACxB;qBAAM,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;oBACvC,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;iBACzE;gBACD,OAAO,GAAG,CAAC;YACb,CAAC,EAAE,EAAE,CAAC,CAAC;YAEP,OAAO,mBAAmB,CAAC;QAC7B,CAAC,EAAC;QAEO,wEAA+C,CACtD,UAA6C,EAClB,EAAE;YAC7B,MAAM,eAAe,GAAG,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,CAAgC,CAAC;YAE7D,OAAO,eAAe,CAAC,UAAU,CAAC,IAAI,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE;gBACvE,CAAC,CAAC,IAAI,CAAC,eAAe;qBACjB,IAAI,CACH,8BAA8B,EAC9B,wCAAwC,CACtC,eAAe,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAClC,CACF,CAAC,iDAAiD;qBAClD,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;oBACf,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;wBACpB,KAAK,CAAC,wCAAwC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;oBAClE,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC;qBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;oBACf,OAAO,CAAC,KAAK,CACX,kDAAkD,EAClD,KAAK,CACN,CAAC;oBACF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;wBACpB,KAAK,CAAC,wCAAwC;4BAC5C,+BAA+B,CAAC,wCAAwC,CAAC;oBAC7E,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC;gBACN,CAAC,CAAC,SAAS,CAAC;QAChB,CAAC,EAAC;QAEO,6CAAoB,KAAK,EAChC,MAAuB,EAC8B,EAAE;YACvD,wDAAwD;YACxD,IACE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,EACxE;gBACA,OAAO,SAAS,CAAC;aAClB;YAED,MAAM,iBAAiB,GAAG,OAAO,CAAC,UAAU,CAC1C,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,EAAE;gBACjC,MAAM,EAAE,KAAK,EAAE,GAAG,aAAa,CAAC;gBAChC,MAAM,eAAe,GAAG,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,CAAgC,CAAC;gBAE7D,IAAI,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBACpE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CACtD,8BAA8B,EAC9B,2BAA2B,CACzB,eAAe,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EACjC,KAAK,CACN,CACF,CAAsB,CAAC;oBAExB,OAAO;wBACL,GAAG,aAAa;wBAChB,oBAAoB,EAAE,IAAI;qBAC3B,CAAC;iBACH;gBACD,OAAO,aAAa,CAAC;YACvB,CAAC,CAAC,CACH,CAAC;YAEF,MAAM,oBAAoB,GAAG,CAAC,MAAM,iBAAiB,CAAC,CAAC,MAAM,CAE3D,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBAChB,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,KAAK,EAAE;oBACjD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACxB;qBAAM,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;oBACvC,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;iBACzE;gBACD,OAAO,GAAG,CAAC;YACb,CAAC,EAAE,EAAE,CAAC,CAAC;YAEP,OAAO,oBAAoB,CAAC;QAC9B,CAAC,EAAC;QAyBO,6CAAoB,GAG3B,EAAE;YACF,MAAM,cAAc,GAAG,mBAAmB,CACxC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU;gBAChC,uBAAA,IAAI,+EAA0B,MAA9B,IAAI,CAA4B,CAAC,aAAa,CAAC,OAAO,CACzD,CAAC;YACF,OAAO,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QACnE,CAAC,EAAC;QAEO,+CAAsB,GAG7B,EAAE;YACF,OAAO;gBACL,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ;gBAChD,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;gBACxD,kBAAkB,EAAE,gBAAgB,CAClC,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,CAAgC,CACrC;gBACD,eAAe,EAAE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC;aACpE,CAAC;QACJ,CAAC,EAAC;QAEO,8CAAqB,GAG5B,EAAE;YACF,OAAO;gBACL,UAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,eAAe;gBACpD,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;gBACtC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAC/C,mBAAmB,CAAC,KAAK,CAAC,CAC3B;gBACD,4BAA4B,EAAE,IAAI,CAAC,KAAK,CAAC,qBAAqB,IAAI,CAAC;aACpE,CAAC;QACJ,CAAC,EAAC;QAEO,+CAAsB,CAI7B,SAAY,EACZ,oBAAgE,EAC7B,EAAE;YACrC,MAAM,cAAc,GAAG;gBACrB,WAAW,EAAE,6BAA6B,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;gBACnE,GAAG,oBAAoB;aACxB,CAAC;YACF,QAAQ,SAAS,EAAE;gBACjB,KAAK,0BAA0B,CAAC,aAAa,CAAC;gBAC9C,KAAK,0BAA0B,CAAC,UAAU;oBACxC,OAAO;wBACL,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,cAAc;qBAClB,CAAC;gBACJ,KAAK,0BAA0B,CAAC,cAAc;oBAC5C,OAAO;wBACL,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,CAAsB;wBAC7B,GAAG,uBAAA,IAAI,2CAAmB,MAAvB,IAAI,CAAqB;wBAC5B,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB;wBAC5C,GAAG,cAAc;qBAClB,CAAC;gBACJ,KAAK,0BAA0B,CAAC,eAAe;oBAC7C,OAAO;wBACL,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,CAAsB;wBAC7B,oBAAoB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,eAAe;wBAC9D,GAAG,cAAc;qBAClB,CAAC;gBACJ,KAAK,0BAA0B,CAAC,UAAU;oBACxC,OAAO;wBACL,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,CAAsB;wBAC7B,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe;wBACzC,oBAAoB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,eAAe;wBAC9D,GAAG,cAAc;qBAClB,CAAC;gBACJ,KAAK,0BAA0B,CAAC,eAAe,CAAC;gBAChD,KAAK,0BAA0B,CAAC,eAAe,CAAC;gBAChD,KAAK,0BAA0B,CAAC,aAAa;oBAC3C,OAAO;wBACL,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,CAAsB;wBAC7B,GAAG,uBAAA,IAAI,2CAAmB,MAAvB,IAAI,CAAqB;wBAC5B,GAAG,cAAc;qBAClB,CAAC;gBACJ,KAAK,0BAA0B,CAAC,sBAAsB;oBACpD,OAAO;wBACL,GAAG,cAAc;wBACjB,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,CAAsB;qBAC9B,CAAC;gBACJ,KAAK,0BAA0B,CAAC,SAAS,CAAC;gBAC1C,KAAK,0BAA0B,CAAC,MAAM,CAAC,CAAC;oBACtC,8EAA8E;oBAC9E,OAAO;wBACL,GAAG,cAAc;wBACjB,GAAG,uBAAA,IAAI,0CAAkB,MAAtB,IAAI,CAAoB;wBAC3B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,CAAsB;wBAC7B,GAAG,uBAAA,IAAI,2CAAmB,MAAvB,IAAI,CAAqB;wBAC5B,GAAG,oBAAoB;qBACxB,CAAC;iBACH;gBACD,gDAAgD;gBAChD,KAAK,0BAA0B,CAAC,SAAS;oBACvC,OAAO,oBAAoB,CAAC;gBAC9B,KAAK,0BAA0B,CAAC,YAAY,CAAC;gBAC7C;oBACE,OAAO,cAAc,CAAC;aACzB;QACH,CAAC,EAAC;QAEO,oDAA2B,CAClC,cAA4C,EAC5C,EAAE;YACF,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;gBACtD,MAAM,QAAQ,GAAG,yBAAyB,CAAC,GAAyB,CAAC,CAAC;gBACtE,MAAM,UAAU,GACd,2BAA2B,CAAC,GAAyB,CAAC,EAAE,CACtD,cAAc,CACf,CAAC;gBACJ,IACE,QAAQ;oBACR,UAAU,KAAK,SAAS;oBACxB,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAgC,CAAC,EACnE;oBACA,IAAI,CAAC,2BAA2B,CAC9B,0BAA0B,CAAC,YAAY,EACvC;wBACE,KAAK,EAAE,QAAQ;wBACf,KAAK,EAAE,UAAU;qBAClB,CACF,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;QACL,CAAC,EAAC;QAEF;;;;;;;;;WASG;QACH,gCAA2B,GAAG,CAI5B,SAAY,EACZ,oBAAgE,EAChE,EAAE;YACF,IAAI;gBACF,MAAM,0BAA0B,GAAG,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,EACrC,SAAS,EACT,oBAAoB,CACrB,CAAC;gBAEF,uBAAA,IAAI,4CAAoB,MAAxB,IAAI,EAAqB,SAAS,EAAE,0BAA0B,CAAC,CAAC;aACjE;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CACX,oDAAoD,EACpD,KAAK,CACN,CAAC;aACH;QACH,CAAC,CAAC;QAEF;;;;;WAKG;QACH,4BAAuB,GAAG,KAAK,EAC7B,eAAuB,EACvB,OAAY,EACK,EAAE;YACnB,MAAM,QAAQ,GAAG,uBAAA,IAAI,+EAA0B,MAA9B,IAAI,CAA4B,EAAE,QAAQ,CAAC;YAC5D,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACtC;YAED,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;YAClD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,eAAe,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;YACzE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GAC9B,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,CAAgC,IAAI,EAAE,CAAC;YAC7C,MAAM,SAAS,GAAc,MAAM,QAAQ,CAAC,SAAS,CACnD,aAAa,EACb,+BAA+B,CAAC,OAAO,CAAC,CACzC,CAAC;YACF,OAAO,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC9B,CAAC,CAAC;QAhwBA,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QAE5C,uBAAA,IAAI,qCAAoB,IAAI,eAAe,EAAE,MAAA,CAAC;QAC9C,uBAAA,IAAI,qCAAoB,eAAe,MAAA,CAAC;QACxC,uBAAA,IAAI,8BAAa,QAAQ,MAAA,CAAC;QAC1B,uBAAA,IAAI,6BAAY,OAAO,MAAA,CAAC;QACxB,uBAAA,IAAI,wCAAuB,kBAAkB,MAAA,CAAC;QAC9C,uBAAA,IAAI,4BAAW,MAAM,IAAI,EAAE,MAAA,CAAC;QAC5B,uBAAA,IAAI,2BAAU,OAAO,IAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAmB,MAAA,CAAC;QAEvE,2BAA2B;QAC3B,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,yBAAyB,EAClD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CACvC,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,iCAAiC,EAC1D,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAC/C,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,aAAa,EACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAC3B,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,0BAA0B,EACnD,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CACxC,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,8BAA8B,EACvD,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAC5C,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,uBAAuB,EAChD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CACrC,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,GAAG,sBAAsB,cAAc,EACvC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAC5B,CAAC;IACJ,CAAC;CA0tBF;;IA3NG,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAC9B,iDAAiD,CAClD,CAAC;AACJ,CAAC;IAGC,MAAM,EAAE,uBAAuB,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC3D,4BAA4B,CAC7B,CAAC;IACF,sEAAsE;IACtE,OAAO,uBAAuB,CAAC;AACjC,CAAC;IAGC,MAAM,uBAAuB,GAAG,uBAAA,IAAI,iFAA4B,MAAhC,IAAI,CAA8B,CAAC;IACnE,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC7C,wCAAwC,EACxC,uBAAuB,CACxB,CAAC;IACF,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { StateMetadata } from '@metamask/base-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { TransactionController } from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  type BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_PROD_API_BASE_URL,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  REFRESH_INTERVAL_MS,\n} from './constants/bridge';\nimport { CHAIN_IDS } from './constants/chains';\nimport { TraceName } from './constants/traces';\nimport { selectIsAssetExchangeRateInState } from './selectors';\nimport type { QuoteRequest } from './types';\nimport {\n  type L1GasFees,\n  type GenericQuoteRequest,\n  type SolanaFees,\n  type QuoteResponse,\n  type TxData,\n  type BridgeControllerState,\n  type BridgeControllerMessenger,\n  type FetchFunction,\n  RequestStatus,\n} from './types';\nimport { getAssetIdsForToken, toExchangeRates } from './utils/assets';\nimport { hasSufficientBalance } from './utils/balance';\nimport {\n  getDefaultBridgeControllerState,\n  isCrossChain,\n  isSolanaChainId,\n  sumHexes,\n} from './utils/bridge';\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { getBridgeFeatureFlags } from './utils/feature-flags';\nimport { fetchAssetPrices, fetchBridgeQuotes } from './utils/fetch';\nimport { UnifiedSwapBridgeEventName } from './utils/metrics/constants';\nimport {\n  formatProviderLabel,\n  getActionTypeFromQuoteRequest,\n  getRequestParams,\n  getSwapTypeFromQuote,\n  isCustomSlippage,\n  isHardwareWallet,\n  toInputChangedPropertyKey,\n  toInputChangedPropertyValue,\n} from './utils/metrics/properties';\nimport type {\n  QuoteFetchData,\n  RequestMetadata,\n  RequestParams,\n  RequiredEventContextFromClient,\n} from './utils/metrics/types';\nimport { type CrossChainSwapsEventProperties } from './utils/metrics/types';\nimport { isValidQuoteRequest } from './utils/quote';\nimport {\n  getFeeForTransactionRequest,\n  getMinimumBalanceForRentExemptionRequest,\n} from './utils/snaps';\nimport { FeatureId } from './utils/validators';\n\nconst metadata: StateMetadata<BridgeControllerState> = {\n  quoteRequest: {\n    persist: false,\n    anonymous: false,\n  },\n  quotes: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesInitialLoadTime: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLastFetched: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLoadingStatus: {\n    persist: false,\n    anonymous: false,\n  },\n  quoteFetchError: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesRefreshCount: {\n    persist: false,\n    anonymous: false,\n  },\n  assetExchangeRates: {\n    persist: false,\n    anonymous: false,\n  },\n  minimumBalanceForRentExemptionInLamports: {\n    persist: false,\n    anonymous: false,\n  },\n};\n\nconst RESET_STATE_ABORT_MESSAGE = 'Reset controller state';\n\n/**\n * The input to start polling for the {@link BridgeController}\n *\n * @param networkClientId - The network client ID of the selected network\n * @param updatedQuoteRequest - The updated quote request\n * @param context - The context contains properties that can't be populated by the\n * controller and need to be provided by the client for analytics\n */\ntype BridgePollingInput = {\n  networkClientId: NetworkClientId;\n  updatedQuoteRequest: GenericQuoteRequest;\n  context: Pick<\n    RequiredEventContextFromClient,\n    UnifiedSwapBridgeEventName.QuoteError\n  >[UnifiedSwapBridgeEventName.QuoteError] &\n    Pick<\n      RequiredEventContextFromClient,\n      UnifiedSwapBridgeEventName.QuotesRequested\n    >[UnifiedSwapBridgeEventName.QuotesRequested];\n};\n\nexport class BridgeController extends StaticIntervalPollingController<BridgePollingInput>()<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState,\n  BridgeControllerMessenger\n> {\n  #abortController: AbortController | undefined;\n\n  #quotesFirstFetched: number | undefined;\n\n  readonly #clientId: string;\n\n  readonly #getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #trackMetaMetricsFn: <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    properties: CrossChainSwapsEventProperties<T>,\n  ) => void;\n\n  readonly #trace: TraceCallback;\n\n  readonly #config: {\n    customBridgeApiBaseUrl?: string;\n  };\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    getLayer1GasFee,\n    fetchFn,\n    config,\n    trackMetaMetricsFn,\n    traceFn,\n  }: {\n    messenger: BridgeControllerMessenger;\n    state?: Partial<BridgeControllerState>;\n    clientId: BridgeClientId;\n    getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n    fetchFn: FetchFunction;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    trackMetaMetricsFn: <\n      T extends\n        (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n    >(\n      eventName: T,\n      properties: CrossChainSwapsEventProperties<T>,\n    ) => void;\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultBridgeControllerState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.#abortController = new AbortController();\n    this.#getLayer1GasFee = getLayer1GasFee;\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#trackMetaMetricsFn = trackMetaMetricsFn;\n    this.#config = config ?? {};\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:setChainIntervalLength`,\n      this.setChainIntervalLength.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:updateBridgeQuoteRequestParams`,\n      this.updateBridgeQuoteRequestParams.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:getBridgeERC20Allowance`,\n      this.getBridgeERC20Allowance.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:trackUnifiedSwapBridgeEvent`,\n      this.trackUnifiedSwapBridgeEvent.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:stopPollingForQuotes`,\n      this.stopPollingForQuotes.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:fetchQuotes`,\n      this.fetchQuotes.bind(this),\n    );\n  }\n\n  _executePoll = async (pollingInput: BridgePollingInput) => {\n    await this.#fetchBridgeQuotes(pollingInput);\n  };\n\n  updateBridgeQuoteRequestParams = async (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n    context: BridgePollingInput['context'],\n  ) => {\n    this.stopAllPolling();\n    this.#abortController?.abort('Quote request updated');\n\n    this.#trackInputChangedEvents(paramsToUpdate);\n\n    const updatedQuoteRequest = {\n      ...DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest,\n      ...paramsToUpdate,\n    };\n\n    this.update((state) => {\n      state.quoteRequest = updatedQuoteRequest;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      // Reset required minimum balance if the source chain is not Solana\n      if (\n        updatedQuoteRequest.srcChainId &&\n        !isSolanaChainId(updatedQuoteRequest.srcChainId)\n      ) {\n        state.minimumBalanceForRentExemptionInLamports =\n          DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n      }\n    });\n\n    await this.#fetchAssetExchangeRates(updatedQuoteRequest).catch((error) =>\n      console.warn('Failed to fetch asset exchange rates', error),\n    );\n\n    if (isValidQuoteRequest(updatedQuoteRequest)) {\n      this.#quotesFirstFetched = Date.now();\n      const providerConfig = this.#getSelectedNetworkClient()?.configuration;\n\n      let insufficientBal: boolean | undefined;\n      if (isSolanaChainId(updatedQuoteRequest.srcChainId)) {\n        // If the source chain is not an EVM network, use value from params\n        insufficientBal = paramsToUpdate.insufficientBal;\n      } else if (providerConfig?.rpcUrl?.includes('tenderly')) {\n        // If the rpcUrl is a tenderly fork (e2e tests), set insufficientBal=true\n        // The bridge-api filters out quotes if the balance on mainnet is insufficient so this override allows quotes to always be returned\n        insufficientBal = true;\n      } else {\n        // Otherwise query the src token balance from the RPC provider\n        insufficientBal =\n          paramsToUpdate.insufficientBal ??\n          !(await this.#hasSufficientBalance(updatedQuoteRequest));\n      }\n\n      const networkClientId = this.#getSelectedNetworkClientId();\n      // Set refresh rate based on the source chain before starting polling\n      this.setChainIntervalLength();\n      this.startPolling({\n        networkClientId,\n        updatedQuoteRequest: {\n          ...updatedQuoteRequest,\n          insufficientBal,\n        },\n        context,\n      });\n    }\n  };\n\n  /**\n   * Fetches quotes for specified request without updating the controller state\n   * This method does not start polling for quotes and does not emit UnifiedSwapBridge events\n   *\n   * @param quoteRequest - The parameters for quote requests to fetch\n   * @param abortSignal - The abort signal to cancel all the requests\n   * @param featureId - The feature ID that maps to quoteParam overrides from LD\n   * @returns A list of validated quotes\n   */\n  fetchQuotes = async (\n    quoteRequest: GenericQuoteRequest,\n    abortSignal: AbortSignal | null = null,\n    featureId: FeatureId | null = null,\n  ): Promise<QuoteResponse[]> => {\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n    // If featureId is specified, retrieve the quoteRequestOverrides for that featureId\n    const quoteRequestOverrides = featureId\n      ? bridgeFeatureFlags.quoteRequestOverrides?.[featureId]\n      : undefined;\n\n    // If quoteRequestOverrides is specified, merge it with the quoteRequest\n    const baseQuotes = await fetchBridgeQuotes(\n      quoteRequestOverrides\n        ? { ...quoteRequest, ...quoteRequestOverrides }\n        : quoteRequest,\n      abortSignal,\n      this.#clientId,\n      this.#fetchFn,\n      this.#config.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n    );\n    const quotesWithL1GasFees = await this.#appendL1GasFees(baseQuotes);\n    const quotesWithSolanaFees = await this.#appendSolanaFees(baseQuotes);\n    const quotesWithFees =\n      quotesWithL1GasFees ?? quotesWithSolanaFees ?? baseQuotes;\n    // Sort perps quotes by increasing estimated processing time (fastest first)\n    if (featureId === FeatureId.PERPS) {\n      return quotesWithFees.sort((a, b) => {\n        return (\n          a.estimatedProcessingTimeInSeconds -\n          b.estimatedProcessingTimeInSeconds\n        );\n      });\n    }\n    return quotesWithFees;\n  };\n\n  readonly #getExchangeRateSources = () => {\n    return {\n      ...this.messagingSystem.call('MultichainAssetsRatesController:getState'),\n      ...this.messagingSystem.call('CurrencyRateController:getState'),\n      ...this.messagingSystem.call('TokenRatesController:getState'),\n      ...this.state,\n    };\n  };\n\n  /**\n   * Fetches the exchange rates for the assets in the quote request if they are not already in the state\n   * In addition to the selected tokens, this also fetches the native asset for the source and destination chains\n   *\n   * @param quoteRequest - The quote request\n   * @param quoteRequest.srcChainId - The source chain ID\n   * @param quoteRequest.srcTokenAddress - The source token address\n   * @param quoteRequest.destChainId - The destination chain ID\n   * @param quoteRequest.destTokenAddress - The destination token address\n   */\n  readonly #fetchAssetExchangeRates = async ({\n    srcChainId,\n    srcTokenAddress,\n    destChainId,\n    destTokenAddress,\n  }: Partial<GenericQuoteRequest>) => {\n    const assetIds: Set<CaipAssetType> = new Set([]);\n    const exchangeRateSources = this.#getExchangeRateSources();\n    if (\n      srcTokenAddress &&\n      srcChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        srcChainId,\n        srcTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(srcTokenAddress, srcChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n    if (\n      destTokenAddress &&\n      destChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        destChainId,\n        destTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(destTokenAddress, destChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n\n    const currency = this.messagingSystem.call(\n      'CurrencyRateController:getState',\n    ).currentCurrency;\n\n    if (assetIds.size === 0) {\n      return;\n    }\n\n    const pricesByAssetId = await fetchAssetPrices({\n      assetIds,\n      currencies: new Set([currency]),\n      clientId: this.#clientId,\n      fetchFn: this.#fetchFn,\n    });\n    const exchangeRates = toExchangeRates(currency, pricesByAssetId);\n    this.update((state) => {\n      state.assetExchangeRates = {\n        ...state.assetExchangeRates,\n        ...exchangeRates,\n      };\n    });\n  };\n\n  readonly #hasSufficientBalance = async (\n    quoteRequest: GenericQuoteRequest,\n  ) => {\n    const walletAddress = this.#getMultichainSelectedAccount()?.address;\n    const srcChainIdInHex = formatChainIdToHex(quoteRequest.srcChainId);\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    const normalizedSrcTokenAddress = formatAddressToCaipReference(\n      quoteRequest.srcTokenAddress,\n    );\n\n    return (\n      provider &&\n      walletAddress &&\n      normalizedSrcTokenAddress &&\n      quoteRequest.srcTokenAmount &&\n      srcChainIdInHex &&\n      (await hasSufficientBalance(\n        provider,\n        walletAddress,\n        normalizedSrcTokenAddress,\n        quoteRequest.srcTokenAmount,\n        srcChainIdInHex,\n      ))\n    );\n  };\n\n  stopPollingForQuotes = (reason?: string) => {\n    this.stopAllPolling();\n    this.#abortController?.abort(reason);\n  };\n\n  resetState = () => {\n    this.stopPollingForQuotes(RESET_STATE_ABORT_MESSAGE);\n\n    this.update((state) => {\n      // Cannot do direct assignment to state, i.e. state = {... }, need to manually assign each field\n      state.quoteRequest = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.assetExchangeRates =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.assetExchangeRates;\n      state.minimumBalanceForRentExemptionInLamports =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n    });\n  };\n\n  /**\n   * Sets the interval length based on the source chain\n   */\n  setChainIntervalLength = () => {\n    const { state } = this;\n    const { srcChainId } = state.quoteRequest;\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n\n    const refreshRateOverride = srcChainId\n      ? bridgeFeatureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : undefined;\n    const defaultRefreshRate = bridgeFeatureFlags.refreshRate;\n    this.setIntervalLength(refreshRateOverride ?? defaultRefreshRate);\n  };\n\n  readonly #fetchBridgeQuotes = async ({\n    networkClientId: _networkClientId,\n    updatedQuoteRequest,\n    context,\n  }: BridgePollingInput) => {\n    this.#abortController?.abort('New quote request');\n    this.#abortController = new AbortController();\n\n    this.trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.QuotesRequested,\n      context,\n    );\n    this.update((state) => {\n      state.quotesLoadingStatus = RequestStatus.LOADING;\n      state.quoteRequest = updatedQuoteRequest;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n    });\n\n    try {\n      await this.#trace(\n        {\n          name: isCrossChain(\n            updatedQuoteRequest.srcChainId,\n            updatedQuoteRequest.destChainId,\n          )\n            ? TraceName.BridgeQuotesFetched\n            : TraceName.SwapQuotesFetched,\n          data: {\n            srcChainId: formatChainIdToCaip(updatedQuoteRequest.srcChainId),\n            destChainId: formatChainIdToCaip(updatedQuoteRequest.destChainId),\n          },\n        },\n        async () => {\n          // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#setMinimumBalanceForRentExemptionInLamports(\n            updatedQuoteRequest.srcChainId,\n          );\n          const quotes = await this.fetchQuotes(\n            updatedQuoteRequest,\n            // AbortController is always defined by this line, because we assign it a few lines above,\n            // not sure why Jest thinks it's not\n            // Linters accurately say that it's defined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.#abortController!.signal as AbortSignal,\n          );\n\n          this.update((state) => {\n            state.quotes = quotes;\n            state.quotesLoadingStatus = RequestStatus.FETCHED;\n          });\n        },\n      );\n    } catch (error) {\n      const isAbortError = (error as Error).name === 'AbortError';\n      const isAbortedDueToReset = error === RESET_STATE_ABORT_MESSAGE;\n      if (isAbortedDueToReset || isAbortError) {\n        // Exit the function early to avoid other state updates\n        return;\n      }\n\n      this.update((state) => {\n        state.quoteFetchError =\n          error instanceof Error ? error.message : 'Unknown error';\n        state.quotesLoadingStatus = RequestStatus.ERROR;\n        state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      });\n      this.trackUnifiedSwapBridgeEvent(\n        UnifiedSwapBridgeEventName.QuoteError,\n        context,\n      );\n      console.log('Failed to fetch bridge quotes', error);\n    }\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n    const { maxRefreshCount } = bridgeFeatureFlags;\n\n    // Stop polling if the maximum number of refreshes has been reached\n    if (\n      updatedQuoteRequest.insufficientBal ||\n      (!updatedQuoteRequest.insufficientBal &&\n        this.state.quotesRefreshCount >= maxRefreshCount)\n    ) {\n      this.stopAllPolling();\n    }\n\n    // Update quote fetching stats\n    const quotesLastFetched = Date.now();\n    this.update((state) => {\n      state.quotesInitialLoadTime =\n        state.quotesRefreshCount === 0 && this.#quotesFirstFetched\n          ? quotesLastFetched - this.#quotesFirstFetched\n          : this.state.quotesInitialLoadTime;\n      state.quotesLastFetched = quotesLastFetched;\n      state.quotesRefreshCount += 1;\n    });\n  };\n\n  readonly #appendL1GasFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & L1GasFees)[] | undefined> => {\n    // Indicates whether some of the quotes are not for optimism or base\n    const hasInvalidQuotes = quotes.some(({ quote }) => {\n      const chainId = formatChainIdToCaip(quote.srcChainId);\n      return ![CHAIN_IDS.OPTIMISM, CHAIN_IDS.BASE]\n        .map(formatChainIdToCaip)\n        .includes(chainId);\n    });\n\n    // Only append L1 gas fees if all quotes are for either optimism or base\n    if (hasInvalidQuotes) {\n      return undefined;\n    }\n\n    const l1GasFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { quote, trade, approval } = quoteResponse;\n        const chainId = numberToHex(quote.srcChainId);\n\n        const getTxParams = (txData: TxData) => ({\n          from: txData.from,\n          to: txData.to,\n          value: txData.value,\n          data: txData.data,\n          gasLimit: txData.gasLimit?.toString(),\n        });\n        const approvalL1GasFees = approval\n          ? await this.#getLayer1GasFee({\n              transactionParams: getTxParams(approval),\n              chainId,\n            })\n          : '0x0';\n        const tradeL1GasFees = await this.#getLayer1GasFee({\n          transactionParams: getTxParams(trade),\n          chainId,\n        });\n\n        if (approvalL1GasFees === undefined || tradeL1GasFees === undefined) {\n          return undefined;\n        }\n\n        return {\n          ...quoteResponse,\n          l1GasFeesInHexWei: sumHexes(approvalL1GasFees, tradeL1GasFees),\n        };\n      }),\n    );\n\n    const quotesWithL1GasFees = (await l1GasFeePromises).reduce<\n      (QuoteResponse & L1GasFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating L1 gas fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithL1GasFees;\n  };\n\n  readonly #setMinimumBalanceForRentExemptionInLamports = (\n    srcChainId: GenericQuoteRequest['srcChainId'],\n  ): Promise<void> | undefined => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n\n    return isSolanaChainId(srcChainId) && selectedAccount?.metadata?.snap?.id\n      ? this.messagingSystem\n          .call(\n            'SnapController:handleRequest',\n            getMinimumBalanceForRentExemptionRequest(\n              selectedAccount.metadata.snap?.id,\n            ),\n          ) // eslint-disable-next-line promise/always-return\n          .then((result) => {\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports = String(result);\n            });\n          })\n          .catch((error) => {\n            console.error(\n              'Error setting minimum balance for rent exemption',\n              error,\n            );\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports =\n                DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n            });\n          })\n      : undefined;\n  };\n\n  readonly #appendSolanaFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & SolanaFees)[] | undefined> => {\n    // Return early if some of the quotes are not for solana\n    if (\n      quotes.some(({ quote: { srcChainId } }) => !isSolanaChainId(srcChainId))\n    ) {\n      return undefined;\n    }\n\n    const solanaFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { trade } = quoteResponse;\n        const selectedAccount = this.#getMultichainSelectedAccount();\n\n        if (selectedAccount?.metadata?.snap?.id && typeof trade === 'string') {\n          const { value: fees } = (await this.messagingSystem.call(\n            'SnapController:handleRequest',\n            getFeeForTransactionRequest(\n              selectedAccount.metadata.snap?.id,\n              trade,\n            ),\n          )) as { value: string };\n\n          return {\n            ...quoteResponse,\n            solanaFeesInLamports: fees,\n          };\n        }\n        return quoteResponse;\n      }),\n    );\n\n    const quotesWithSolanaFees = (await solanaFeePromises).reduce<\n      (QuoteResponse & SolanaFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating solana fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithSolanaFees;\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getSelectedNetworkClientId() {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    // console.log('===selectedNetworkClientId', selectedNetworkClientId);\n    return selectedNetworkClientId;\n  }\n\n  #getSelectedNetworkClient() {\n    const selectedNetworkClientId = this.#getSelectedNetworkClientId();\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return networkClient;\n  }\n\n  readonly #getRequestParams = (): Omit<\n    RequestParams,\n    'token_symbol_source' | 'token_symbol_destination'\n  > => {\n    const srcChainIdCaip = formatChainIdToCaip(\n      this.state.quoteRequest.srcChainId ||\n        this.#getSelectedNetworkClient().configuration.chainId,\n    );\n    return getRequestParams(this.state.quoteRequest, srcChainIdCaip);\n  };\n\n  readonly #getRequestMetadata = (): Omit<\n    RequestMetadata,\n    'stx_enabled' | 'usd_amount_source' | 'security_warnings'\n  > => {\n    return {\n      slippage_limit: this.state.quoteRequest.slippage,\n      swap_type: getSwapTypeFromQuote(this.state.quoteRequest),\n      is_hardware_wallet: isHardwareWallet(\n        this.#getMultichainSelectedAccount(),\n      ),\n      custom_slippage: isCustomSlippage(this.state.quoteRequest.slippage),\n    };\n  };\n\n  readonly #getQuoteFetchData = (): Omit<\n    QuoteFetchData,\n    'best_quote_provider' | 'price_impact'\n  > => {\n    return {\n      can_submit: !this.state.quoteRequest.insufficientBal, // TODO check if balance is sufficient for network fees\n      quotes_count: this.state.quotes.length,\n      quotes_list: this.state.quotes.map(({ quote }) =>\n        formatProviderLabel(quote),\n      ),\n      initial_load_time_all_quotes: this.state.quotesInitialLoadTime ?? 0,\n    };\n  };\n\n  readonly #getEventProperties = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ): CrossChainSwapsEventProperties<T> => {\n    const baseProperties = {\n      action_type: getActionTypeFromQuoteRequest(this.state.quoteRequest),\n      ...propertiesFromClient,\n    };\n    switch (eventName) {\n      case UnifiedSwapBridgeEventName.ButtonClicked:\n      case UnifiedSwapBridgeEventName.PageViewed:\n        return {\n          ...this.#getRequestParams(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesReceived:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          refresh_count: this.state.quotesRefreshCount,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesRequested:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuoteError:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          error_message: this.state.quoteFetchError,\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.AllQuotesOpened:\n      case UnifiedSwapBridgeEventName.AllQuotesSorted:\n      case UnifiedSwapBridgeEventName.QuoteSelected:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.SnapConfirmationViewed:\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n        };\n      case UnifiedSwapBridgeEventName.Submitted:\n      case UnifiedSwapBridgeEventName.Failed: {\n        // Populate the properties that the error occurred before the tx was submitted\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...propertiesFromClient,\n        };\n      }\n      // These are populated by BridgeStatusController\n      case UnifiedSwapBridgeEventName.Completed:\n        return propertiesFromClient;\n      case UnifiedSwapBridgeEventName.InputChanged:\n      default:\n        return baseProperties;\n    }\n  };\n\n  readonly #trackInputChangedEvents = (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n  ) => {\n    Object.entries(paramsToUpdate).forEach(([key, value]) => {\n      const inputKey = toInputChangedPropertyKey[key as keyof QuoteRequest];\n      const inputValue =\n        toInputChangedPropertyValue[key as keyof QuoteRequest]?.(\n          paramsToUpdate,\n        );\n      if (\n        inputKey &&\n        inputValue !== undefined &&\n        value !== this.state.quoteRequest[key as keyof GenericQuoteRequest]\n      ) {\n        this.trackUnifiedSwapBridgeEvent(\n          UnifiedSwapBridgeEventName.InputChanged,\n          {\n            input: inputKey,\n            value: inputValue,\n          },\n        );\n      }\n    });\n  };\n\n  /**\n   * This method tracks cross-chain swaps events\n   *\n   * @param eventName - The name of the event to track\n   * @param propertiesFromClient - Properties that can't be calculated from the event name and need to be provided by the client\n   * @example\n   * this.trackUnifiedSwapBridgeEvent(UnifiedSwapBridgeEventName.ActionOpened, {\n   *   location: MetaMetricsSwapsEventSource.MainView,\n   * });\n   */\n  trackUnifiedSwapBridgeEvent = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    try {\n      const combinedPropertiesForEvent = this.#getEventProperties<T>(\n        eventName,\n        propertiesFromClient,\n      );\n\n      this.#trackMetaMetricsFn(eventName, combinedPropertiesForEvent);\n    } catch (error) {\n      console.error(\n        'Error tracking cross-chain swaps MetaMetrics event',\n        error,\n      );\n    }\n  };\n\n  /**\n   *\n   * @param contractAddress - The address of the ERC20 token contract\n   * @param chainId - The hex chain ID of the bridge network\n   * @returns The atomic allowance of the ERC20 token contract\n   */\n  getBridgeERC20Allowance = async (\n    contractAddress: string,\n    chainId: Hex,\n  ): Promise<string> => {\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    if (!provider) {\n      throw new Error('No provider found');\n    }\n\n    const ethersProvider = new Web3Provider(provider);\n    const contract = new Contract(contractAddress, abiERC20, ethersProvider);\n    const { address: walletAddress } =\n      this.#getMultichainSelectedAccount() ?? {};\n    const allowance: BigNumber = await contract.allowance(\n      walletAddress,\n      METABRIDGE_CHAIN_TO_ADDRESS_MAP[chainId],\n    );\n    return allowance.toString();\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"bridge-controller.mjs","sourceRoot":"","sources":["../src/bridge-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { StateMetadata } from '@metamask/base-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { TransactionController } from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  type BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_PROD_API_BASE_URL,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  REFRESH_INTERVAL_MS,\n} from './constants/bridge';\nimport { CHAIN_IDS } from './constants/chains';\nimport { TraceName } from './constants/traces';\nimport { selectIsAssetExchangeRateInState } from './selectors';\nimport type { QuoteRequest } from './types';\nimport {\n  type L1GasFees,\n  type GenericQuoteRequest,\n  type SolanaFees,\n  type QuoteResponse,\n  type TxData,\n  type BridgeControllerState,\n  type BridgeControllerMessenger,\n  type FetchFunction,\n  RequestStatus,\n} from './types';\nimport { getAssetIdsForToken, toExchangeRates } from './utils/assets';\nimport { hasSufficientBalance } from './utils/balance';\nimport {\n  getDefaultBridgeControllerState,\n  isCrossChain,\n  isSolanaChainId,\n  sumHexes,\n} from './utils/bridge';\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { getBridgeFeatureFlags } from './utils/feature-flags';\nimport { fetchAssetPrices, fetchBridgeQuotes } from './utils/fetch';\nimport { UnifiedSwapBridgeEventName } from './utils/metrics/constants';\nimport {\n  formatProviderLabel,\n  getActionTypeFromQuoteRequest,\n  getRequestParams,\n  getSwapTypeFromQuote,\n  isCustomSlippage,\n  isHardwareWallet,\n  toInputChangedPropertyKey,\n  toInputChangedPropertyValue,\n} from './utils/metrics/properties';\nimport type {\n  QuoteFetchData,\n  RequestMetadata,\n  RequestParams,\n  RequiredEventContextFromClient,\n} from './utils/metrics/types';\nimport { type CrossChainSwapsEventProperties } from './utils/metrics/types';\nimport { isValidQuoteRequest } from './utils/quote';\nimport {\n  getFeeForTransactionRequest,\n  getMinimumBalanceForRentExemptionRequest,\n} from './utils/snaps';\n\nconst metadata: StateMetadata<BridgeControllerState> = {\n  quoteRequest: {\n    persist: false,\n    anonymous: false,\n  },\n  quotes: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesInitialLoadTime: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLastFetched: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesLoadingStatus: {\n    persist: false,\n    anonymous: false,\n  },\n  quoteFetchError: {\n    persist: false,\n    anonymous: false,\n  },\n  quotesRefreshCount: {\n    persist: false,\n    anonymous: false,\n  },\n  assetExchangeRates: {\n    persist: false,\n    anonymous: false,\n  },\n  minimumBalanceForRentExemptionInLamports: {\n    persist: false,\n    anonymous: false,\n  },\n};\n\nconst RESET_STATE_ABORT_MESSAGE = 'Reset controller state';\n\n/**\n * The input to start polling for the {@link BridgeController}\n *\n * @param networkClientId - The network client ID of the selected network\n * @param updatedQuoteRequest - The updated quote request\n * @param context - The context contains properties that can't be populated by the\n * controller and need to be provided by the client for analytics\n */\ntype BridgePollingInput = {\n  networkClientId: NetworkClientId;\n  updatedQuoteRequest: GenericQuoteRequest;\n  context: Pick<\n    RequiredEventContextFromClient,\n    UnifiedSwapBridgeEventName.QuoteError\n  >[UnifiedSwapBridgeEventName.QuoteError] &\n    Pick<\n      RequiredEventContextFromClient,\n      UnifiedSwapBridgeEventName.QuotesRequested\n    >[UnifiedSwapBridgeEventName.QuotesRequested];\n};\n\nexport class BridgeController extends StaticIntervalPollingController<BridgePollingInput>()<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState,\n  BridgeControllerMessenger\n> {\n  #abortController: AbortController | undefined;\n\n  #quotesFirstFetched: number | undefined;\n\n  readonly #clientId: string;\n\n  readonly #getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #trackMetaMetricsFn: <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    properties: CrossChainSwapsEventProperties<T>,\n  ) => void;\n\n  readonly #trace: TraceCallback;\n\n  readonly #config: {\n    customBridgeApiBaseUrl?: string;\n  };\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    getLayer1GasFee,\n    fetchFn,\n    config,\n    trackMetaMetricsFn,\n    traceFn,\n  }: {\n    messenger: BridgeControllerMessenger;\n    state?: Partial<BridgeControllerState>;\n    clientId: BridgeClientId;\n    getLayer1GasFee: typeof TransactionController.prototype.getLayer1GasFee;\n    fetchFn: FetchFunction;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    trackMetaMetricsFn: <\n      T extends\n        (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n    >(\n      eventName: T,\n      properties: CrossChainSwapsEventProperties<T>,\n    ) => void;\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultBridgeControllerState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.#abortController = new AbortController();\n    this.#getLayer1GasFee = getLayer1GasFee;\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#trackMetaMetricsFn = trackMetaMetricsFn;\n    this.#config = config ?? {};\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:setChainIntervalLength`,\n      this.setChainIntervalLength.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:updateBridgeQuoteRequestParams`,\n      this.updateBridgeQuoteRequestParams.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:getBridgeERC20Allowance`,\n      this.getBridgeERC20Allowance.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:trackUnifiedSwapBridgeEvent`,\n      this.trackUnifiedSwapBridgeEvent.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:stopPollingForQuotes`,\n      this.stopPollingForQuotes.bind(this),\n    );\n  }\n\n  _executePoll = async (pollingInput: BridgePollingInput) => {\n    await this.#fetchBridgeQuotes(pollingInput);\n  };\n\n  updateBridgeQuoteRequestParams = async (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n    context: BridgePollingInput['context'],\n  ) => {\n    this.stopAllPolling();\n    this.#abortController?.abort('Quote request updated');\n\n    this.#trackInputChangedEvents(paramsToUpdate);\n\n    const updatedQuoteRequest = {\n      ...DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest,\n      ...paramsToUpdate,\n    };\n\n    this.update((state) => {\n      state.quoteRequest = updatedQuoteRequest;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      // Reset required minimum balance if the source chain is not Solana\n      if (\n        updatedQuoteRequest.srcChainId &&\n        !isSolanaChainId(updatedQuoteRequest.srcChainId)\n      ) {\n        state.minimumBalanceForRentExemptionInLamports =\n          DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n      }\n    });\n\n    await this.#fetchAssetExchangeRates(updatedQuoteRequest).catch((error) =>\n      console.warn('Failed to fetch asset exchange rates', error),\n    );\n\n    if (isValidQuoteRequest(updatedQuoteRequest)) {\n      this.#quotesFirstFetched = Date.now();\n      const providerConfig = this.#getSelectedNetworkClient()?.configuration;\n\n      let insufficientBal: boolean | undefined;\n      if (isSolanaChainId(updatedQuoteRequest.srcChainId)) {\n        // If the source chain is not an EVM network, use value from params\n        insufficientBal = paramsToUpdate.insufficientBal;\n      } else if (providerConfig?.rpcUrl?.includes('tenderly')) {\n        // If the rpcUrl is a tenderly fork (e2e tests), set insufficientBal=true\n        // The bridge-api filters out quotes if the balance on mainnet is insufficient so this override allows quotes to always be returned\n        insufficientBal = true;\n      } else {\n        // Otherwise query the src token balance from the RPC provider\n        insufficientBal =\n          paramsToUpdate.insufficientBal ??\n          !(await this.#hasSufficientBalance(updatedQuoteRequest));\n      }\n\n      const networkClientId = this.#getSelectedNetworkClientId();\n      // Set refresh rate based on the source chain before starting polling\n      this.setChainIntervalLength();\n      this.startPolling({\n        networkClientId,\n        updatedQuoteRequest: {\n          ...updatedQuoteRequest,\n          insufficientBal,\n        },\n        context,\n      });\n    }\n  };\n\n  readonly #getExchangeRateSources = () => {\n    return {\n      ...this.messagingSystem.call('MultichainAssetsRatesController:getState'),\n      ...this.messagingSystem.call('CurrencyRateController:getState'),\n      ...this.messagingSystem.call('TokenRatesController:getState'),\n      ...this.state,\n    };\n  };\n\n  /**\n   * Fetches the exchange rates for the assets in the quote request if they are not already in the state\n   * In addition to the selected tokens, this also fetches the native asset for the source and destination chains\n   *\n   * @param quoteRequest - The quote request\n   * @param quoteRequest.srcChainId - The source chain ID\n   * @param quoteRequest.srcTokenAddress - The source token address\n   * @param quoteRequest.destChainId - The destination chain ID\n   * @param quoteRequest.destTokenAddress - The destination token address\n   */\n  readonly #fetchAssetExchangeRates = async ({\n    srcChainId,\n    srcTokenAddress,\n    destChainId,\n    destTokenAddress,\n  }: Partial<GenericQuoteRequest>) => {\n    const assetIds: Set<CaipAssetType> = new Set([]);\n    const exchangeRateSources = this.#getExchangeRateSources();\n    if (\n      srcTokenAddress &&\n      srcChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        srcChainId,\n        srcTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(srcTokenAddress, srcChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n    if (\n      destTokenAddress &&\n      destChainId &&\n      !selectIsAssetExchangeRateInState(\n        exchangeRateSources,\n        destChainId,\n        destTokenAddress,\n      )\n    ) {\n      getAssetIdsForToken(destTokenAddress, destChainId).forEach((assetId) =>\n        assetIds.add(assetId),\n      );\n    }\n\n    const currency = this.messagingSystem.call(\n      'CurrencyRateController:getState',\n    ).currentCurrency;\n\n    if (assetIds.size === 0) {\n      return;\n    }\n\n    const pricesByAssetId = await fetchAssetPrices({\n      assetIds,\n      currencies: new Set([currency]),\n      clientId: this.#clientId,\n      fetchFn: this.#fetchFn,\n    });\n    const exchangeRates = toExchangeRates(currency, pricesByAssetId);\n    this.update((state) => {\n      state.assetExchangeRates = {\n        ...state.assetExchangeRates,\n        ...exchangeRates,\n      };\n    });\n  };\n\n  readonly #hasSufficientBalance = async (\n    quoteRequest: GenericQuoteRequest,\n  ) => {\n    const walletAddress = this.#getMultichainSelectedAccount()?.address;\n    const srcChainIdInHex = formatChainIdToHex(quoteRequest.srcChainId);\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    const normalizedSrcTokenAddress = formatAddressToCaipReference(\n      quoteRequest.srcTokenAddress,\n    );\n\n    return (\n      provider &&\n      walletAddress &&\n      normalizedSrcTokenAddress &&\n      quoteRequest.srcTokenAmount &&\n      srcChainIdInHex &&\n      (await hasSufficientBalance(\n        provider,\n        walletAddress,\n        normalizedSrcTokenAddress,\n        quoteRequest.srcTokenAmount,\n        srcChainIdInHex,\n      ))\n    );\n  };\n\n  stopPollingForQuotes = (reason?: string) => {\n    this.stopAllPolling();\n    this.#abortController?.abort(reason);\n  };\n\n  resetState = () => {\n    this.stopPollingForQuotes(RESET_STATE_ABORT_MESSAGE);\n\n    this.update((state) => {\n      // Cannot do direct assignment to state, i.e. state = {... }, need to manually assign each field\n      state.quoteRequest = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteRequest;\n      state.quotesInitialLoadTime =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesInitialLoadTime;\n      state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      state.quotesLastFetched =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLastFetched;\n      state.quotesLoadingStatus =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesLoadingStatus;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n      state.quotesRefreshCount =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.quotesRefreshCount;\n      state.assetExchangeRates =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.assetExchangeRates;\n      state.minimumBalanceForRentExemptionInLamports =\n        DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n    });\n  };\n\n  /**\n   * Sets the interval length based on the source chain\n   */\n  setChainIntervalLength = () => {\n    const { state } = this;\n    const { srcChainId } = state.quoteRequest;\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n\n    const refreshRateOverride = srcChainId\n      ? bridgeFeatureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : undefined;\n    const defaultRefreshRate = bridgeFeatureFlags.refreshRate;\n    this.setIntervalLength(refreshRateOverride ?? defaultRefreshRate);\n  };\n\n  readonly #fetchBridgeQuotes = async ({\n    networkClientId: _networkClientId,\n    updatedQuoteRequest,\n    context,\n  }: BridgePollingInput) => {\n    this.#abortController?.abort('New quote request');\n    this.#abortController = new AbortController();\n\n    this.trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.QuotesRequested,\n      context,\n    );\n    this.update((state) => {\n      state.quotesLoadingStatus = RequestStatus.LOADING;\n      state.quoteRequest = updatedQuoteRequest;\n      state.quoteFetchError = DEFAULT_BRIDGE_CONTROLLER_STATE.quoteFetchError;\n    });\n\n    const fetchQuotes = async () => {\n      // This call is not awaited to prevent blocking quote fetching if the snap takes too long to respond\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#setMinimumBalanceForRentExemptionInLamports(\n        updatedQuoteRequest.srcChainId,\n      );\n      const quotes = await fetchBridgeQuotes(\n        updatedQuoteRequest,\n        // AbortController is always defined by this line, because we assign it a few lines above,\n        // not sure why Jest thinks it's not\n        // Linters accurately say that it's defined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.#abortController!.signal as AbortSignal,\n        this.#clientId,\n        this.#fetchFn,\n        this.#config.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n      );\n\n      const quotesWithL1GasFees = await this.#appendL1GasFees(quotes);\n      const quotesWithSolanaFees = await this.#appendSolanaFees(quotes);\n\n      this.update((state) => {\n        state.quotes = quotesWithL1GasFees ?? quotesWithSolanaFees ?? quotes;\n        state.quotesLoadingStatus = RequestStatus.FETCHED;\n      });\n    };\n\n    try {\n      await this.#trace(\n        {\n          name: isCrossChain(\n            updatedQuoteRequest.srcChainId,\n            updatedQuoteRequest.destChainId,\n          )\n            ? TraceName.BridgeQuotesFetched\n            : TraceName.SwapQuotesFetched,\n          data: {\n            srcChainId: formatChainIdToCaip(updatedQuoteRequest.srcChainId),\n            destChainId: formatChainIdToCaip(updatedQuoteRequest.destChainId),\n          },\n        },\n        fetchQuotes,\n      );\n    } catch (error) {\n      const isAbortError = (error as Error).name === 'AbortError';\n      const isAbortedDueToReset = error === RESET_STATE_ABORT_MESSAGE;\n      if (isAbortedDueToReset || isAbortError) {\n        // Exit the function early to avoid other state updates\n        return;\n      }\n\n      this.update((state) => {\n        state.quoteFetchError =\n          error instanceof Error ? error.message : 'Unknown error';\n        state.quotesLoadingStatus = RequestStatus.ERROR;\n        state.quotes = DEFAULT_BRIDGE_CONTROLLER_STATE.quotes;\n      });\n      this.trackUnifiedSwapBridgeEvent(\n        UnifiedSwapBridgeEventName.QuoteError,\n        context,\n      );\n      console.log('Failed to fetch bridge quotes', error);\n    }\n    const bridgeFeatureFlags = getBridgeFeatureFlags(this.messagingSystem);\n    const { maxRefreshCount } = bridgeFeatureFlags;\n\n    // Stop polling if the maximum number of refreshes has been reached\n    if (\n      updatedQuoteRequest.insufficientBal ||\n      (!updatedQuoteRequest.insufficientBal &&\n        this.state.quotesRefreshCount >= maxRefreshCount)\n    ) {\n      this.stopAllPolling();\n    }\n\n    // Update quote fetching stats\n    const quotesLastFetched = Date.now();\n    this.update((state) => {\n      state.quotesInitialLoadTime =\n        state.quotesRefreshCount === 0 && this.#quotesFirstFetched\n          ? quotesLastFetched - this.#quotesFirstFetched\n          : this.state.quotesInitialLoadTime;\n      state.quotesLastFetched = quotesLastFetched;\n      state.quotesRefreshCount += 1;\n    });\n  };\n\n  readonly #appendL1GasFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & L1GasFees)[] | undefined> => {\n    // Indicates whether some of the quotes are not for optimism or base\n    const hasInvalidQuotes = quotes.some(({ quote }) => {\n      const chainId = formatChainIdToCaip(quote.srcChainId);\n      return ![CHAIN_IDS.OPTIMISM, CHAIN_IDS.BASE]\n        .map(formatChainIdToCaip)\n        .includes(chainId);\n    });\n\n    // Only append L1 gas fees if all quotes are for either optimism or base\n    if (hasInvalidQuotes) {\n      return undefined;\n    }\n\n    const l1GasFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { quote, trade, approval } = quoteResponse;\n        const chainId = numberToHex(quote.srcChainId);\n\n        const getTxParams = (txData: TxData) => ({\n          from: txData.from,\n          to: txData.to,\n          value: txData.value,\n          data: txData.data,\n          gasLimit: txData.gasLimit?.toString(),\n        });\n        const approvalL1GasFees = approval\n          ? await this.#getLayer1GasFee({\n              transactionParams: getTxParams(approval),\n              chainId,\n            })\n          : '0x0';\n        const tradeL1GasFees = await this.#getLayer1GasFee({\n          transactionParams: getTxParams(trade),\n          chainId,\n        });\n\n        if (approvalL1GasFees === undefined || tradeL1GasFees === undefined) {\n          return undefined;\n        }\n\n        return {\n          ...quoteResponse,\n          l1GasFeesInHexWei: sumHexes(approvalL1GasFees, tradeL1GasFees),\n        };\n      }),\n    );\n\n    const quotesWithL1GasFees = (await l1GasFeePromises).reduce<\n      (QuoteResponse & L1GasFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating L1 gas fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithL1GasFees;\n  };\n\n  readonly #setMinimumBalanceForRentExemptionInLamports = (\n    srcChainId: GenericQuoteRequest['srcChainId'],\n  ): Promise<void> | undefined => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n\n    return isSolanaChainId(srcChainId) && selectedAccount?.metadata?.snap?.id\n      ? this.messagingSystem\n          .call(\n            'SnapController:handleRequest',\n            getMinimumBalanceForRentExemptionRequest(\n              selectedAccount.metadata.snap?.id,\n            ),\n          ) // eslint-disable-next-line promise/always-return\n          .then((result) => {\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports = String(result);\n            });\n          })\n          .catch((error) => {\n            console.error(\n              'Error setting minimum balance for rent exemption',\n              error,\n            );\n            this.update((state) => {\n              state.minimumBalanceForRentExemptionInLamports =\n                DEFAULT_BRIDGE_CONTROLLER_STATE.minimumBalanceForRentExemptionInLamports;\n            });\n          })\n      : undefined;\n  };\n\n  readonly #appendSolanaFees = async (\n    quotes: QuoteResponse[],\n  ): Promise<(QuoteResponse & SolanaFees)[] | undefined> => {\n    // Return early if some of the quotes are not for solana\n    if (\n      quotes.some(({ quote: { srcChainId } }) => !isSolanaChainId(srcChainId))\n    ) {\n      return undefined;\n    }\n\n    const solanaFeePromises = Promise.allSettled(\n      quotes.map(async (quoteResponse) => {\n        const { trade } = quoteResponse;\n        const selectedAccount = this.#getMultichainSelectedAccount();\n\n        if (selectedAccount?.metadata?.snap?.id && typeof trade === 'string') {\n          const { value: fees } = (await this.messagingSystem.call(\n            'SnapController:handleRequest',\n            getFeeForTransactionRequest(\n              selectedAccount.metadata.snap?.id,\n              trade,\n            ),\n          )) as { value: string };\n\n          return {\n            ...quoteResponse,\n            solanaFeesInLamports: fees,\n          };\n        }\n        return quoteResponse;\n      }),\n    );\n\n    const quotesWithSolanaFees = (await solanaFeePromises).reduce<\n      (QuoteResponse & SolanaFees)[]\n    >((acc, result) => {\n      if (result.status === 'fulfilled' && result.value) {\n        acc.push(result.value);\n      } else if (result.status === 'rejected') {\n        console.error('Error calculating solana fees for quote', result.reason);\n      }\n      return acc;\n    }, []);\n\n    return quotesWithSolanaFees;\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getSelectedNetworkClientId() {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    // console.log('===selectedNetworkClientId', selectedNetworkClientId);\n    return selectedNetworkClientId;\n  }\n\n  #getSelectedNetworkClient() {\n    const selectedNetworkClientId = this.#getSelectedNetworkClientId();\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return networkClient;\n  }\n\n  readonly #getRequestParams = (): Omit<\n    RequestParams,\n    'token_symbol_source' | 'token_symbol_destination'\n  > => {\n    const srcChainIdCaip = formatChainIdToCaip(\n      this.state.quoteRequest.srcChainId ||\n        this.#getSelectedNetworkClient().configuration.chainId,\n    );\n    return getRequestParams(this.state.quoteRequest, srcChainIdCaip);\n  };\n\n  readonly #getRequestMetadata = (): Omit<\n    RequestMetadata,\n    'stx_enabled' | 'usd_amount_source' | 'security_warnings'\n  > => {\n    return {\n      slippage_limit: this.state.quoteRequest.slippage,\n      swap_type: getSwapTypeFromQuote(this.state.quoteRequest),\n      is_hardware_wallet: isHardwareWallet(\n        this.#getMultichainSelectedAccount(),\n      ),\n      custom_slippage: isCustomSlippage(this.state.quoteRequest.slippage),\n    };\n  };\n\n  readonly #getQuoteFetchData = (): Omit<\n    QuoteFetchData,\n    'best_quote_provider' | 'price_impact'\n  > => {\n    return {\n      can_submit: !this.state.quoteRequest.insufficientBal, // TODO check if balance is sufficient for network fees\n      quotes_count: this.state.quotes.length,\n      quotes_list: this.state.quotes.map(({ quote }) =>\n        formatProviderLabel(quote),\n      ),\n      initial_load_time_all_quotes: this.state.quotesInitialLoadTime ?? 0,\n    };\n  };\n\n  readonly #getEventProperties = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ): CrossChainSwapsEventProperties<T> => {\n    const baseProperties = {\n      action_type: getActionTypeFromQuoteRequest(this.state.quoteRequest),\n      ...propertiesFromClient,\n    };\n    switch (eventName) {\n      case UnifiedSwapBridgeEventName.ButtonClicked:\n      case UnifiedSwapBridgeEventName.PageViewed:\n        return {\n          ...this.#getRequestParams(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesReceived:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          refresh_count: this.state.quotesRefreshCount,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuotesRequested:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.QuoteError:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          error_message: this.state.quoteFetchError,\n          has_sufficient_funds: !this.state.quoteRequest.insufficientBal,\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.AllQuotesOpened:\n      case UnifiedSwapBridgeEventName.AllQuotesSorted:\n      case UnifiedSwapBridgeEventName.QuoteSelected:\n        return {\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...baseProperties,\n        };\n      case UnifiedSwapBridgeEventName.SnapConfirmationViewed:\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n        };\n      case UnifiedSwapBridgeEventName.Submitted:\n      case UnifiedSwapBridgeEventName.Failed: {\n        // Populate the properties that the error occurred before the tx was submitted\n        return {\n          ...baseProperties,\n          ...this.#getRequestParams(),\n          ...this.#getRequestMetadata(),\n          ...this.#getQuoteFetchData(),\n          ...propertiesFromClient,\n        };\n      }\n      // These are populated by BridgeStatusController\n      case UnifiedSwapBridgeEventName.Completed:\n        return propertiesFromClient;\n      case UnifiedSwapBridgeEventName.InputChanged:\n      default:\n        return baseProperties;\n    }\n  };\n\n  readonly #trackInputChangedEvents = (\n    paramsToUpdate: Partial<GenericQuoteRequest>,\n  ) => {\n    Object.entries(paramsToUpdate).forEach(([key, value]) => {\n      const inputKey = toInputChangedPropertyKey[key as keyof QuoteRequest];\n      const inputValue =\n        toInputChangedPropertyValue[key as keyof QuoteRequest]?.(\n          paramsToUpdate,\n        );\n      if (\n        inputKey &&\n        inputValue !== undefined &&\n        value !== this.state.quoteRequest[key as keyof GenericQuoteRequest]\n      ) {\n        this.trackUnifiedSwapBridgeEvent(\n          UnifiedSwapBridgeEventName.InputChanged,\n          {\n            input: inputKey,\n            value: inputValue,\n          },\n        );\n      }\n    });\n  };\n\n  /**\n   * This method tracks cross-chain swaps events\n   *\n   * @param eventName - The name of the event to track\n   * @param propertiesFromClient - Properties that can't be calculated from the event name and need to be provided by the client\n   * @example\n   * this.trackUnifiedSwapBridgeEvent(UnifiedSwapBridgeEventName.ActionOpened, {\n   *   location: MetaMetricsSwapsEventSource.MainView,\n   * });\n   */\n  trackUnifiedSwapBridgeEvent = <\n    T extends\n      (typeof UnifiedSwapBridgeEventName)[keyof typeof UnifiedSwapBridgeEventName],\n  >(\n    eventName: T,\n    propertiesFromClient: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    try {\n      const combinedPropertiesForEvent = this.#getEventProperties<T>(\n        eventName,\n        propertiesFromClient,\n      );\n\n      this.#trackMetaMetricsFn(eventName, combinedPropertiesForEvent);\n    } catch (error) {\n      console.error(\n        'Error tracking cross-chain swaps MetaMetrics event',\n        error,\n      );\n    }\n  };\n\n  /**\n   *\n   * @param contractAddress - The address of the ERC20 token contract\n   * @param chainId - The hex chain ID of the bridge network\n   * @returns The atomic allowance of the ERC20 token contract\n   */\n  getBridgeERC20Allowance = async (\n    contractAddress: string,\n    chainId: Hex,\n  ): Promise<string> => {\n    const provider = this.#getSelectedNetworkClient()?.provider;\n    if (!provider) {\n      throw new Error('No provider found');\n    }\n\n    const ethersProvider = new Web3Provider(provider);\n    const contract = new Contract(contractAddress, abiERC20, ethersProvider);\n    const { address: walletAddress } =\n      this.#getMultichainSelectedAccount() ?? {};\n    const allowance: BigNumber = await contract.allowance(\n      walletAddress,\n      METABRIDGE_CHAIN_TO_ADDRESS_MAP[chainId],\n    );\n    return allowance.toString();\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/constants/bridge.cjs b/dist/constants/bridge.cjs
index f41886bab05af0bc90c95d22bf1a29a1ec68c64f..f21e13aff5475fda34161d010d641ecd9ac713b9 100644
--- a/dist/constants/bridge.cjs
+++ b/dist/constants/bridge.cjs
@@ -29,7 +29,7 @@ exports.ETH_USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';
 exports.METABRIDGE_ETHEREUM_ADDRESS = '0x0439e60F02a8900a951603950d8D4527f400C3f1';
 exports.BRIDGE_QUOTE_MAX_ETA_SECONDS = 60 * 60; // 1 hour
 exports.BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5; // if a quote returns in x times less return than the best quote, ignore it
-exports.BRIDGE_PREFERRED_GAS_ESTIMATE = 'high';
+exports.BRIDGE_PREFERRED_GAS_ESTIMATE = 'medium';
 exports.BRIDGE_DEFAULT_SLIPPAGE = 0.5;
 exports.BRIDGE_MM_FEE_RATE = 0.875;
 exports.REFRESH_INTERVAL_MS = 30 * 1000;
diff --git a/dist/constants/bridge.cjs.map b/dist/constants/bridge.cjs.map
index cadefc6885fbb12d709ce1eea595e1a8fd6c3c43..41c83bd1a44bc2a22fe0b3952b65e35d97603c05 100644
--- a/dist/constants/bridge.cjs.map
+++ b/dist/constants/bridge.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"bridge.cjs","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":";;;AAAA,wDAAuD;AACvD,uDAAiD;AAGjD,yCAAqC;AAGrC,+BAA+B;AAClB,QAAA,wBAAwB,GAAG;IACtC,kBAAS,CAAC,OAAO;IACjB,kBAAS,CAAC,GAAG;IACb,kBAAS,CAAC,OAAO;IACjB,kBAAS,CAAC,UAAU;IACpB,kBAAS,CAAC,SAAS;IACnB,kBAAS,CAAC,QAAQ;IAClB,kBAAS,CAAC,QAAQ;IAClB,kBAAS,CAAC,aAAa;IACvB,kBAAS,CAAC,IAAI;IACd,kBAAS,CAAC,GAAG;IACb,sBAAQ,CAAC,OAAO;CACR,CAAC;AAIE,QAAA,uBAAuB,GAAG,uCAAuC,CAAC;AAClE,QAAA,wBAAwB,GAAG,mCAAmC,CAAC;AAE5E,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,8BAAd,cAAc,QAGzB;AAEY,QAAA,gBAAgB,GAAG,4CAA4C,CAAC;AAChE,QAAA,2BAA2B,GACtC,4CAA4C,CAAC;AAClC,QAAA,4BAA4B,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,SAAS;AACjD,QAAA,6CAA6C,GAAG,GAAG,CAAC,CAAC,2EAA2E;AAEhI,QAAA,6BAA6B,GAAG,MAAM,CAAC;AACvC,QAAA,uBAAuB,GAAG,GAAG,CAAC;AAC9B,QAAA,kBAAkB,GAAG,KAAK,CAAC;AAC3B,QAAA,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC;AAChC,QAAA,yBAAyB,GAAG,CAAC,CAAC;AAE9B,QAAA,sBAAsB,GAAG,kBAAkB,CAAC;AAE5C,QAAA,2BAA2B,GAAG;IACzC,cAAc,EAAE,OAAO;IACvB,WAAW,EAAE,2BAAmB;IAChC,eAAe,EAAE,iCAAyB;IAC1C,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,EAAE;CACX,CAAC;AAEW,QAAA,+BAA+B,GAA0B;IACpE,YAAY,EAAE;QACZ,eAAe,EAAE,uBAAW;KAC7B;IACD,qBAAqB,EAAE,IAAI;IAC3B,MAAM,EAAE,EAAE;IACV,iBAAiB,EAAE,IAAI;IACvB,mBAAmB,EAAE,IAAI;IACzB,eAAe,EAAE,IAAI;IACrB,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,EAAE;IACtB,wCAAwC,EAAE,GAAG;CAC9C,CAAC;AAEW,QAAA,+BAA+B,GAAwB;IAClE,CAAC,kBAAS,CAAC,OAAO,CAAC,EAAE,mCAA2B;CACjD,CAAC","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport { SolScope } from '@metamask/keyring-api';\nimport type { Hex } from '@metamask/utils';\n\nimport { CHAIN_IDS } from './chains';\nimport type { BridgeControllerState } from '../types';\n\n// TODO read from feature flags\nexport const ALLOWED_BRIDGE_CHAIN_IDS = [\n  CHAIN_IDS.MAINNET,\n  CHAIN_IDS.BSC,\n  CHAIN_IDS.POLYGON,\n  CHAIN_IDS.ZKSYNC_ERA,\n  CHAIN_IDS.AVALANCHE,\n  CHAIN_IDS.OPTIMISM,\n  CHAIN_IDS.ARBITRUM,\n  CHAIN_IDS.LINEA_MAINNET,\n  CHAIN_IDS.BASE,\n  CHAIN_IDS.SEI,\n  SolScope.Mainnet,\n] as const;\n\nexport type AllowedBridgeChainIds = (typeof ALLOWED_BRIDGE_CHAIN_IDS)[number];\n\nexport const BRIDGE_DEV_API_BASE_URL = 'https://bridge.dev-api.cx.metamask.io';\nexport const BRIDGE_PROD_API_BASE_URL = 'https://bridge.api.cx.metamask.io';\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport const ETH_USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';\nexport const METABRIDGE_ETHEREUM_ADDRESS =\n  '0x0439e60F02a8900a951603950d8D4527f400C3f1';\nexport const BRIDGE_QUOTE_MAX_ETA_SECONDS = 60 * 60; // 1 hour\nexport const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5; // if a quote returns in x times less return than the best quote, ignore it\n\nexport const BRIDGE_PREFERRED_GAS_ESTIMATE = 'high';\nexport const BRIDGE_DEFAULT_SLIPPAGE = 0.5;\nexport const BRIDGE_MM_FEE_RATE = 0.875;\nexport const REFRESH_INTERVAL_MS = 30 * 1000;\nexport const DEFAULT_MAX_REFRESH_COUNT = 5;\n\nexport const BRIDGE_CONTROLLER_NAME = 'BridgeController';\n\nexport const DEFAULT_FEATURE_FLAG_CONFIG = {\n  minimumVersion: '0.0.0',\n  refreshRate: REFRESH_INTERVAL_MS,\n  maxRefreshCount: DEFAULT_MAX_REFRESH_COUNT,\n  support: false,\n  chains: {},\n};\n\nexport const DEFAULT_BRIDGE_CONTROLLER_STATE: BridgeControllerState = {\n  quoteRequest: {\n    srcTokenAddress: AddressZero,\n  },\n  quotesInitialLoadTime: null,\n  quotes: [],\n  quotesLastFetched: null,\n  quotesLoadingStatus: null,\n  quoteFetchError: null,\n  quotesRefreshCount: 0,\n  assetExchangeRates: {},\n  minimumBalanceForRentExemptionInLamports: '0',\n};\n\nexport const METABRIDGE_CHAIN_TO_ADDRESS_MAP: Record<Hex, string> = {\n  [CHAIN_IDS.MAINNET]: METABRIDGE_ETHEREUM_ADDRESS,\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"bridge.cjs","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":";;;AAAA,wDAAuD;AACvD,uDAAiD;AAGjD,yCAAqC;AAGrC,+BAA+B;AAClB,QAAA,wBAAwB,GAAG;IACtC,kBAAS,CAAC,OAAO;IACjB,kBAAS,CAAC,GAAG;IACb,kBAAS,CAAC,OAAO;IACjB,kBAAS,CAAC,UAAU;IACpB,kBAAS,CAAC,SAAS;IACnB,kBAAS,CAAC,QAAQ;IAClB,kBAAS,CAAC,QAAQ;IAClB,kBAAS,CAAC,aAAa;IACvB,kBAAS,CAAC,IAAI;IACd,kBAAS,CAAC,GAAG;IACb,sBAAQ,CAAC,OAAO;CACR,CAAC;AAIE,QAAA,uBAAuB,GAAG,uCAAuC,CAAC;AAClE,QAAA,wBAAwB,GAAG,mCAAmC,CAAC;AAE5E,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,8BAAd,cAAc,QAGzB;AAEY,QAAA,gBAAgB,GAAG,4CAA4C,CAAC;AAChE,QAAA,2BAA2B,GACtC,4CAA4C,CAAC;AAClC,QAAA,4BAA4B,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,SAAS;AACjD,QAAA,6CAA6C,GAAG,GAAG,CAAC,CAAC,2EAA2E;AAEhI,QAAA,6BAA6B,GAAG,QAAQ,CAAC;AACzC,QAAA,uBAAuB,GAAG,GAAG,CAAC;AAC9B,QAAA,kBAAkB,GAAG,KAAK,CAAC;AAC3B,QAAA,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC;AAChC,QAAA,yBAAyB,GAAG,CAAC,CAAC;AAE9B,QAAA,sBAAsB,GAAG,kBAAkB,CAAC;AAE5C,QAAA,2BAA2B,GAAG;IACzC,cAAc,EAAE,OAAO;IACvB,WAAW,EAAE,2BAAmB;IAChC,eAAe,EAAE,iCAAyB;IAC1C,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,EAAE;CACX,CAAC;AAEW,QAAA,+BAA+B,GAA0B;IACpE,YAAY,EAAE;QACZ,eAAe,EAAE,uBAAW;KAC7B;IACD,qBAAqB,EAAE,IAAI;IAC3B,MAAM,EAAE,EAAE;IACV,iBAAiB,EAAE,IAAI;IACvB,mBAAmB,EAAE,IAAI;IACzB,eAAe,EAAE,IAAI;IACrB,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,EAAE;IACtB,wCAAwC,EAAE,GAAG;CAC9C,CAAC;AAEW,QAAA,+BAA+B,GAAwB;IAClE,CAAC,kBAAS,CAAC,OAAO,CAAC,EAAE,mCAA2B;CACjD,CAAC","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport { SolScope } from '@metamask/keyring-api';\nimport type { Hex } from '@metamask/utils';\n\nimport { CHAIN_IDS } from './chains';\nimport type { BridgeControllerState } from '../types';\n\n// TODO read from feature flags\nexport const ALLOWED_BRIDGE_CHAIN_IDS = [\n  CHAIN_IDS.MAINNET,\n  CHAIN_IDS.BSC,\n  CHAIN_IDS.POLYGON,\n  CHAIN_IDS.ZKSYNC_ERA,\n  CHAIN_IDS.AVALANCHE,\n  CHAIN_IDS.OPTIMISM,\n  CHAIN_IDS.ARBITRUM,\n  CHAIN_IDS.LINEA_MAINNET,\n  CHAIN_IDS.BASE,\n  CHAIN_IDS.SEI,\n  SolScope.Mainnet,\n] as const;\n\nexport type AllowedBridgeChainIds = (typeof ALLOWED_BRIDGE_CHAIN_IDS)[number];\n\nexport const BRIDGE_DEV_API_BASE_URL = 'https://bridge.dev-api.cx.metamask.io';\nexport const BRIDGE_PROD_API_BASE_URL = 'https://bridge.api.cx.metamask.io';\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport const ETH_USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';\nexport const METABRIDGE_ETHEREUM_ADDRESS =\n  '0x0439e60F02a8900a951603950d8D4527f400C3f1';\nexport const BRIDGE_QUOTE_MAX_ETA_SECONDS = 60 * 60; // 1 hour\nexport const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5; // if a quote returns in x times less return than the best quote, ignore it\n\nexport const BRIDGE_PREFERRED_GAS_ESTIMATE = 'medium';\nexport const BRIDGE_DEFAULT_SLIPPAGE = 0.5;\nexport const BRIDGE_MM_FEE_RATE = 0.875;\nexport const REFRESH_INTERVAL_MS = 30 * 1000;\nexport const DEFAULT_MAX_REFRESH_COUNT = 5;\n\nexport const BRIDGE_CONTROLLER_NAME = 'BridgeController';\n\nexport const DEFAULT_FEATURE_FLAG_CONFIG = {\n  minimumVersion: '0.0.0',\n  refreshRate: REFRESH_INTERVAL_MS,\n  maxRefreshCount: DEFAULT_MAX_REFRESH_COUNT,\n  support: false,\n  chains: {},\n};\n\nexport const DEFAULT_BRIDGE_CONTROLLER_STATE: BridgeControllerState = {\n  quoteRequest: {\n    srcTokenAddress: AddressZero,\n  },\n  quotesInitialLoadTime: null,\n  quotes: [],\n  quotesLastFetched: null,\n  quotesLoadingStatus: null,\n  quoteFetchError: null,\n  quotesRefreshCount: 0,\n  assetExchangeRates: {},\n  minimumBalanceForRentExemptionInLamports: '0',\n};\n\nexport const METABRIDGE_CHAIN_TO_ADDRESS_MAP: Record<Hex, string> = {\n  [CHAIN_IDS.MAINNET]: METABRIDGE_ETHEREUM_ADDRESS,\n};\n"]}
\ No newline at end of file
diff --git a/dist/constants/bridge.d.cts b/dist/constants/bridge.d.cts
index dc1b9a653c183076cf0a471c24de8af535ff47f6..ddce694a2edff5313b039b7012ba10715ff58aea 100644
--- a/dist/constants/bridge.d.cts
+++ b/dist/constants/bridge.d.cts
@@ -13,7 +13,7 @@ export declare const ETH_USDT_ADDRESS = "0xdac17f958d2ee523a2206206994597c13d831
 export declare const METABRIDGE_ETHEREUM_ADDRESS = "0x0439e60F02a8900a951603950d8D4527f400C3f1";
 export declare const BRIDGE_QUOTE_MAX_ETA_SECONDS: number;
 export declare const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5;
-export declare const BRIDGE_PREFERRED_GAS_ESTIMATE = "high";
+export declare const BRIDGE_PREFERRED_GAS_ESTIMATE = "medium";
 export declare const BRIDGE_DEFAULT_SLIPPAGE = 0.5;
 export declare const BRIDGE_MM_FEE_RATE = 0.875;
 export declare const REFRESH_INTERVAL_MS: number;
diff --git a/dist/constants/bridge.d.cts.map b/dist/constants/bridge.d.cts.map
index 67d914794ec5c2db08bf821aad52f7108c8a447e..e967e103307bde0de835743950c4c4cc9124c4b2 100644
--- a/dist/constants/bridge.d.cts.map
+++ b/dist/constants/bridge.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"bridge.d.cts","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAG3C,OAAO,KAAK,EAAE,qBAAqB,EAAE,qBAAiB;AAGtD,eAAO,MAAM,wBAAwB,qHAY3B,CAAC;AAEX,MAAM,MAAM,qBAAqB,GAAG,CAAC,OAAO,wBAAwB,CAAC,CAAC,MAAM,CAAC,CAAC;AAE9E,eAAO,MAAM,uBAAuB,0CAA0C,CAAC;AAC/E,eAAO,MAAM,wBAAwB,sCAAsC,CAAC;AAE5E,oBAAY,cAAc;IACxB,SAAS,cAAc;IACvB,MAAM,WAAW;CAClB;AAED,eAAO,MAAM,gBAAgB,+CAA+C,CAAC;AAC7E,eAAO,MAAM,2BAA2B,+CACM,CAAC;AAC/C,eAAO,MAAM,4BAA4B,QAAU,CAAC;AACpD,eAAO,MAAM,6CAA6C,MAAM,CAAC;AAEjE,eAAO,MAAM,6BAA6B,SAAS,CAAC;AACpD,eAAO,MAAM,uBAAuB,MAAM,CAAC;AAC3C,eAAO,MAAM,kBAAkB,QAAQ,CAAC;AACxC,eAAO,MAAM,mBAAmB,QAAY,CAAC;AAC7C,eAAO,MAAM,yBAAyB,IAAI,CAAC;AAE3C,eAAO,MAAM,sBAAsB,qBAAqB,CAAC;AAEzD,eAAO,MAAM,2BAA2B;;;;;;CAMvC,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,qBAY7C,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAE/D,CAAC"}
\ No newline at end of file
+{"version":3,"file":"bridge.d.cts","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAG3C,OAAO,KAAK,EAAE,qBAAqB,EAAE,qBAAiB;AAGtD,eAAO,MAAM,wBAAwB,qHAY3B,CAAC;AAEX,MAAM,MAAM,qBAAqB,GAAG,CAAC,OAAO,wBAAwB,CAAC,CAAC,MAAM,CAAC,CAAC;AAE9E,eAAO,MAAM,uBAAuB,0CAA0C,CAAC;AAC/E,eAAO,MAAM,wBAAwB,sCAAsC,CAAC;AAE5E,oBAAY,cAAc;IACxB,SAAS,cAAc;IACvB,MAAM,WAAW;CAClB;AAED,eAAO,MAAM,gBAAgB,+CAA+C,CAAC;AAC7E,eAAO,MAAM,2BAA2B,+CACM,CAAC;AAC/C,eAAO,MAAM,4BAA4B,QAAU,CAAC;AACpD,eAAO,MAAM,6CAA6C,MAAM,CAAC;AAEjE,eAAO,MAAM,6BAA6B,WAAW,CAAC;AACtD,eAAO,MAAM,uBAAuB,MAAM,CAAC;AAC3C,eAAO,MAAM,kBAAkB,QAAQ,CAAC;AACxC,eAAO,MAAM,mBAAmB,QAAY,CAAC;AAC7C,eAAO,MAAM,yBAAyB,IAAI,CAAC;AAE3C,eAAO,MAAM,sBAAsB,qBAAqB,CAAC;AAEzD,eAAO,MAAM,2BAA2B;;;;;;CAMvC,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,qBAY7C,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAE/D,CAAC"}
\ No newline at end of file
diff --git a/dist/constants/bridge.d.mts b/dist/constants/bridge.d.mts
index d766289f418f6775f5f8527a53c80f61cadaf1c5..d254fd3bff58a42789c7aeb33096f2d4541966c9 100644
--- a/dist/constants/bridge.d.mts
+++ b/dist/constants/bridge.d.mts
@@ -13,7 +13,7 @@ export declare const ETH_USDT_ADDRESS = "0xdac17f958d2ee523a2206206994597c13d831
 export declare const METABRIDGE_ETHEREUM_ADDRESS = "0x0439e60F02a8900a951603950d8D4527f400C3f1";
 export declare const BRIDGE_QUOTE_MAX_ETA_SECONDS: number;
 export declare const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5;
-export declare const BRIDGE_PREFERRED_GAS_ESTIMATE = "high";
+export declare const BRIDGE_PREFERRED_GAS_ESTIMATE = "medium";
 export declare const BRIDGE_DEFAULT_SLIPPAGE = 0.5;
 export declare const BRIDGE_MM_FEE_RATE = 0.875;
 export declare const REFRESH_INTERVAL_MS: number;
diff --git a/dist/constants/bridge.d.mts.map b/dist/constants/bridge.d.mts.map
index 3c10be6654c306cfc21d4a8ee8ea010f33e2bcf2..54ec2e5e56332b9fa1268ddd7220028dd076eb1b 100644
--- a/dist/constants/bridge.d.mts.map
+++ b/dist/constants/bridge.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"bridge.d.mts","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAG3C,OAAO,KAAK,EAAE,qBAAqB,EAAE,qBAAiB;AAGtD,eAAO,MAAM,wBAAwB,qHAY3B,CAAC;AAEX,MAAM,MAAM,qBAAqB,GAAG,CAAC,OAAO,wBAAwB,CAAC,CAAC,MAAM,CAAC,CAAC;AAE9E,eAAO,MAAM,uBAAuB,0CAA0C,CAAC;AAC/E,eAAO,MAAM,wBAAwB,sCAAsC,CAAC;AAE5E,oBAAY,cAAc;IACxB,SAAS,cAAc;IACvB,MAAM,WAAW;CAClB;AAED,eAAO,MAAM,gBAAgB,+CAA+C,CAAC;AAC7E,eAAO,MAAM,2BAA2B,+CACM,CAAC;AAC/C,eAAO,MAAM,4BAA4B,QAAU,CAAC;AACpD,eAAO,MAAM,6CAA6C,MAAM,CAAC;AAEjE,eAAO,MAAM,6BAA6B,SAAS,CAAC;AACpD,eAAO,MAAM,uBAAuB,MAAM,CAAC;AAC3C,eAAO,MAAM,kBAAkB,QAAQ,CAAC;AACxC,eAAO,MAAM,mBAAmB,QAAY,CAAC;AAC7C,eAAO,MAAM,yBAAyB,IAAI,CAAC;AAE3C,eAAO,MAAM,sBAAsB,qBAAqB,CAAC;AAEzD,eAAO,MAAM,2BAA2B;;;;;;CAMvC,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,qBAY7C,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAE/D,CAAC"}
\ No newline at end of file
+{"version":3,"file":"bridge.d.mts","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAG3C,OAAO,KAAK,EAAE,qBAAqB,EAAE,qBAAiB;AAGtD,eAAO,MAAM,wBAAwB,qHAY3B,CAAC;AAEX,MAAM,MAAM,qBAAqB,GAAG,CAAC,OAAO,wBAAwB,CAAC,CAAC,MAAM,CAAC,CAAC;AAE9E,eAAO,MAAM,uBAAuB,0CAA0C,CAAC;AAC/E,eAAO,MAAM,wBAAwB,sCAAsC,CAAC;AAE5E,oBAAY,cAAc;IACxB,SAAS,cAAc;IACvB,MAAM,WAAW;CAClB;AAED,eAAO,MAAM,gBAAgB,+CAA+C,CAAC;AAC7E,eAAO,MAAM,2BAA2B,+CACM,CAAC;AAC/C,eAAO,MAAM,4BAA4B,QAAU,CAAC;AACpD,eAAO,MAAM,6CAA6C,MAAM,CAAC;AAEjE,eAAO,MAAM,6BAA6B,WAAW,CAAC;AACtD,eAAO,MAAM,uBAAuB,MAAM,CAAC;AAC3C,eAAO,MAAM,kBAAkB,QAAQ,CAAC;AACxC,eAAO,MAAM,mBAAmB,QAAY,CAAC;AAC7C,eAAO,MAAM,yBAAyB,IAAI,CAAC;AAE3C,eAAO,MAAM,sBAAsB,qBAAqB,CAAC;AAEzD,eAAO,MAAM,2BAA2B;;;;;;CAMvC,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,qBAY7C,CAAC;AAEF,eAAO,MAAM,+BAA+B,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAE/D,CAAC"}
\ No newline at end of file
diff --git a/dist/constants/bridge.mjs b/dist/constants/bridge.mjs
index 6750e9ca7b69eecb1f0ca49f09beedea4a804f3b..9e1a732a48fbe6142e03fd5d7cab1000b78e761b 100644
--- a/dist/constants/bridge.mjs
+++ b/dist/constants/bridge.mjs
@@ -26,7 +26,7 @@ export const ETH_USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';
 export const METABRIDGE_ETHEREUM_ADDRESS = '0x0439e60F02a8900a951603950d8D4527f400C3f1';
 export const BRIDGE_QUOTE_MAX_ETA_SECONDS = 60 * 60; // 1 hour
 export const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5; // if a quote returns in x times less return than the best quote, ignore it
-export const BRIDGE_PREFERRED_GAS_ESTIMATE = 'high';
+export const BRIDGE_PREFERRED_GAS_ESTIMATE = 'medium';
 export const BRIDGE_DEFAULT_SLIPPAGE = 0.5;
 export const BRIDGE_MM_FEE_RATE = 0.875;
 export const REFRESH_INTERVAL_MS = 30 * 1000;
diff --git a/dist/constants/bridge.mjs.map b/dist/constants/bridge.mjs.map
index bfe61763f818649bce56a51eb158a03e4ed340a0..27566410b9447c6116ae4734c2b7ad35b9bec460 100644
--- a/dist/constants/bridge.mjs.map
+++ b/dist/constants/bridge.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"bridge.mjs","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,iCAAiC;AACvD,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AAGjD,OAAO,EAAE,SAAS,EAAE,qBAAiB;AAGrC,+BAA+B;AAC/B,MAAM,CAAC,MAAM,wBAAwB,GAAG;IACtC,SAAS,CAAC,OAAO;IACjB,SAAS,CAAC,GAAG;IACb,SAAS,CAAC,OAAO;IACjB,SAAS,CAAC,UAAU;IACpB,SAAS,CAAC,SAAS;IACnB,SAAS,CAAC,QAAQ;IAClB,SAAS,CAAC,QAAQ;IAClB,SAAS,CAAC,aAAa;IACvB,SAAS,CAAC,IAAI;IACd,SAAS,CAAC,GAAG;IACb,QAAQ,CAAC,OAAO;CACR,CAAC;AAIX,MAAM,CAAC,MAAM,uBAAuB,GAAG,uCAAuC,CAAC;AAC/E,MAAM,CAAC,MAAM,wBAAwB,GAAG,mCAAmC,CAAC;AAE5E,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,4CAA4C,CAAC;AAC7E,MAAM,CAAC,MAAM,2BAA2B,GACtC,4CAA4C,CAAC;AAC/C,MAAM,CAAC,MAAM,4BAA4B,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,SAAS;AAC9D,MAAM,CAAC,MAAM,6CAA6C,GAAG,GAAG,CAAC,CAAC,2EAA2E;AAE7I,MAAM,CAAC,MAAM,6BAA6B,GAAG,MAAM,CAAC;AACpD,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAC3C,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,CAAC;AACxC,MAAM,CAAC,MAAM,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC;AAC7C,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,CAAC;AAE3C,MAAM,CAAC,MAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAEzD,MAAM,CAAC,MAAM,2BAA2B,GAAG;IACzC,cAAc,EAAE,OAAO;IACvB,WAAW,EAAE,mBAAmB;IAChC,eAAe,EAAE,yBAAyB;IAC1C,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,EAAE;CACX,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAA0B;IACpE,YAAY,EAAE;QACZ,eAAe,EAAE,WAAW;KAC7B;IACD,qBAAqB,EAAE,IAAI;IAC3B,MAAM,EAAE,EAAE;IACV,iBAAiB,EAAE,IAAI;IACvB,mBAAmB,EAAE,IAAI;IACzB,eAAe,EAAE,IAAI;IACrB,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,EAAE;IACtB,wCAAwC,EAAE,GAAG;CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAwB;IAClE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,2BAA2B;CACjD,CAAC","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport { SolScope } from '@metamask/keyring-api';\nimport type { Hex } from '@metamask/utils';\n\nimport { CHAIN_IDS } from './chains';\nimport type { BridgeControllerState } from '../types';\n\n// TODO read from feature flags\nexport const ALLOWED_BRIDGE_CHAIN_IDS = [\n  CHAIN_IDS.MAINNET,\n  CHAIN_IDS.BSC,\n  CHAIN_IDS.POLYGON,\n  CHAIN_IDS.ZKSYNC_ERA,\n  CHAIN_IDS.AVALANCHE,\n  CHAIN_IDS.OPTIMISM,\n  CHAIN_IDS.ARBITRUM,\n  CHAIN_IDS.LINEA_MAINNET,\n  CHAIN_IDS.BASE,\n  CHAIN_IDS.SEI,\n  SolScope.Mainnet,\n] as const;\n\nexport type AllowedBridgeChainIds = (typeof ALLOWED_BRIDGE_CHAIN_IDS)[number];\n\nexport const BRIDGE_DEV_API_BASE_URL = 'https://bridge.dev-api.cx.metamask.io';\nexport const BRIDGE_PROD_API_BASE_URL = 'https://bridge.api.cx.metamask.io';\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport const ETH_USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';\nexport const METABRIDGE_ETHEREUM_ADDRESS =\n  '0x0439e60F02a8900a951603950d8D4527f400C3f1';\nexport const BRIDGE_QUOTE_MAX_ETA_SECONDS = 60 * 60; // 1 hour\nexport const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5; // if a quote returns in x times less return than the best quote, ignore it\n\nexport const BRIDGE_PREFERRED_GAS_ESTIMATE = 'high';\nexport const BRIDGE_DEFAULT_SLIPPAGE = 0.5;\nexport const BRIDGE_MM_FEE_RATE = 0.875;\nexport const REFRESH_INTERVAL_MS = 30 * 1000;\nexport const DEFAULT_MAX_REFRESH_COUNT = 5;\n\nexport const BRIDGE_CONTROLLER_NAME = 'BridgeController';\n\nexport const DEFAULT_FEATURE_FLAG_CONFIG = {\n  minimumVersion: '0.0.0',\n  refreshRate: REFRESH_INTERVAL_MS,\n  maxRefreshCount: DEFAULT_MAX_REFRESH_COUNT,\n  support: false,\n  chains: {},\n};\n\nexport const DEFAULT_BRIDGE_CONTROLLER_STATE: BridgeControllerState = {\n  quoteRequest: {\n    srcTokenAddress: AddressZero,\n  },\n  quotesInitialLoadTime: null,\n  quotes: [],\n  quotesLastFetched: null,\n  quotesLoadingStatus: null,\n  quoteFetchError: null,\n  quotesRefreshCount: 0,\n  assetExchangeRates: {},\n  minimumBalanceForRentExemptionInLamports: '0',\n};\n\nexport const METABRIDGE_CHAIN_TO_ADDRESS_MAP: Record<Hex, string> = {\n  [CHAIN_IDS.MAINNET]: METABRIDGE_ETHEREUM_ADDRESS,\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"bridge.mjs","sourceRoot":"","sources":["../../src/constants/bridge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,iCAAiC;AACvD,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AAGjD,OAAO,EAAE,SAAS,EAAE,qBAAiB;AAGrC,+BAA+B;AAC/B,MAAM,CAAC,MAAM,wBAAwB,GAAG;IACtC,SAAS,CAAC,OAAO;IACjB,SAAS,CAAC,GAAG;IACb,SAAS,CAAC,OAAO;IACjB,SAAS,CAAC,UAAU;IACpB,SAAS,CAAC,SAAS;IACnB,SAAS,CAAC,QAAQ;IAClB,SAAS,CAAC,QAAQ;IAClB,SAAS,CAAC,aAAa;IACvB,SAAS,CAAC,IAAI;IACd,SAAS,CAAC,GAAG;IACb,QAAQ,CAAC,OAAO;CACR,CAAC;AAIX,MAAM,CAAC,MAAM,uBAAuB,GAAG,uCAAuC,CAAC;AAC/E,MAAM,CAAC,MAAM,wBAAwB,GAAG,mCAAmC,CAAC;AAE5E,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,4CAA4C,CAAC;AAC7E,MAAM,CAAC,MAAM,2BAA2B,GACtC,4CAA4C,CAAC;AAC/C,MAAM,CAAC,MAAM,4BAA4B,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,SAAS;AAC9D,MAAM,CAAC,MAAM,6CAA6C,GAAG,GAAG,CAAC,CAAC,2EAA2E;AAE7I,MAAM,CAAC,MAAM,6BAA6B,GAAG,QAAQ,CAAC;AACtD,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAC3C,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,CAAC;AACxC,MAAM,CAAC,MAAM,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC;AAC7C,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,CAAC;AAE3C,MAAM,CAAC,MAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAEzD,MAAM,CAAC,MAAM,2BAA2B,GAAG;IACzC,cAAc,EAAE,OAAO;IACvB,WAAW,EAAE,mBAAmB;IAChC,eAAe,EAAE,yBAAyB;IAC1C,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,EAAE;CACX,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAA0B;IACpE,YAAY,EAAE;QACZ,eAAe,EAAE,WAAW;KAC7B;IACD,qBAAqB,EAAE,IAAI;IAC3B,MAAM,EAAE,EAAE;IACV,iBAAiB,EAAE,IAAI;IACvB,mBAAmB,EAAE,IAAI;IACzB,eAAe,EAAE,IAAI;IACrB,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,EAAE;IACtB,wCAAwC,EAAE,GAAG;CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAwB;IAClE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,2BAA2B;CACjD,CAAC","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport { SolScope } from '@metamask/keyring-api';\nimport type { Hex } from '@metamask/utils';\n\nimport { CHAIN_IDS } from './chains';\nimport type { BridgeControllerState } from '../types';\n\n// TODO read from feature flags\nexport const ALLOWED_BRIDGE_CHAIN_IDS = [\n  CHAIN_IDS.MAINNET,\n  CHAIN_IDS.BSC,\n  CHAIN_IDS.POLYGON,\n  CHAIN_IDS.ZKSYNC_ERA,\n  CHAIN_IDS.AVALANCHE,\n  CHAIN_IDS.OPTIMISM,\n  CHAIN_IDS.ARBITRUM,\n  CHAIN_IDS.LINEA_MAINNET,\n  CHAIN_IDS.BASE,\n  CHAIN_IDS.SEI,\n  SolScope.Mainnet,\n] as const;\n\nexport type AllowedBridgeChainIds = (typeof ALLOWED_BRIDGE_CHAIN_IDS)[number];\n\nexport const BRIDGE_DEV_API_BASE_URL = 'https://bridge.dev-api.cx.metamask.io';\nexport const BRIDGE_PROD_API_BASE_URL = 'https://bridge.api.cx.metamask.io';\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport const ETH_USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';\nexport const METABRIDGE_ETHEREUM_ADDRESS =\n  '0x0439e60F02a8900a951603950d8D4527f400C3f1';\nexport const BRIDGE_QUOTE_MAX_ETA_SECONDS = 60 * 60; // 1 hour\nexport const BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = 0.5; // if a quote returns in x times less return than the best quote, ignore it\n\nexport const BRIDGE_PREFERRED_GAS_ESTIMATE = 'medium';\nexport const BRIDGE_DEFAULT_SLIPPAGE = 0.5;\nexport const BRIDGE_MM_FEE_RATE = 0.875;\nexport const REFRESH_INTERVAL_MS = 30 * 1000;\nexport const DEFAULT_MAX_REFRESH_COUNT = 5;\n\nexport const BRIDGE_CONTROLLER_NAME = 'BridgeController';\n\nexport const DEFAULT_FEATURE_FLAG_CONFIG = {\n  minimumVersion: '0.0.0',\n  refreshRate: REFRESH_INTERVAL_MS,\n  maxRefreshCount: DEFAULT_MAX_REFRESH_COUNT,\n  support: false,\n  chains: {},\n};\n\nexport const DEFAULT_BRIDGE_CONTROLLER_STATE: BridgeControllerState = {\n  quoteRequest: {\n    srcTokenAddress: AddressZero,\n  },\n  quotesInitialLoadTime: null,\n  quotes: [],\n  quotesLastFetched: null,\n  quotesLoadingStatus: null,\n  quoteFetchError: null,\n  quotesRefreshCount: 0,\n  assetExchangeRates: {},\n  minimumBalanceForRentExemptionInLamports: '0',\n};\n\nexport const METABRIDGE_CHAIN_TO_ADDRESS_MAP: Record<Hex, string> = {\n  [CHAIN_IDS.MAINNET]: METABRIDGE_ETHEREUM_ADDRESS,\n};\n"]}
\ No newline at end of file
diff --git a/dist/index.cjs b/dist/index.cjs
index ad492dda2fcdc5491b01d45efd5f722e297bd270..36e68023078274e811664311eeca9257f12e2461 100644
--- a/dist/index.cjs
+++ b/dist/index.cjs
@@ -1,7 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.fetchBridgeTokens = exports.calcLatestSrcBalance = exports.calcSlippagePercentage = exports.formatEtaInMinutes = exports.isValidQuoteRequest = exports.isCrossChain = exports.getDefaultBridgeControllerState = exports.getNativeAssetForChainId = exports.isSolanaChainId = exports.isNativeAddress = exports.isEthUsdt = exports.getEthUsdtResetData = exports.MetricsSwapType = exports.MetricsActionType = exports.SWAPS_API_V2_BASE_URL = exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = exports.BRIDGE_PROD_API_BASE_URL = exports.BRIDGE_DEV_API_BASE_URL = exports.METABRIDGE_CHAIN_TO_ADDRESS_MAP = exports.DEFAULT_BRIDGE_CONTROLLER_STATE = exports.DEFAULT_MAX_REFRESH_COUNT = exports.REFRESH_INTERVAL_MS = exports.BRIDGE_MM_FEE_RATE = exports.BRIDGE_DEFAULT_SLIPPAGE = exports.BRIDGE_PREFERRED_GAS_ESTIMATE = exports.BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = exports.BRIDGE_QUOTE_MAX_ETA_SECONDS = exports.BRIDGE_CONTROLLER_NAME = exports.BridgeClientId = exports.ALLOWED_BRIDGE_CHAIN_IDS = exports.FeatureId = exports.BridgeAssetSchema = exports.ActionTypes = exports.FeeType = exports.BridgeBackgroundAction = exports.BridgeUserAction = exports.RequestStatus = exports.ChainId = exports.SortOrder = exports.AssetType = exports.StatusTypes = exports.isCustomSlippage = exports.isHardwareWallet = exports.getSwapType = exports.getActionType = exports.getRequestParams = exports.formatProviderLabel = exports.UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY = exports.UnifiedSwapBridgeEventName = exports.BridgeController = void 0;
-exports.getBridgeFeatureFlags = exports.DEFAULT_FEATURE_FLAG_CONFIG = exports.selectMinimumBalanceForRentExemptionInSOL = exports.selectBridgeFeatureFlags = exports.selectIsQuoteExpired = exports.selectExchangeRateByChainIdAndAddress = exports.selectBridgeQuotes = exports.formatAddressToAssetId = exports.formatAddressToCaipReference = exports.formatChainIdToHex = exports.formatChainIdToCaip = void 0;
+exports.formatChainIdToCaip = exports.fetchBridgeTokens = exports.calcLatestSrcBalance = exports.calcSlippagePercentage = exports.formatEtaInMinutes = exports.isValidQuoteRequest = exports.isCrossChain = exports.getDefaultBridgeControllerState = exports.getNativeAssetForChainId = exports.isSolanaChainId = exports.isNativeAddress = exports.isEthUsdt = exports.getEthUsdtResetData = exports.MetricsSwapType = exports.MetricsActionType = exports.SWAPS_API_V2_BASE_URL = exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = exports.BRIDGE_PROD_API_BASE_URL = exports.BRIDGE_DEV_API_BASE_URL = exports.METABRIDGE_CHAIN_TO_ADDRESS_MAP = exports.DEFAULT_BRIDGE_CONTROLLER_STATE = exports.DEFAULT_MAX_REFRESH_COUNT = exports.REFRESH_INTERVAL_MS = exports.BRIDGE_MM_FEE_RATE = exports.BRIDGE_DEFAULT_SLIPPAGE = exports.BRIDGE_PREFERRED_GAS_ESTIMATE = exports.BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE = exports.BRIDGE_QUOTE_MAX_ETA_SECONDS = exports.BRIDGE_CONTROLLER_NAME = exports.BridgeClientId = exports.ALLOWED_BRIDGE_CHAIN_IDS = exports.BridgeAssetSchema = exports.ActionTypes = exports.FeeType = exports.BridgeBackgroundAction = exports.BridgeUserAction = exports.RequestStatus = exports.ChainId = exports.SortOrder = exports.AssetType = exports.StatusTypes = exports.isCustomSlippage = exports.isHardwareWallet = exports.getSwapType = exports.getActionType = exports.getRequestParams = exports.formatProviderLabel = exports.UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY = exports.UnifiedSwapBridgeEventName = exports.BridgeController = void 0;
+exports.getBridgeFeatureFlags = exports.DEFAULT_FEATURE_FLAG_CONFIG = exports.selectMinimumBalanceForRentExemptionInSOL = exports.selectBridgeFeatureFlags = exports.selectIsQuoteExpired = exports.selectExchangeRateByChainIdAndAddress = exports.selectBridgeQuotes = exports.formatAddressToAssetId = exports.formatAddressToCaipReference = exports.formatChainIdToHex = void 0;
 var bridge_controller_1 = require("./bridge-controller.cjs");
 Object.defineProperty(exports, "BridgeController", { enumerable: true, get: function () { return bridge_controller_1.BridgeController; } });
 var constants_1 = require("./utils/metrics/constants.cjs");
@@ -27,7 +27,6 @@ var validators_1 = require("./utils/validators.cjs");
 Object.defineProperty(exports, "FeeType", { enumerable: true, get: function () { return validators_1.FeeType; } });
 Object.defineProperty(exports, "ActionTypes", { enumerable: true, get: function () { return validators_1.ActionTypes; } });
 Object.defineProperty(exports, "BridgeAssetSchema", { enumerable: true, get: function () { return validators_1.BridgeAssetSchema; } });
-Object.defineProperty(exports, "FeatureId", { enumerable: true, get: function () { return validators_1.FeatureId; } });
 var bridge_1 = require("./constants/bridge.cjs");
 Object.defineProperty(exports, "ALLOWED_BRIDGE_CHAIN_IDS", { enumerable: true, get: function () { return bridge_1.ALLOWED_BRIDGE_CHAIN_IDS; } });
 Object.defineProperty(exports, "BridgeClientId", { enumerable: true, get: function () { return bridge_1.BridgeClientId; } });
diff --git a/dist/index.cjs.map b/dist/index.cjs.map
index 4222dc78e296e3cd53d012b5d49b9fee62ec5486..2681cd86c9abd9b492bcffca15994dcb8741b654 100644
--- a/dist/index.cjs.map
+++ b/dist/index.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;AAAA,6DAAuD;AAA9C,qHAAA,gBAAgB,OAAA;AAEzB,2DAGmC;AAFjC,uHAAA,0BAA0B,OAAA;AAC1B,+HAAA,kCAAkC,OAAA;AAYpC,6DAOoC;AANlC,iHAAA,mBAAmB,OAAA;AACnB,8GAAA,gBAAgB,OAAA;AAChB,2GAAA,aAAa,OAAA;AACb,yGAAA,WAAW,OAAA;AACX,8GAAA,gBAAgB,OAAA;AAChB,8GAAA,gBAAgB,OAAA;AA4BlB,qCAAsC;AAA7B,oGAAA,WAAW,OAAA;AAEpB,qCAOiB;AANf,kGAAA,SAAS,OAAA;AACT,kGAAA,SAAS,OAAA;AACT,gGAAA,OAAO,OAAA;AACP,sGAAA,aAAa,OAAA;AACb,yGAAA,gBAAgB,OAAA;AAChB,+GAAA,sBAAsB,OAAA;AAGxB,qDAK4B;AAJ1B,qGAAA,OAAO,OAAA;AACP,yGAAA,WAAW,OAAA;AACX,+GAAA,iBAAiB,OAAA;AACjB,uGAAA,SAAS,OAAA;AAGX,iDAe4B;AAd1B,kHAAA,wBAAwB,OAAA;AACxB,wGAAA,cAAc,OAAA;AACd,gHAAA,sBAAsB,OAAA;AACtB,sHAAA,4BAA4B,OAAA;AAC5B,uIAAA,6CAA6C,OAAA;AAC7C,uHAAA,6BAA6B,OAAA;AAC7B,iHAAA,uBAAuB,OAAA;AACvB,4GAAA,kBAAkB,OAAA;AAClB,6GAAA,mBAAmB,OAAA;AACnB,mHAAA,yBAAyB,OAAA;AACzB,yHAAA,+BAA+B,OAAA;AAC/B,yHAAA,+BAA+B,OAAA;AAC/B,iHAAA,uBAAuB,OAAA;AACvB,kHAAA,wBAAwB,OAAA;AAK1B,iDAS4B;AAJ1B;;GAEG;AACH,yHAAA,+BAA+B,OAAA;AAGjC,+CAA0D;AAAjD,8GAAA,qBAAqB,OAAA;AAE9B,2DAA+E;AAAtE,8GAAA,iBAAiB,OAAA;AAAE,4GAAA,eAAe,OAAA;AAE3C,6CAQwB;AAPtB,6GAAA,mBAAmB,OAAA;AACnB,mGAAA,SAAS,OAAA;AACT,yGAAA,eAAe,OAAA;AACf,yGAAA,eAAe,OAAA;AACf,kHAAA,wBAAwB,OAAA;AACxB,yHAAA,+BAA+B,OAAA;AAC/B,sGAAA,YAAY,OAAA;AAGd,2CAIuB;AAHrB,4GAAA,mBAAmB,OAAA;AACnB,2GAAA,kBAAkB,OAAA;AAClB,+GAAA,sBAAsB,OAAA;AAGxB,+CAAuD;AAA9C,+GAAA,oBAAoB,OAAA;AAE7B,2CAAkD;AAAzC,0GAAA,iBAAiB,OAAA;AAE1B,+DAKiC;AAJ/B,sHAAA,mBAAmB,OAAA;AACnB,qHAAA,kBAAkB,OAAA;AAClB,+HAAA,4BAA4B,OAAA;AAC5B,yHAAA,sBAAsB,OAAA;AAGxB,6CAOqB;AANnB,+GAAA,kBAAkB,OAAA;AAElB,kIAAA,qCAAqC,OAAA;AACrC,iHAAA,oBAAoB,OAAA;AACpB,qHAAA,wBAAwB,OAAA;AACxB,sIAAA,yCAAyC,OAAA;AAG3C,iDAAiE;AAAxD,qHAAA,2BAA2B,OAAA;AAEpC,2DAA8D;AAArD,sHAAA,qBAAqB,OAAA","sourcesContent":["export { BridgeController } from './bridge-controller';\n\nexport {\n  UnifiedSwapBridgeEventName,\n  UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY,\n} from './utils/metrics/constants';\n\nexport type {\n  RequiredEventContextFromClient,\n  CrossChainSwapsEventProperties,\n  TradeData,\n  RequestParams,\n  RequestMetadata,\n  TxStatusData,\n} from './utils/metrics/types';\n\nexport {\n  formatProviderLabel,\n  getRequestParams,\n  getActionType,\n  getSwapType,\n  isHardwareWallet,\n  isCustomSlippage,\n} from './utils/metrics/properties';\n\nexport type {\n  ChainConfiguration,\n  L1GasFees,\n  SolanaFees,\n  QuoteMetadata,\n  GasMultiplierByChainId,\n  FeatureFlagResponse,\n  BridgeAsset,\n  GenericQuoteRequest,\n  Protocol,\n  TokenAmountValues,\n  Step,\n  RefuelData,\n  Quote,\n  QuoteResponse,\n  FeeData,\n  TxData,\n  BridgeControllerState,\n  BridgeControllerAction,\n  BridgeControllerActions,\n  BridgeControllerEvents,\n  BridgeControllerMessenger,\n  FeatureFlagsPlatformConfig,\n} from './types';\n\nexport { StatusTypes } from './types';\n\nexport {\n  AssetType,\n  SortOrder,\n  ChainId,\n  RequestStatus,\n  BridgeUserAction,\n  BridgeBackgroundAction,\n} from './types';\n\nexport {\n  FeeType,\n  ActionTypes,\n  BridgeAssetSchema,\n  FeatureId,\n} from './utils/validators';\n\nexport {\n  ALLOWED_BRIDGE_CHAIN_IDS,\n  BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_QUOTE_MAX_ETA_SECONDS,\n  BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE,\n  BRIDGE_PREFERRED_GAS_ESTIMATE,\n  BRIDGE_DEFAULT_SLIPPAGE,\n  BRIDGE_MM_FEE_RATE,\n  REFRESH_INTERVAL_MS,\n  DEFAULT_MAX_REFRESH_COUNT,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  BRIDGE_DEV_API_BASE_URL,\n  BRIDGE_PROD_API_BASE_URL,\n} from './constants/bridge';\n\nexport type { AllowedBridgeChainIds } from './constants/bridge';\n\nexport {\n  /**\n   * @deprecated This type should not be used. Use {@link BridgeAsset} instead.\n   */\n  type SwapsTokenObject,\n  /**\n   * @deprecated This map should not be used. Use getNativeAssetForChainId\" } instead.\n   */\n  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,\n} from './constants/tokens';\n\nexport { SWAPS_API_V2_BASE_URL } from './constants/swaps';\n\nexport { MetricsActionType, MetricsSwapType } from './utils/metrics/constants';\n\nexport {\n  getEthUsdtResetData,\n  isEthUsdt,\n  isNativeAddress,\n  isSolanaChainId,\n  getNativeAssetForChainId,\n  getDefaultBridgeControllerState,\n  isCrossChain,\n} from './utils/bridge';\n\nexport {\n  isValidQuoteRequest,\n  formatEtaInMinutes,\n  calcSlippagePercentage,\n} from './utils/quote';\n\nexport { calcLatestSrcBalance } from './utils/balance';\n\nexport { fetchBridgeTokens } from './utils/fetch';\n\nexport {\n  formatChainIdToCaip,\n  formatChainIdToHex,\n  formatAddressToCaipReference,\n  formatAddressToAssetId,\n} from './utils/caip-formatters';\n\nexport {\n  selectBridgeQuotes,\n  type BridgeAppState,\n  selectExchangeRateByChainIdAndAddress,\n  selectIsQuoteExpired,\n  selectBridgeFeatureFlags,\n  selectMinimumBalanceForRentExemptionInSOL,\n} from './selectors';\n\nexport { DEFAULT_FEATURE_FLAG_CONFIG } from './constants/bridge';\n\nexport { getBridgeFeatureFlags } from './utils/feature-flags';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.cjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;AAAA,6DAAuD;AAA9C,qHAAA,gBAAgB,OAAA;AAEzB,2DAGmC;AAFjC,uHAAA,0BAA0B,OAAA;AAC1B,+HAAA,kCAAkC,OAAA;AAYpC,6DAOoC;AANlC,iHAAA,mBAAmB,OAAA;AACnB,8GAAA,gBAAgB,OAAA;AAChB,2GAAA,aAAa,OAAA;AACb,yGAAA,WAAW,OAAA;AACX,8GAAA,gBAAgB,OAAA;AAChB,8GAAA,gBAAgB,OAAA;AA4BlB,qCAAsC;AAA7B,oGAAA,WAAW,OAAA;AAEpB,qCAOiB;AANf,kGAAA,SAAS,OAAA;AACT,kGAAA,SAAS,OAAA;AACT,gGAAA,OAAO,OAAA;AACP,sGAAA,aAAa,OAAA;AACb,yGAAA,gBAAgB,OAAA;AAChB,+GAAA,sBAAsB,OAAA;AAGxB,qDAA6E;AAApE,qGAAA,OAAO,OAAA;AAAE,yGAAA,WAAW,OAAA;AAAE,+GAAA,iBAAiB,OAAA;AAEhD,iDAe4B;AAd1B,kHAAA,wBAAwB,OAAA;AACxB,wGAAA,cAAc,OAAA;AACd,gHAAA,sBAAsB,OAAA;AACtB,sHAAA,4BAA4B,OAAA;AAC5B,uIAAA,6CAA6C,OAAA;AAC7C,uHAAA,6BAA6B,OAAA;AAC7B,iHAAA,uBAAuB,OAAA;AACvB,4GAAA,kBAAkB,OAAA;AAClB,6GAAA,mBAAmB,OAAA;AACnB,mHAAA,yBAAyB,OAAA;AACzB,yHAAA,+BAA+B,OAAA;AAC/B,yHAAA,+BAA+B,OAAA;AAC/B,iHAAA,uBAAuB,OAAA;AACvB,kHAAA,wBAAwB,OAAA;AAK1B,iDAS4B;AAJ1B;;GAEG;AACH,yHAAA,+BAA+B,OAAA;AAGjC,+CAA0D;AAAjD,8GAAA,qBAAqB,OAAA;AAE9B,2DAA+E;AAAtE,8GAAA,iBAAiB,OAAA;AAAE,4GAAA,eAAe,OAAA;AAE3C,6CAQwB;AAPtB,6GAAA,mBAAmB,OAAA;AACnB,mGAAA,SAAS,OAAA;AACT,yGAAA,eAAe,OAAA;AACf,yGAAA,eAAe,OAAA;AACf,kHAAA,wBAAwB,OAAA;AACxB,yHAAA,+BAA+B,OAAA;AAC/B,sGAAA,YAAY,OAAA;AAGd,2CAIuB;AAHrB,4GAAA,mBAAmB,OAAA;AACnB,2GAAA,kBAAkB,OAAA;AAClB,+GAAA,sBAAsB,OAAA;AAGxB,+CAAuD;AAA9C,+GAAA,oBAAoB,OAAA;AAE7B,2CAAkD;AAAzC,0GAAA,iBAAiB,OAAA;AAE1B,+DAKiC;AAJ/B,sHAAA,mBAAmB,OAAA;AACnB,qHAAA,kBAAkB,OAAA;AAClB,+HAAA,4BAA4B,OAAA;AAC5B,yHAAA,sBAAsB,OAAA;AAGxB,6CAOqB;AANnB,+GAAA,kBAAkB,OAAA;AAElB,kIAAA,qCAAqC,OAAA;AACrC,iHAAA,oBAAoB,OAAA;AACpB,qHAAA,wBAAwB,OAAA;AACxB,sIAAA,yCAAyC,OAAA;AAG3C,iDAAiE;AAAxD,qHAAA,2BAA2B,OAAA;AAEpC,2DAA8D;AAArD,sHAAA,qBAAqB,OAAA","sourcesContent":["export { BridgeController } from './bridge-controller';\n\nexport {\n  UnifiedSwapBridgeEventName,\n  UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY,\n} from './utils/metrics/constants';\n\nexport type {\n  RequiredEventContextFromClient,\n  CrossChainSwapsEventProperties,\n  TradeData,\n  RequestParams,\n  RequestMetadata,\n  TxStatusData,\n} from './utils/metrics/types';\n\nexport {\n  formatProviderLabel,\n  getRequestParams,\n  getActionType,\n  getSwapType,\n  isHardwareWallet,\n  isCustomSlippage,\n} from './utils/metrics/properties';\n\nexport type {\n  ChainConfiguration,\n  L1GasFees,\n  SolanaFees,\n  QuoteMetadata,\n  GasMultiplierByChainId,\n  FeatureFlagResponse,\n  BridgeAsset,\n  GenericQuoteRequest,\n  Protocol,\n  TokenAmountValues,\n  Step,\n  RefuelData,\n  Quote,\n  QuoteResponse,\n  FeeData,\n  TxData,\n  BridgeControllerState,\n  BridgeControllerAction,\n  BridgeControllerActions,\n  BridgeControllerEvents,\n  BridgeControllerMessenger,\n  FeatureFlagsPlatformConfig,\n} from './types';\n\nexport { StatusTypes } from './types';\n\nexport {\n  AssetType,\n  SortOrder,\n  ChainId,\n  RequestStatus,\n  BridgeUserAction,\n  BridgeBackgroundAction,\n} from './types';\n\nexport { FeeType, ActionTypes, BridgeAssetSchema } from './utils/validators';\n\nexport {\n  ALLOWED_BRIDGE_CHAIN_IDS,\n  BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_QUOTE_MAX_ETA_SECONDS,\n  BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE,\n  BRIDGE_PREFERRED_GAS_ESTIMATE,\n  BRIDGE_DEFAULT_SLIPPAGE,\n  BRIDGE_MM_FEE_RATE,\n  REFRESH_INTERVAL_MS,\n  DEFAULT_MAX_REFRESH_COUNT,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  BRIDGE_DEV_API_BASE_URL,\n  BRIDGE_PROD_API_BASE_URL,\n} from './constants/bridge';\n\nexport type { AllowedBridgeChainIds } from './constants/bridge';\n\nexport {\n  /**\n   * @deprecated This type should not be used. Use {@link BridgeAsset} instead.\n   */\n  type SwapsTokenObject,\n  /**\n   * @deprecated This map should not be used. Use getNativeAssetForChainId\" } instead.\n   */\n  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,\n} from './constants/tokens';\n\nexport { SWAPS_API_V2_BASE_URL } from './constants/swaps';\n\nexport { MetricsActionType, MetricsSwapType } from './utils/metrics/constants';\n\nexport {\n  getEthUsdtResetData,\n  isEthUsdt,\n  isNativeAddress,\n  isSolanaChainId,\n  getNativeAssetForChainId,\n  getDefaultBridgeControllerState,\n  isCrossChain,\n} from './utils/bridge';\n\nexport {\n  isValidQuoteRequest,\n  formatEtaInMinutes,\n  calcSlippagePercentage,\n} from './utils/quote';\n\nexport { calcLatestSrcBalance } from './utils/balance';\n\nexport { fetchBridgeTokens } from './utils/fetch';\n\nexport {\n  formatChainIdToCaip,\n  formatChainIdToHex,\n  formatAddressToCaipReference,\n  formatAddressToAssetId,\n} from './utils/caip-formatters';\n\nexport {\n  selectBridgeQuotes,\n  type BridgeAppState,\n  selectExchangeRateByChainIdAndAddress,\n  selectIsQuoteExpired,\n  selectBridgeFeatureFlags,\n  selectMinimumBalanceForRentExemptionInSOL,\n} from './selectors';\n\nexport { DEFAULT_FEATURE_FLAG_CONFIG } from './constants/bridge';\n\nexport { getBridgeFeatureFlags } from './utils/feature-flags';\n"]}
\ No newline at end of file
diff --git a/dist/index.d.cts b/dist/index.d.cts
index 2913daa638b6906bee83904a198a2ee2aaff1371..5dd75c5fb6f5dde040d20c36b7517552697a76b3 100644
--- a/dist/index.d.cts
+++ b/dist/index.d.cts
@@ -5,7 +5,7 @@ export { formatProviderLabel, getRequestParams, getActionType, getSwapType, isHa
 export type { ChainConfiguration, L1GasFees, SolanaFees, QuoteMetadata, GasMultiplierByChainId, FeatureFlagResponse, BridgeAsset, GenericQuoteRequest, Protocol, TokenAmountValues, Step, RefuelData, Quote, QuoteResponse, FeeData, TxData, BridgeControllerState, BridgeControllerAction, BridgeControllerActions, BridgeControllerEvents, BridgeControllerMessenger, FeatureFlagsPlatformConfig, } from "./types.cjs";
 export { StatusTypes } from "./types.cjs";
 export { AssetType, SortOrder, ChainId, RequestStatus, BridgeUserAction, BridgeBackgroundAction, } from "./types.cjs";
-export { FeeType, ActionTypes, BridgeAssetSchema, FeatureId, } from "./utils/validators.cjs";
+export { FeeType, ActionTypes, BridgeAssetSchema } from "./utils/validators.cjs";
 export { ALLOWED_BRIDGE_CHAIN_IDS, BridgeClientId, BRIDGE_CONTROLLER_NAME, BRIDGE_QUOTE_MAX_ETA_SECONDS, BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE, BRIDGE_PREFERRED_GAS_ESTIMATE, BRIDGE_DEFAULT_SLIPPAGE, BRIDGE_MM_FEE_RATE, REFRESH_INTERVAL_MS, DEFAULT_MAX_REFRESH_COUNT, DEFAULT_BRIDGE_CONTROLLER_STATE, METABRIDGE_CHAIN_TO_ADDRESS_MAP, BRIDGE_DEV_API_BASE_URL, BRIDGE_PROD_API_BASE_URL, } from "./constants/bridge.cjs";
 export type { AllowedBridgeChainIds } from "./constants/bridge.cjs";
 export { 
diff --git a/dist/index.d.cts.map b/dist/index.d.cts.map
index 2908d215d271ebb63aee7cc0bd75f3fa049b38a8..b8ae49ea0b658e96d05835f3ee528f9934386109 100644
--- a/dist/index.d.cts.map
+++ b/dist/index.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.cts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,gCAA4B;AAEvD,OAAO,EACL,0BAA0B,EAC1B,kCAAkC,GACnC,sCAAkC;AAEnC,YAAY,EACV,8BAA8B,EAC9B,8BAA8B,EAC9B,SAAS,EACT,aAAa,EACb,eAAe,EACf,YAAY,GACb,kCAA8B;AAE/B,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,gBAAgB,GACjB,uCAAmC;AAEpC,YAAY,EACV,kBAAkB,EAClB,SAAS,EACT,UAAU,EACV,aAAa,EACb,sBAAsB,EACtB,mBAAmB,EACnB,WAAW,EACX,mBAAmB,EACnB,QAAQ,EACR,iBAAiB,EACjB,IAAI,EACJ,UAAU,EACV,KAAK,EACL,aAAa,EACb,OAAO,EACP,MAAM,EACN,qBAAqB,EACrB,sBAAsB,EACtB,uBAAuB,EACvB,sBAAsB,EACtB,yBAAyB,EACzB,0BAA0B,GAC3B,oBAAgB;AAEjB,OAAO,EAAE,WAAW,EAAE,oBAAgB;AAEtC,OAAO,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,GACvB,oBAAgB;AAEjB,OAAO,EACL,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,SAAS,GACV,+BAA2B;AAE5B,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,4BAA4B,EAC5B,6CAA6C,EAC7C,6BAA6B,EAC7B,uBAAuB,EACvB,kBAAkB,EAClB,mBAAmB,EACnB,yBAAyB,EACzB,+BAA+B,EAC/B,+BAA+B,EAC/B,uBAAuB,EACvB,wBAAwB,GACzB,+BAA2B;AAE5B,YAAY,EAAE,qBAAqB,EAAE,+BAA2B;AAEhE,OAAO;AACL;;GAEG;AACH,KAAK,gBAAgB;AACrB;;GAEG;AACH,+BAA+B,GAChC,+BAA2B;AAE5B,OAAO,EAAE,qBAAqB,EAAE,8BAA0B;AAE1D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,sCAAkC;AAE/E,OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,eAAe,EACf,eAAe,EACf,wBAAwB,EACxB,+BAA+B,EAC/B,YAAY,GACb,2BAAuB;AAExB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,GACvB,0BAAsB;AAEvB,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AAEvD,OAAO,EAAE,iBAAiB,EAAE,0BAAsB;AAElD,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,4BAA4B,EAC5B,sBAAsB,GACvB,oCAAgC;AAEjC,OAAO,EACL,kBAAkB,EAClB,KAAK,cAAc,EACnB,qCAAqC,EACrC,oBAAoB,EACpB,wBAAwB,EACxB,yCAAyC,GAC1C,wBAAoB;AAErB,OAAO,EAAE,2BAA2B,EAAE,+BAA2B;AAEjE,OAAO,EAAE,qBAAqB,EAAE,kCAA8B"}
\ No newline at end of file
+{"version":3,"file":"index.d.cts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,gCAA4B;AAEvD,OAAO,EACL,0BAA0B,EAC1B,kCAAkC,GACnC,sCAAkC;AAEnC,YAAY,EACV,8BAA8B,EAC9B,8BAA8B,EAC9B,SAAS,EACT,aAAa,EACb,eAAe,EACf,YAAY,GACb,kCAA8B;AAE/B,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,gBAAgB,GACjB,uCAAmC;AAEpC,YAAY,EACV,kBAAkB,EAClB,SAAS,EACT,UAAU,EACV,aAAa,EACb,sBAAsB,EACtB,mBAAmB,EACnB,WAAW,EACX,mBAAmB,EACnB,QAAQ,EACR,iBAAiB,EACjB,IAAI,EACJ,UAAU,EACV,KAAK,EACL,aAAa,EACb,OAAO,EACP,MAAM,EACN,qBAAqB,EACrB,sBAAsB,EACtB,uBAAuB,EACvB,sBAAsB,EACtB,yBAAyB,EACzB,0BAA0B,GAC3B,oBAAgB;AAEjB,OAAO,EAAE,WAAW,EAAE,oBAAgB;AAEtC,OAAO,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,GACvB,oBAAgB;AAEjB,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,+BAA2B;AAE7E,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,4BAA4B,EAC5B,6CAA6C,EAC7C,6BAA6B,EAC7B,uBAAuB,EACvB,kBAAkB,EAClB,mBAAmB,EACnB,yBAAyB,EACzB,+BAA+B,EAC/B,+BAA+B,EAC/B,uBAAuB,EACvB,wBAAwB,GACzB,+BAA2B;AAE5B,YAAY,EAAE,qBAAqB,EAAE,+BAA2B;AAEhE,OAAO;AACL;;GAEG;AACH,KAAK,gBAAgB;AACrB;;GAEG;AACH,+BAA+B,GAChC,+BAA2B;AAE5B,OAAO,EAAE,qBAAqB,EAAE,8BAA0B;AAE1D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,sCAAkC;AAE/E,OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,eAAe,EACf,eAAe,EACf,wBAAwB,EACxB,+BAA+B,EAC/B,YAAY,GACb,2BAAuB;AAExB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,GACvB,0BAAsB;AAEvB,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AAEvD,OAAO,EAAE,iBAAiB,EAAE,0BAAsB;AAElD,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,4BAA4B,EAC5B,sBAAsB,GACvB,oCAAgC;AAEjC,OAAO,EACL,kBAAkB,EAClB,KAAK,cAAc,EACnB,qCAAqC,EACrC,oBAAoB,EACpB,wBAAwB,EACxB,yCAAyC,GAC1C,wBAAoB;AAErB,OAAO,EAAE,2BAA2B,EAAE,+BAA2B;AAEjE,OAAO,EAAE,qBAAqB,EAAE,kCAA8B"}
\ No newline at end of file
diff --git a/dist/index.d.mts b/dist/index.d.mts
index 4aad0d9416764d6eefeecd176c1b02f3a8e9911c..548e94cd8c93715a2d522d9ca22a365333c32c80 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -5,7 +5,7 @@ export { formatProviderLabel, getRequestParams, getActionType, getSwapType, isHa
 export type { ChainConfiguration, L1GasFees, SolanaFees, QuoteMetadata, GasMultiplierByChainId, FeatureFlagResponse, BridgeAsset, GenericQuoteRequest, Protocol, TokenAmountValues, Step, RefuelData, Quote, QuoteResponse, FeeData, TxData, BridgeControllerState, BridgeControllerAction, BridgeControllerActions, BridgeControllerEvents, BridgeControllerMessenger, FeatureFlagsPlatformConfig, } from "./types.mjs";
 export { StatusTypes } from "./types.mjs";
 export { AssetType, SortOrder, ChainId, RequestStatus, BridgeUserAction, BridgeBackgroundAction, } from "./types.mjs";
-export { FeeType, ActionTypes, BridgeAssetSchema, FeatureId, } from "./utils/validators.mjs";
+export { FeeType, ActionTypes, BridgeAssetSchema } from "./utils/validators.mjs";
 export { ALLOWED_BRIDGE_CHAIN_IDS, BridgeClientId, BRIDGE_CONTROLLER_NAME, BRIDGE_QUOTE_MAX_ETA_SECONDS, BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE, BRIDGE_PREFERRED_GAS_ESTIMATE, BRIDGE_DEFAULT_SLIPPAGE, BRIDGE_MM_FEE_RATE, REFRESH_INTERVAL_MS, DEFAULT_MAX_REFRESH_COUNT, DEFAULT_BRIDGE_CONTROLLER_STATE, METABRIDGE_CHAIN_TO_ADDRESS_MAP, BRIDGE_DEV_API_BASE_URL, BRIDGE_PROD_API_BASE_URL, } from "./constants/bridge.mjs";
 export type { AllowedBridgeChainIds } from "./constants/bridge.mjs";
 export { 
diff --git a/dist/index.d.mts.map b/dist/index.d.mts.map
index 1cd9efbcd375470043b77841650b792e894ddfbc..b6cd96314a9840119727f9673dacd16aee38f7f1 100644
--- a/dist/index.d.mts.map
+++ b/dist/index.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.mts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,gCAA4B;AAEvD,OAAO,EACL,0BAA0B,EAC1B,kCAAkC,GACnC,sCAAkC;AAEnC,YAAY,EACV,8BAA8B,EAC9B,8BAA8B,EAC9B,SAAS,EACT,aAAa,EACb,eAAe,EACf,YAAY,GACb,kCAA8B;AAE/B,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,gBAAgB,GACjB,uCAAmC;AAEpC,YAAY,EACV,kBAAkB,EAClB,SAAS,EACT,UAAU,EACV,aAAa,EACb,sBAAsB,EACtB,mBAAmB,EACnB,WAAW,EACX,mBAAmB,EACnB,QAAQ,EACR,iBAAiB,EACjB,IAAI,EACJ,UAAU,EACV,KAAK,EACL,aAAa,EACb,OAAO,EACP,MAAM,EACN,qBAAqB,EACrB,sBAAsB,EACtB,uBAAuB,EACvB,sBAAsB,EACtB,yBAAyB,EACzB,0BAA0B,GAC3B,oBAAgB;AAEjB,OAAO,EAAE,WAAW,EAAE,oBAAgB;AAEtC,OAAO,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,GACvB,oBAAgB;AAEjB,OAAO,EACL,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,SAAS,GACV,+BAA2B;AAE5B,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,4BAA4B,EAC5B,6CAA6C,EAC7C,6BAA6B,EAC7B,uBAAuB,EACvB,kBAAkB,EAClB,mBAAmB,EACnB,yBAAyB,EACzB,+BAA+B,EAC/B,+BAA+B,EAC/B,uBAAuB,EACvB,wBAAwB,GACzB,+BAA2B;AAE5B,YAAY,EAAE,qBAAqB,EAAE,+BAA2B;AAEhE,OAAO;AACL;;GAEG;AACH,KAAK,gBAAgB;AACrB;;GAEG;AACH,+BAA+B,GAChC,+BAA2B;AAE5B,OAAO,EAAE,qBAAqB,EAAE,8BAA0B;AAE1D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,sCAAkC;AAE/E,OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,eAAe,EACf,eAAe,EACf,wBAAwB,EACxB,+BAA+B,EAC/B,YAAY,GACb,2BAAuB;AAExB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,GACvB,0BAAsB;AAEvB,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AAEvD,OAAO,EAAE,iBAAiB,EAAE,0BAAsB;AAElD,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,4BAA4B,EAC5B,sBAAsB,GACvB,oCAAgC;AAEjC,OAAO,EACL,kBAAkB,EAClB,KAAK,cAAc,EACnB,qCAAqC,EACrC,oBAAoB,EACpB,wBAAwB,EACxB,yCAAyC,GAC1C,wBAAoB;AAErB,OAAO,EAAE,2BAA2B,EAAE,+BAA2B;AAEjE,OAAO,EAAE,qBAAqB,EAAE,kCAA8B"}
\ No newline at end of file
+{"version":3,"file":"index.d.mts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,gCAA4B;AAEvD,OAAO,EACL,0BAA0B,EAC1B,kCAAkC,GACnC,sCAAkC;AAEnC,YAAY,EACV,8BAA8B,EAC9B,8BAA8B,EAC9B,SAAS,EACT,aAAa,EACb,eAAe,EACf,YAAY,GACb,kCAA8B;AAE/B,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,gBAAgB,GACjB,uCAAmC;AAEpC,YAAY,EACV,kBAAkB,EAClB,SAAS,EACT,UAAU,EACV,aAAa,EACb,sBAAsB,EACtB,mBAAmB,EACnB,WAAW,EACX,mBAAmB,EACnB,QAAQ,EACR,iBAAiB,EACjB,IAAI,EACJ,UAAU,EACV,KAAK,EACL,aAAa,EACb,OAAO,EACP,MAAM,EACN,qBAAqB,EACrB,sBAAsB,EACtB,uBAAuB,EACvB,sBAAsB,EACtB,yBAAyB,EACzB,0BAA0B,GAC3B,oBAAgB;AAEjB,OAAO,EAAE,WAAW,EAAE,oBAAgB;AAEtC,OAAO,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,GACvB,oBAAgB;AAEjB,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,+BAA2B;AAE7E,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,4BAA4B,EAC5B,6CAA6C,EAC7C,6BAA6B,EAC7B,uBAAuB,EACvB,kBAAkB,EAClB,mBAAmB,EACnB,yBAAyB,EACzB,+BAA+B,EAC/B,+BAA+B,EAC/B,uBAAuB,EACvB,wBAAwB,GACzB,+BAA2B;AAE5B,YAAY,EAAE,qBAAqB,EAAE,+BAA2B;AAEhE,OAAO;AACL;;GAEG;AACH,KAAK,gBAAgB;AACrB;;GAEG;AACH,+BAA+B,GAChC,+BAA2B;AAE5B,OAAO,EAAE,qBAAqB,EAAE,8BAA0B;AAE1D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,sCAAkC;AAE/E,OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,eAAe,EACf,eAAe,EACf,wBAAwB,EACxB,+BAA+B,EAC/B,YAAY,GACb,2BAAuB;AAExB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,GACvB,0BAAsB;AAEvB,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AAEvD,OAAO,EAAE,iBAAiB,EAAE,0BAAsB;AAElD,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,4BAA4B,EAC5B,sBAAsB,GACvB,oCAAgC;AAEjC,OAAO,EACL,kBAAkB,EAClB,KAAK,cAAc,EACnB,qCAAqC,EACrC,oBAAoB,EACpB,wBAAwB,EACxB,yCAAyC,GAC1C,wBAAoB;AAErB,OAAO,EAAE,2BAA2B,EAAE,+BAA2B;AAEjE,OAAO,EAAE,qBAAqB,EAAE,kCAA8B"}
\ No newline at end of file
diff --git a/dist/index.mjs b/dist/index.mjs
index 46ba46f59b3d5c970b139c8bc9105eb06dcd39d9..551195d742cf486ee6d05a525ee5847526e84eac 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -3,7 +3,7 @@ export { UnifiedSwapBridgeEventName, UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY } from "
 export { formatProviderLabel, getRequestParams, getActionType, getSwapType, isHardwareWallet, isCustomSlippage } from "./utils/metrics/properties.mjs";
 export { StatusTypes } from "./types.mjs";
 export { AssetType, SortOrder, ChainId, RequestStatus, BridgeUserAction, BridgeBackgroundAction } from "./types.mjs";
-export { FeeType, ActionTypes, BridgeAssetSchema, FeatureId } from "./utils/validators.mjs";
+export { FeeType, ActionTypes, BridgeAssetSchema } from "./utils/validators.mjs";
 export { ALLOWED_BRIDGE_CHAIN_IDS, BridgeClientId, BRIDGE_CONTROLLER_NAME, BRIDGE_QUOTE_MAX_ETA_SECONDS, BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE, BRIDGE_PREFERRED_GAS_ESTIMATE, BRIDGE_DEFAULT_SLIPPAGE, BRIDGE_MM_FEE_RATE, REFRESH_INTERVAL_MS, DEFAULT_MAX_REFRESH_COUNT, DEFAULT_BRIDGE_CONTROLLER_STATE, METABRIDGE_CHAIN_TO_ADDRESS_MAP, BRIDGE_DEV_API_BASE_URL, BRIDGE_PROD_API_BASE_URL } from "./constants/bridge.mjs";
 export { 
 /**
diff --git a/dist/index.mjs.map b/dist/index.mjs.map
index 743edfe9918cb16fa7b26e745d216b91b1b0708c..0bbfd9a41990933373587dfcaf2da0ee2fe7591f 100644
--- a/dist/index.mjs.map
+++ b/dist/index.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"index.mjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,gCAA4B;AAEvD,OAAO,EACL,0BAA0B,EAC1B,kCAAkC,EACnC,sCAAkC;AAWnC,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,gBAAgB,EACjB,uCAAmC;AA2BpC,OAAO,EAAE,WAAW,EAAE,oBAAgB;AAEtC,OAAO,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,EACvB,oBAAgB;AAEjB,OAAO,EACL,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,SAAS,EACV,+BAA2B;AAE5B,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,4BAA4B,EAC5B,6CAA6C,EAC7C,6BAA6B,EAC7B,uBAAuB,EACvB,kBAAkB,EAClB,mBAAmB,EACnB,yBAAyB,EACzB,+BAA+B,EAC/B,+BAA+B,EAC/B,uBAAuB,EACvB,wBAAwB,EACzB,+BAA2B;AAI5B,OAAO;AAKL;;GAEG;AACH,+BAA+B,EAChC,+BAA2B;AAE5B,OAAO,EAAE,qBAAqB,EAAE,8BAA0B;AAE1D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,sCAAkC;AAE/E,OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,eAAe,EACf,eAAe,EACf,wBAAwB,EACxB,+BAA+B,EAC/B,YAAY,EACb,2BAAuB;AAExB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,EACvB,0BAAsB;AAEvB,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AAEvD,OAAO,EAAE,iBAAiB,EAAE,0BAAsB;AAElD,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,4BAA4B,EAC5B,sBAAsB,EACvB,oCAAgC;AAEjC,OAAO,EACL,kBAAkB,EAElB,qCAAqC,EACrC,oBAAoB,EACpB,wBAAwB,EACxB,yCAAyC,EAC1C,wBAAoB;AAErB,OAAO,EAAE,2BAA2B,EAAE,+BAA2B;AAEjE,OAAO,EAAE,qBAAqB,EAAE,kCAA8B","sourcesContent":["export { BridgeController } from './bridge-controller';\n\nexport {\n  UnifiedSwapBridgeEventName,\n  UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY,\n} from './utils/metrics/constants';\n\nexport type {\n  RequiredEventContextFromClient,\n  CrossChainSwapsEventProperties,\n  TradeData,\n  RequestParams,\n  RequestMetadata,\n  TxStatusData,\n} from './utils/metrics/types';\n\nexport {\n  formatProviderLabel,\n  getRequestParams,\n  getActionType,\n  getSwapType,\n  isHardwareWallet,\n  isCustomSlippage,\n} from './utils/metrics/properties';\n\nexport type {\n  ChainConfiguration,\n  L1GasFees,\n  SolanaFees,\n  QuoteMetadata,\n  GasMultiplierByChainId,\n  FeatureFlagResponse,\n  BridgeAsset,\n  GenericQuoteRequest,\n  Protocol,\n  TokenAmountValues,\n  Step,\n  RefuelData,\n  Quote,\n  QuoteResponse,\n  FeeData,\n  TxData,\n  BridgeControllerState,\n  BridgeControllerAction,\n  BridgeControllerActions,\n  BridgeControllerEvents,\n  BridgeControllerMessenger,\n  FeatureFlagsPlatformConfig,\n} from './types';\n\nexport { StatusTypes } from './types';\n\nexport {\n  AssetType,\n  SortOrder,\n  ChainId,\n  RequestStatus,\n  BridgeUserAction,\n  BridgeBackgroundAction,\n} from './types';\n\nexport {\n  FeeType,\n  ActionTypes,\n  BridgeAssetSchema,\n  FeatureId,\n} from './utils/validators';\n\nexport {\n  ALLOWED_BRIDGE_CHAIN_IDS,\n  BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_QUOTE_MAX_ETA_SECONDS,\n  BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE,\n  BRIDGE_PREFERRED_GAS_ESTIMATE,\n  BRIDGE_DEFAULT_SLIPPAGE,\n  BRIDGE_MM_FEE_RATE,\n  REFRESH_INTERVAL_MS,\n  DEFAULT_MAX_REFRESH_COUNT,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  BRIDGE_DEV_API_BASE_URL,\n  BRIDGE_PROD_API_BASE_URL,\n} from './constants/bridge';\n\nexport type { AllowedBridgeChainIds } from './constants/bridge';\n\nexport {\n  /**\n   * @deprecated This type should not be used. Use {@link BridgeAsset} instead.\n   */\n  type SwapsTokenObject,\n  /**\n   * @deprecated This map should not be used. Use getNativeAssetForChainId\" } instead.\n   */\n  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,\n} from './constants/tokens';\n\nexport { SWAPS_API_V2_BASE_URL } from './constants/swaps';\n\nexport { MetricsActionType, MetricsSwapType } from './utils/metrics/constants';\n\nexport {\n  getEthUsdtResetData,\n  isEthUsdt,\n  isNativeAddress,\n  isSolanaChainId,\n  getNativeAssetForChainId,\n  getDefaultBridgeControllerState,\n  isCrossChain,\n} from './utils/bridge';\n\nexport {\n  isValidQuoteRequest,\n  formatEtaInMinutes,\n  calcSlippagePercentage,\n} from './utils/quote';\n\nexport { calcLatestSrcBalance } from './utils/balance';\n\nexport { fetchBridgeTokens } from './utils/fetch';\n\nexport {\n  formatChainIdToCaip,\n  formatChainIdToHex,\n  formatAddressToCaipReference,\n  formatAddressToAssetId,\n} from './utils/caip-formatters';\n\nexport {\n  selectBridgeQuotes,\n  type BridgeAppState,\n  selectExchangeRateByChainIdAndAddress,\n  selectIsQuoteExpired,\n  selectBridgeFeatureFlags,\n  selectMinimumBalanceForRentExemptionInSOL,\n} from './selectors';\n\nexport { DEFAULT_FEATURE_FLAG_CONFIG } from './constants/bridge';\n\nexport { getBridgeFeatureFlags } from './utils/feature-flags';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.mjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,gCAA4B;AAEvD,OAAO,EACL,0BAA0B,EAC1B,kCAAkC,EACnC,sCAAkC;AAWnC,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,gBAAgB,EACjB,uCAAmC;AA2BpC,OAAO,EAAE,WAAW,EAAE,oBAAgB;AAEtC,OAAO,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,EACvB,oBAAgB;AAEjB,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,+BAA2B;AAE7E,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,4BAA4B,EAC5B,6CAA6C,EAC7C,6BAA6B,EAC7B,uBAAuB,EACvB,kBAAkB,EAClB,mBAAmB,EACnB,yBAAyB,EACzB,+BAA+B,EAC/B,+BAA+B,EAC/B,uBAAuB,EACvB,wBAAwB,EACzB,+BAA2B;AAI5B,OAAO;AAKL;;GAEG;AACH,+BAA+B,EAChC,+BAA2B;AAE5B,OAAO,EAAE,qBAAqB,EAAE,8BAA0B;AAE1D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,sCAAkC;AAE/E,OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,eAAe,EACf,eAAe,EACf,wBAAwB,EACxB,+BAA+B,EAC/B,YAAY,EACb,2BAAuB;AAExB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,EACvB,0BAAsB;AAEvB,OAAO,EAAE,oBAAoB,EAAE,4BAAwB;AAEvD,OAAO,EAAE,iBAAiB,EAAE,0BAAsB;AAElD,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,4BAA4B,EAC5B,sBAAsB,EACvB,oCAAgC;AAEjC,OAAO,EACL,kBAAkB,EAElB,qCAAqC,EACrC,oBAAoB,EACpB,wBAAwB,EACxB,yCAAyC,EAC1C,wBAAoB;AAErB,OAAO,EAAE,2BAA2B,EAAE,+BAA2B;AAEjE,OAAO,EAAE,qBAAqB,EAAE,kCAA8B","sourcesContent":["export { BridgeController } from './bridge-controller';\n\nexport {\n  UnifiedSwapBridgeEventName,\n  UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY,\n} from './utils/metrics/constants';\n\nexport type {\n  RequiredEventContextFromClient,\n  CrossChainSwapsEventProperties,\n  TradeData,\n  RequestParams,\n  RequestMetadata,\n  TxStatusData,\n} from './utils/metrics/types';\n\nexport {\n  formatProviderLabel,\n  getRequestParams,\n  getActionType,\n  getSwapType,\n  isHardwareWallet,\n  isCustomSlippage,\n} from './utils/metrics/properties';\n\nexport type {\n  ChainConfiguration,\n  L1GasFees,\n  SolanaFees,\n  QuoteMetadata,\n  GasMultiplierByChainId,\n  FeatureFlagResponse,\n  BridgeAsset,\n  GenericQuoteRequest,\n  Protocol,\n  TokenAmountValues,\n  Step,\n  RefuelData,\n  Quote,\n  QuoteResponse,\n  FeeData,\n  TxData,\n  BridgeControllerState,\n  BridgeControllerAction,\n  BridgeControllerActions,\n  BridgeControllerEvents,\n  BridgeControllerMessenger,\n  FeatureFlagsPlatformConfig,\n} from './types';\n\nexport { StatusTypes } from './types';\n\nexport {\n  AssetType,\n  SortOrder,\n  ChainId,\n  RequestStatus,\n  BridgeUserAction,\n  BridgeBackgroundAction,\n} from './types';\n\nexport { FeeType, ActionTypes, BridgeAssetSchema } from './utils/validators';\n\nexport {\n  ALLOWED_BRIDGE_CHAIN_IDS,\n  BridgeClientId,\n  BRIDGE_CONTROLLER_NAME,\n  BRIDGE_QUOTE_MAX_ETA_SECONDS,\n  BRIDGE_QUOTE_MAX_RETURN_DIFFERENCE_PERCENTAGE,\n  BRIDGE_PREFERRED_GAS_ESTIMATE,\n  BRIDGE_DEFAULT_SLIPPAGE,\n  BRIDGE_MM_FEE_RATE,\n  REFRESH_INTERVAL_MS,\n  DEFAULT_MAX_REFRESH_COUNT,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n  METABRIDGE_CHAIN_TO_ADDRESS_MAP,\n  BRIDGE_DEV_API_BASE_URL,\n  BRIDGE_PROD_API_BASE_URL,\n} from './constants/bridge';\n\nexport type { AllowedBridgeChainIds } from './constants/bridge';\n\nexport {\n  /**\n   * @deprecated This type should not be used. Use {@link BridgeAsset} instead.\n   */\n  type SwapsTokenObject,\n  /**\n   * @deprecated This map should not be used. Use getNativeAssetForChainId\" } instead.\n   */\n  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,\n} from './constants/tokens';\n\nexport { SWAPS_API_V2_BASE_URL } from './constants/swaps';\n\nexport { MetricsActionType, MetricsSwapType } from './utils/metrics/constants';\n\nexport {\n  getEthUsdtResetData,\n  isEthUsdt,\n  isNativeAddress,\n  isSolanaChainId,\n  getNativeAssetForChainId,\n  getDefaultBridgeControllerState,\n  isCrossChain,\n} from './utils/bridge';\n\nexport {\n  isValidQuoteRequest,\n  formatEtaInMinutes,\n  calcSlippagePercentage,\n} from './utils/quote';\n\nexport { calcLatestSrcBalance } from './utils/balance';\n\nexport { fetchBridgeTokens } from './utils/fetch';\n\nexport {\n  formatChainIdToCaip,\n  formatChainIdToHex,\n  formatAddressToCaipReference,\n  formatAddressToAssetId,\n} from './utils/caip-formatters';\n\nexport {\n  selectBridgeQuotes,\n  type BridgeAppState,\n  selectExchangeRateByChainIdAndAddress,\n  selectIsQuoteExpired,\n  selectBridgeFeatureFlags,\n  selectMinimumBalanceForRentExemptionInSOL,\n} from './selectors';\n\nexport { DEFAULT_FEATURE_FLAG_CONFIG } from './constants/bridge';\n\nexport { getBridgeFeatureFlags } from './utils/feature-flags';\n"]}
\ No newline at end of file
diff --git a/dist/selectors.cjs b/dist/selectors.cjs
index d14c492d347ae8f4e0af9a0a6687c9b471b3765f..e257ce7553a81af8f78232ca6e8fd496c2d76437 100644
--- a/dist/selectors.cjs
+++ b/dist/selectors.cjs
@@ -156,10 +156,14 @@ const selectBridgeQuotesWithMetadata = createBridgeSelector([
         const sentAmount = (0, quote_1.calcSentAmount)(quote.quote, srcTokenExchangeRate);
         const toTokenAmount = (0, quote_1.calcToAmount)(quote.quote, destTokenExchangeRate);
         const includedTxFees = (0, quote_1.calcIncludedTxFees)(quote.quote, srcTokenExchangeRate, destTokenExchangeRate);
-        let totalEstimatedNetworkFee, gasFee, totalMaxNetworkFee, relayerFee;
+        let totalEstimatedNetworkFee, totalMaxNetworkFee, relayerFee, gasFee;
         if ((0, bridge_2.isSolanaChainId)(quote.quote.srcChainId)) {
             totalEstimatedNetworkFee = (0, quote_1.calcSolanaTotalNetworkFee)(quote, nativeExchangeRate);
-            gasFee = totalEstimatedNetworkFee;
+            gasFee = {
+                effective: totalEstimatedNetworkFee,
+                total: totalEstimatedNetworkFee,
+                max: totalEstimatedNetworkFee,
+            };
             totalMaxNetworkFee = totalEstimatedNetworkFee;
         }
         else {
@@ -169,6 +173,7 @@ const selectBridgeQuotesWithMetadata = createBridgeSelector([
                 ...bridgeFeesPerGas,
                 ...nativeExchangeRate,
             });
+            // Uses effectiveGasFee to calculate the total estimated network fee
             totalEstimatedNetworkFee = (0, quote_1.calcTotalEstimatedNetworkFee)(gasFee, relayerFee);
             totalMaxNetworkFee = (0, quote_1.calcTotalMaxNetworkFee)(gasFee, relayerFee);
         }
diff --git a/dist/selectors.cjs.map b/dist/selectors.cjs.map
index a6b2a9958009879c798520b37196c25c92814b20..53c83545c905b910475d9ca66d00b993238b0020 100644
--- a/dist/selectors.cjs.map
+++ b/dist/selectors.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"selectors.cjs","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport type {\n  CurrencyRateState,\n  MultichainAssetsRatesControllerState,\n  TokenRatesControllerState,\n} from '@metamask/assets-controllers';\nimport type { GasFeeEstimates } from '@metamask/gas-fee-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { isStrictHexString } from '@metamask/utils';\nimport { BigNumber } from 'bignumber.js';\nimport { orderBy } from 'lodash';\nimport {\n  createSelector as createSelector_,\n  createStructuredSelector as createStructuredSelector_,\n} from 'reselect';\n\nimport { BRIDGE_PREFERRED_GAS_ESTIMATE } from './constants/bridge';\nimport type {\n  BridgeControllerState,\n  ExchangeRate,\n  GenericQuoteRequest,\n  QuoteMetadata,\n  QuoteResponse,\n} from './types';\nimport { RequestStatus, SortOrder } from './types';\nimport {\n  getNativeAssetForChainId,\n  isNativeAddress,\n  isSolanaChainId,\n} from './utils/bridge';\nimport {\n  formatAddressToAssetId,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { processFeatureFlags } from './utils/feature-flags';\nimport {\n  calcAdjustedReturn,\n  calcCost,\n  calcEstimatedAndMaxTotalGasFee,\n  calcIncludedTxFees,\n  calcRelayerFee,\n  calcSentAmount,\n  calcSolanaTotalNetworkFee,\n  calcSwapRate,\n  calcToAmount,\n  calcTotalEstimatedNetworkFee,\n  calcTotalMaxNetworkFee,\n} from './utils/quote';\n\n/**\n * The controller states that provide exchange rates\n */\ntype ExchangeRateControllerState = MultichainAssetsRatesControllerState &\n  TokenRatesControllerState &\n  CurrencyRateState &\n  Pick<BridgeControllerState, 'assetExchangeRates'>;\n/**\n * The state of the bridge controller and all its dependency controllers\n */\ntype RemoteFeatureFlagControllerState = {\n  remoteFeatureFlags: {\n    bridgeConfig: unknown;\n  };\n};\nexport type BridgeAppState = BridgeControllerState & {\n  gasFeeEstimates: GasFeeEstimates;\n} & ExchangeRateControllerState & {\n    participateInMetaMetrics: boolean;\n  } & RemoteFeatureFlagControllerState;\n/**\n * Creates a structured selector for the bridge controller\n */\nconst createStructuredBridgeSelector =\n  createStructuredSelector_.withTypes<BridgeAppState>();\n/**\n * Creates a typed selector for the bridge controller\n */\nconst createBridgeSelector = createSelector_.withTypes<BridgeAppState>();\n/**\n * Required parameters that clients must provide for the bridge quotes selector\n */\ntype BridgeQuotesClientParams = {\n  sortOrder: SortOrder;\n  selectedQuote: (QuoteResponse & QuoteMetadata) | null;\n};\n\nconst createFeatureFlagsSelector =\n  createSelector_.withTypes<RemoteFeatureFlagControllerState>();\n\n/**\n * Selects the bridge feature flags\n *\n * @param state - The state of the bridge controller\n * @returns The bridge feature flags\n *\n * @example\n * ```ts\n * const featureFlags = useSelector(state => selectBridgeFeatureFlags(state));\n *\n * Or\n *\n * export const selectBridgeFeatureFlags = createSelector(\n * selectRemoteFeatureFlags,\n *  (remoteFeatureFlags) =>\n *    selectBridgeFeatureFlagsBase({\n *      bridgeConfig: remoteFeatureFlags.bridgeConfig,\n *    }),\n * );\n * ```\n */\nexport const selectBridgeFeatureFlags = createFeatureFlagsSelector(\n  [(state) => state.remoteFeatureFlags.bridgeConfig],\n  (bridgeConfig: unknown) => processFeatureFlags(bridgeConfig),\n);\n\nconst getExchangeRateByChainIdAndAddress = (\n  exchangeRateSources: ExchangeRateControllerState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n): ExchangeRate => {\n  if (!chainId || !address) {\n    return {};\n  }\n  // TODO return usd exchange rate if user has opted into metrics\n  const assetId = formatAddressToAssetId(address, chainId);\n  if (!assetId) {\n    return {};\n  }\n\n  const { assetExchangeRates, currencyRates, marketData, conversionRates } =\n    exchangeRateSources;\n\n  // If the asset exchange rate is available in the bridge controller, use it\n  // This is defined if the token's rate is not available from the assets controllers\n  const bridgeControllerRate =\n    assetExchangeRates?.[assetId] ??\n    assetExchangeRates?.[assetId.toLowerCase() as CaipAssetType];\n  if (bridgeControllerRate?.exchangeRate) {\n    return bridgeControllerRate;\n  }\n  // If the chain is a Solana chain, use the conversion rate from the multichain assets controller\n  if (isSolanaChainId(chainId)) {\n    const multichainAssetExchangeRate = conversionRates?.[assetId];\n    if (multichainAssetExchangeRate) {\n      return {\n        exchangeRate: multichainAssetExchangeRate.rate,\n        usdExchangeRate: undefined,\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain, use the conversion rate from the currency rates controller\n  if (isNativeAddress(address)) {\n    const { symbol } = getNativeAssetForChainId(chainId);\n    const evmNativeExchangeRate = currencyRates?.[symbol];\n    if (evmNativeExchangeRate) {\n      return {\n        exchangeRate: evmNativeExchangeRate?.conversionRate?.toString(),\n        usdExchangeRate: evmNativeExchangeRate?.usdConversionRate?.toString(),\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain and the asset is not the native asset, use the conversion rate from the token rates controller\n  const evmTokenExchangeRates = marketData?.[formatChainIdToHex(chainId)];\n  const evmTokenExchangeRateForAddress = isStrictHexString(address)\n    ? evmTokenExchangeRates?.[address]\n    : null;\n  const nativeCurrencyRate = evmTokenExchangeRateForAddress\n    ? currencyRates[evmTokenExchangeRateForAddress?.currency]\n    : undefined;\n  if (evmTokenExchangeRateForAddress && nativeCurrencyRate) {\n    return {\n      exchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.conversionRate ?? 0)\n        .toString(),\n      usdExchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.usdConversionRate ?? 0)\n        .toString(),\n    };\n  }\n\n  return {};\n};\n\n/**\n * Selects the asset exchange rate for a given chain and address\n *\n * @param state The state of the bridge controller and its dependency controllers\n * @param chainId The chain ID of the asset\n * @param address The address of the asset\n * @returns The asset exchange rate for the given chain and address\n */\nexport const selectExchangeRateByChainIdAndAddress = (\n  state: BridgeAppState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n) => {\n  return getExchangeRateByChainIdAndAddress(state, chainId, address);\n};\n\n/**\n * Checks whether an exchange rate is available for a given chain and address\n *\n * @param params The parameters to pass to {@link getExchangeRateByChainIdAndAddress}\n * @returns Whether an exchange rate is available for the given chain and address\n */\nexport const selectIsAssetExchangeRateInState = (\n  ...params: Parameters<typeof getExchangeRateByChainIdAndAddress>\n) =>\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.exchangeRate) &&\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.usdExchangeRate);\n\n/**\n * Selects the gas fee estimates from the gas fee controller. All potential networks\n * support EIP1559 gas fees so assume that gasFeeEstimates is of type GasFeeEstimates\n *\n * @returns The gas fee estimates in decGWEI\n */\nconst selectBridgeFeesPerGas = createStructuredBridgeSelector({\n  estimatedBaseFeeInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.estimatedBaseFee,\n  maxPriorityFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.[BRIDGE_PREFERRED_GAS_ESTIMATE]\n      ?.suggestedMaxPriorityFeePerGas,\n  maxFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.high?.suggestedMaxFeePerGas,\n});\n\n// Selects cross-chain swap quotes including their metadata\nconst selectBridgeQuotesWithMetadata = createBridgeSelector(\n  [\n    ({ quotes }) => quotes,\n    selectBridgeFeesPerGas,\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { srcChainId } }) => srcChainId,\n        ({ quoteRequest: { srcTokenAddress } }) => srcTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { destChainId } }) => destChainId,\n        ({ quoteRequest: { destTokenAddress } }) => destTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [(state) => state, ({ quoteRequest: { srcChainId } }) => srcChainId],\n      (state, chainId) =>\n        selectExchangeRateByChainIdAndAddress(state, chainId, AddressZero),\n    ),\n  ],\n  (\n    quotes,\n    bridgeFeesPerGas,\n    srcTokenExchangeRate,\n    destTokenExchangeRate,\n    nativeExchangeRate,\n  ) => {\n    const newQuotes = quotes.map((quote) => {\n      const sentAmount = calcSentAmount(quote.quote, srcTokenExchangeRate);\n      const toTokenAmount = calcToAmount(quote.quote, destTokenExchangeRate);\n\n      const includedTxFees = calcIncludedTxFees(\n        quote.quote,\n        srcTokenExchangeRate,\n        destTokenExchangeRate,\n      );\n\n      let totalEstimatedNetworkFee, gasFee, totalMaxNetworkFee, relayerFee;\n\n      if (isSolanaChainId(quote.quote.srcChainId)) {\n        totalEstimatedNetworkFee = calcSolanaTotalNetworkFee(\n          quote,\n          nativeExchangeRate,\n        );\n        gasFee = totalEstimatedNetworkFee;\n        totalMaxNetworkFee = totalEstimatedNetworkFee;\n      } else {\n        relayerFee = calcRelayerFee(quote, nativeExchangeRate);\n        gasFee = calcEstimatedAndMaxTotalGasFee({\n          bridgeQuote: quote,\n          ...bridgeFeesPerGas,\n          ...nativeExchangeRate,\n        });\n        totalEstimatedNetworkFee = calcTotalEstimatedNetworkFee(\n          gasFee,\n          relayerFee,\n        );\n        totalMaxNetworkFee = calcTotalMaxNetworkFee(gasFee, relayerFee);\n      }\n\n      const adjustedReturn = calcAdjustedReturn(\n        toTokenAmount,\n        totalEstimatedNetworkFee,\n        quote.quote,\n      );\n      const cost = calcCost(adjustedReturn, sentAmount);\n\n      return {\n        ...quote,\n        // QuoteMetadata fields\n        sentAmount,\n        toTokenAmount,\n        swapRate: calcSwapRate(sentAmount.amount, toTokenAmount.amount),\n        totalNetworkFee: totalEstimatedNetworkFee,\n        totalMaxNetworkFee,\n        gasFee,\n        adjustedReturn,\n        cost,\n        includedTxFees,\n      };\n    });\n\n    return newQuotes;\n  },\n);\n\nconst selectSortedBridgeQuotes = createBridgeSelector(\n  [\n    selectBridgeQuotesWithMetadata,\n    (_, { sortOrder }: BridgeQuotesClientParams) => sortOrder,\n  ],\n  (quotesWithMetadata, sortOrder): (QuoteResponse & QuoteMetadata)[] => {\n    switch (sortOrder) {\n      case SortOrder.ETA_ASC:\n        return orderBy(\n          quotesWithMetadata,\n          (quote) => quote.estimatedProcessingTimeInSeconds,\n          'asc',\n        );\n      default:\n        return orderBy(\n          quotesWithMetadata,\n          ({ cost }) =>\n            cost.valueInCurrency ? Number(cost.valueInCurrency) : 0,\n          'asc',\n        );\n    }\n  },\n);\n\nconst selectRecommendedQuote = createBridgeSelector(\n  [selectSortedBridgeQuotes],\n  (quotes) => (quotes.length > 0 ? quotes[0] : null),\n);\n\nconst selectActiveQuote = createBridgeSelector(\n  [\n    selectRecommendedQuote,\n    (_, { selectedQuote }: BridgeQuotesClientParams) => selectedQuote,\n  ],\n  (recommendedQuote, selectedQuote) => selectedQuote ?? recommendedQuote,\n);\n\nconst selectIsQuoteGoingToRefresh = createBridgeSelector(\n  [\n    selectBridgeFeatureFlags,\n    (state) => state.quoteRequest.insufficientBal,\n    (state) => state.quotesRefreshCount,\n  ],\n  (featureFlags, insufficientBal, quotesRefreshCount) =>\n    insufficientBal ? false : featureFlags.maxRefreshCount > quotesRefreshCount,\n);\n\nconst selectQuoteRefreshRate = createBridgeSelector(\n  [selectBridgeFeatureFlags, (state) => state.quoteRequest.srcChainId],\n  (featureFlags, srcChainId) =>\n    (srcChainId\n      ? featureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : featureFlags.refreshRate) ?? featureFlags.refreshRate,\n);\n\nexport const selectIsQuoteExpired = createBridgeSelector(\n  [\n    selectIsQuoteGoingToRefresh,\n    ({ quotesLastFetched }) => quotesLastFetched,\n    selectQuoteRefreshRate,\n    (_, __, currentTimeInMs: number) => currentTimeInMs,\n  ],\n  (isQuoteGoingToRefresh, quotesLastFetched, refreshRate, currentTimeInMs) =>\n    Boolean(\n      !isQuoteGoingToRefresh &&\n        quotesLastFetched &&\n        currentTimeInMs - quotesLastFetched > refreshRate,\n    ),\n);\n\n/**\n * Selects sorted cross-chain swap quotes. By default, the quotes are sorted by cost in ascending order.\n *\n * @param state - The state of the bridge controller and its dependency controllers\n * @param sortOrder - The sort order of the quotes\n * @param selectedQuote - The quote that is currently selected by the user, should be cleared by clients when the req params change\n * @returns The activeQuote, recommendedQuote, sortedQuotes, and other quote fetching metadata\n *\n * @example\n * ```ts\n * const quotes = useSelector(state => selectBridgeQuotes(\n *   { ...state.metamask, bridgeConfig: remoteFeatureFlags.bridgeConfig },\n *   {\n *     sortOrder: state.bridge.sortOrder,\n *     selectedQuote: state.bridge.selectedQuote,\n *   }\n * ));\n * ```\n */\nexport const selectBridgeQuotes = createStructuredBridgeSelector({\n  sortedQuotes: selectSortedBridgeQuotes,\n  recommendedQuote: selectRecommendedQuote,\n  activeQuote: selectActiveQuote,\n  quotesLastFetchedMs: (state) => state.quotesLastFetched,\n  isLoading: (state) => state.quotesLoadingStatus === RequestStatus.LOADING,\n  quoteFetchError: (state) => state.quoteFetchError,\n  quotesRefreshCount: (state) => state.quotesRefreshCount,\n  quotesInitialLoadTimeMs: (state) => state.quotesInitialLoadTime,\n  isQuoteGoingToRefresh: selectIsQuoteGoingToRefresh,\n});\n\nexport const selectMinimumBalanceForRentExemptionInSOL = (\n  state: BridgeAppState,\n) =>\n  new BigNumber(state.minimumBalanceForRentExemptionInLamports ?? 0)\n    .div(10 ** 9)\n    .toString();\n"]}
\ No newline at end of file
+{"version":3,"file":"selectors.cjs","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport type {\n  CurrencyRateState,\n  MultichainAssetsRatesControllerState,\n  TokenRatesControllerState,\n} from '@metamask/assets-controllers';\nimport type { GasFeeEstimates } from '@metamask/gas-fee-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { isStrictHexString } from '@metamask/utils';\nimport { BigNumber } from 'bignumber.js';\nimport { orderBy } from 'lodash';\nimport {\n  createSelector as createSelector_,\n  createStructuredSelector as createStructuredSelector_,\n} from 'reselect';\n\nimport { BRIDGE_PREFERRED_GAS_ESTIMATE } from './constants/bridge';\nimport type {\n  BridgeControllerState,\n  ExchangeRate,\n  GenericQuoteRequest,\n  QuoteMetadata,\n  QuoteResponse,\n} from './types';\nimport { RequestStatus, SortOrder } from './types';\nimport {\n  getNativeAssetForChainId,\n  isNativeAddress,\n  isSolanaChainId,\n} from './utils/bridge';\nimport {\n  formatAddressToAssetId,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { processFeatureFlags } from './utils/feature-flags';\nimport {\n  calcAdjustedReturn,\n  calcCost,\n  calcEstimatedAndMaxTotalGasFee,\n  calcIncludedTxFees,\n  calcRelayerFee,\n  calcSentAmount,\n  calcSolanaTotalNetworkFee,\n  calcSwapRate,\n  calcToAmount,\n  calcTotalEstimatedNetworkFee,\n  calcTotalMaxNetworkFee,\n} from './utils/quote';\n\n/**\n * The controller states that provide exchange rates\n */\ntype ExchangeRateControllerState = MultichainAssetsRatesControllerState &\n  TokenRatesControllerState &\n  CurrencyRateState &\n  Pick<BridgeControllerState, 'assetExchangeRates'>;\n/**\n * The state of the bridge controller and all its dependency controllers\n */\ntype RemoteFeatureFlagControllerState = {\n  remoteFeatureFlags: {\n    bridgeConfig: unknown;\n  };\n};\nexport type BridgeAppState = BridgeControllerState & {\n  gasFeeEstimates: GasFeeEstimates;\n} & ExchangeRateControllerState & {\n    participateInMetaMetrics: boolean;\n  } & RemoteFeatureFlagControllerState;\n/**\n * Creates a structured selector for the bridge controller\n */\nconst createStructuredBridgeSelector =\n  createStructuredSelector_.withTypes<BridgeAppState>();\n/**\n * Creates a typed selector for the bridge controller\n */\nconst createBridgeSelector = createSelector_.withTypes<BridgeAppState>();\n/**\n * Required parameters that clients must provide for the bridge quotes selector\n */\ntype BridgeQuotesClientParams = {\n  sortOrder: SortOrder;\n  selectedQuote: (QuoteResponse & QuoteMetadata) | null;\n};\n\nconst createFeatureFlagsSelector =\n  createSelector_.withTypes<RemoteFeatureFlagControllerState>();\n\n/**\n * Selects the bridge feature flags\n *\n * @param state - The state of the bridge controller\n * @returns The bridge feature flags\n *\n * @example\n * ```ts\n * const featureFlags = useSelector(state => selectBridgeFeatureFlags(state));\n *\n * Or\n *\n * export const selectBridgeFeatureFlags = createSelector(\n * selectRemoteFeatureFlags,\n *  (remoteFeatureFlags) =>\n *    selectBridgeFeatureFlagsBase({\n *      bridgeConfig: remoteFeatureFlags.bridgeConfig,\n *    }),\n * );\n * ```\n */\nexport const selectBridgeFeatureFlags = createFeatureFlagsSelector(\n  [(state) => state.remoteFeatureFlags.bridgeConfig],\n  (bridgeConfig: unknown) => processFeatureFlags(bridgeConfig),\n);\n\nconst getExchangeRateByChainIdAndAddress = (\n  exchangeRateSources: ExchangeRateControllerState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n): ExchangeRate => {\n  if (!chainId || !address) {\n    return {};\n  }\n  // TODO return usd exchange rate if user has opted into metrics\n  const assetId = formatAddressToAssetId(address, chainId);\n  if (!assetId) {\n    return {};\n  }\n\n  const { assetExchangeRates, currencyRates, marketData, conversionRates } =\n    exchangeRateSources;\n\n  // If the asset exchange rate is available in the bridge controller, use it\n  // This is defined if the token's rate is not available from the assets controllers\n  const bridgeControllerRate =\n    assetExchangeRates?.[assetId] ??\n    assetExchangeRates?.[assetId.toLowerCase() as CaipAssetType];\n  if (bridgeControllerRate?.exchangeRate) {\n    return bridgeControllerRate;\n  }\n  // If the chain is a Solana chain, use the conversion rate from the multichain assets controller\n  if (isSolanaChainId(chainId)) {\n    const multichainAssetExchangeRate = conversionRates?.[assetId];\n    if (multichainAssetExchangeRate) {\n      return {\n        exchangeRate: multichainAssetExchangeRate.rate,\n        usdExchangeRate: undefined,\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain, use the conversion rate from the currency rates controller\n  if (isNativeAddress(address)) {\n    const { symbol } = getNativeAssetForChainId(chainId);\n    const evmNativeExchangeRate = currencyRates?.[symbol];\n    if (evmNativeExchangeRate) {\n      return {\n        exchangeRate: evmNativeExchangeRate?.conversionRate?.toString(),\n        usdExchangeRate: evmNativeExchangeRate?.usdConversionRate?.toString(),\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain and the asset is not the native asset, use the conversion rate from the token rates controller\n  const evmTokenExchangeRates = marketData?.[formatChainIdToHex(chainId)];\n  const evmTokenExchangeRateForAddress = isStrictHexString(address)\n    ? evmTokenExchangeRates?.[address]\n    : null;\n  const nativeCurrencyRate = evmTokenExchangeRateForAddress\n    ? currencyRates[evmTokenExchangeRateForAddress?.currency]\n    : undefined;\n  if (evmTokenExchangeRateForAddress && nativeCurrencyRate) {\n    return {\n      exchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.conversionRate ?? 0)\n        .toString(),\n      usdExchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.usdConversionRate ?? 0)\n        .toString(),\n    };\n  }\n\n  return {};\n};\n\n/**\n * Selects the asset exchange rate for a given chain and address\n *\n * @param state The state of the bridge controller and its dependency controllers\n * @param chainId The chain ID of the asset\n * @param address The address of the asset\n * @returns The asset exchange rate for the given chain and address\n */\nexport const selectExchangeRateByChainIdAndAddress = (\n  state: BridgeAppState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n) => {\n  return getExchangeRateByChainIdAndAddress(state, chainId, address);\n};\n\n/**\n * Checks whether an exchange rate is available for a given chain and address\n *\n * @param params The parameters to pass to {@link getExchangeRateByChainIdAndAddress}\n * @returns Whether an exchange rate is available for the given chain and address\n */\nexport const selectIsAssetExchangeRateInState = (\n  ...params: Parameters<typeof getExchangeRateByChainIdAndAddress>\n) =>\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.exchangeRate) &&\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.usdExchangeRate);\n\n/**\n * Selects the gas fee estimates from the gas fee controller. All potential networks\n * support EIP1559 gas fees so assume that gasFeeEstimates is of type GasFeeEstimates\n *\n * @returns The gas fee estimates in decGWEI\n */\nconst selectBridgeFeesPerGas = createStructuredBridgeSelector({\n  estimatedBaseFeeInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.estimatedBaseFee,\n  maxPriorityFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.[BRIDGE_PREFERRED_GAS_ESTIMATE]\n      ?.suggestedMaxPriorityFeePerGas,\n  maxFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.high?.suggestedMaxFeePerGas,\n});\n\n// Selects cross-chain swap quotes including their metadata\nconst selectBridgeQuotesWithMetadata = createBridgeSelector(\n  [\n    ({ quotes }) => quotes,\n    selectBridgeFeesPerGas,\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { srcChainId } }) => srcChainId,\n        ({ quoteRequest: { srcTokenAddress } }) => srcTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { destChainId } }) => destChainId,\n        ({ quoteRequest: { destTokenAddress } }) => destTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [(state) => state, ({ quoteRequest: { srcChainId } }) => srcChainId],\n      (state, chainId) =>\n        selectExchangeRateByChainIdAndAddress(state, chainId, AddressZero),\n    ),\n  ],\n  (\n    quotes,\n    bridgeFeesPerGas,\n    srcTokenExchangeRate,\n    destTokenExchangeRate,\n    nativeExchangeRate,\n  ) => {\n    const newQuotes = quotes.map((quote) => {\n      const sentAmount = calcSentAmount(quote.quote, srcTokenExchangeRate);\n      const toTokenAmount = calcToAmount(quote.quote, destTokenExchangeRate);\n\n      const includedTxFees = calcIncludedTxFees(\n        quote.quote,\n        srcTokenExchangeRate,\n        destTokenExchangeRate,\n      );\n\n      let totalEstimatedNetworkFee,\n        totalMaxNetworkFee,\n        relayerFee,\n        gasFee: QuoteMetadata['gasFee'];\n\n      if (isSolanaChainId(quote.quote.srcChainId)) {\n        totalEstimatedNetworkFee = calcSolanaTotalNetworkFee(\n          quote,\n          nativeExchangeRate,\n        );\n        gasFee = {\n          effective: totalEstimatedNetworkFee,\n          total: totalEstimatedNetworkFee,\n          max: totalEstimatedNetworkFee,\n        };\n        totalMaxNetworkFee = totalEstimatedNetworkFee;\n      } else {\n        relayerFee = calcRelayerFee(quote, nativeExchangeRate);\n        gasFee = calcEstimatedAndMaxTotalGasFee({\n          bridgeQuote: quote,\n          ...bridgeFeesPerGas,\n          ...nativeExchangeRate,\n        });\n        // Uses effectiveGasFee to calculate the total estimated network fee\n        totalEstimatedNetworkFee = calcTotalEstimatedNetworkFee(\n          gasFee,\n          relayerFee,\n        );\n        totalMaxNetworkFee = calcTotalMaxNetworkFee(gasFee, relayerFee);\n      }\n\n      const adjustedReturn = calcAdjustedReturn(\n        toTokenAmount,\n        totalEstimatedNetworkFee,\n        quote.quote,\n      );\n      const cost = calcCost(adjustedReturn, sentAmount);\n\n      return {\n        ...quote,\n        // QuoteMetadata fields\n        sentAmount,\n        toTokenAmount,\n        swapRate: calcSwapRate(sentAmount.amount, toTokenAmount.amount),\n        totalNetworkFee: totalEstimatedNetworkFee,\n        totalMaxNetworkFee,\n        gasFee,\n        adjustedReturn,\n        cost,\n        includedTxFees,\n      };\n    });\n\n    return newQuotes;\n  },\n);\n\nconst selectSortedBridgeQuotes = createBridgeSelector(\n  [\n    selectBridgeQuotesWithMetadata,\n    (_, { sortOrder }: BridgeQuotesClientParams) => sortOrder,\n  ],\n  (quotesWithMetadata, sortOrder): (QuoteResponse & QuoteMetadata)[] => {\n    switch (sortOrder) {\n      case SortOrder.ETA_ASC:\n        return orderBy(\n          quotesWithMetadata,\n          (quote) => quote.estimatedProcessingTimeInSeconds,\n          'asc',\n        );\n      default:\n        return orderBy(\n          quotesWithMetadata,\n          ({ cost }) =>\n            cost.valueInCurrency ? Number(cost.valueInCurrency) : 0,\n          'asc',\n        );\n    }\n  },\n);\n\nconst selectRecommendedQuote = createBridgeSelector(\n  [selectSortedBridgeQuotes],\n  (quotes) => (quotes.length > 0 ? quotes[0] : null),\n);\n\nconst selectActiveQuote = createBridgeSelector(\n  [\n    selectRecommendedQuote,\n    (_, { selectedQuote }: BridgeQuotesClientParams) => selectedQuote,\n  ],\n  (recommendedQuote, selectedQuote) => selectedQuote ?? recommendedQuote,\n);\n\nconst selectIsQuoteGoingToRefresh = createBridgeSelector(\n  [\n    selectBridgeFeatureFlags,\n    (state) => state.quoteRequest.insufficientBal,\n    (state) => state.quotesRefreshCount,\n  ],\n  (featureFlags, insufficientBal, quotesRefreshCount) =>\n    insufficientBal ? false : featureFlags.maxRefreshCount > quotesRefreshCount,\n);\n\nconst selectQuoteRefreshRate = createBridgeSelector(\n  [selectBridgeFeatureFlags, (state) => state.quoteRequest.srcChainId],\n  (featureFlags, srcChainId) =>\n    (srcChainId\n      ? featureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : featureFlags.refreshRate) ?? featureFlags.refreshRate,\n);\n\nexport const selectIsQuoteExpired = createBridgeSelector(\n  [\n    selectIsQuoteGoingToRefresh,\n    ({ quotesLastFetched }) => quotesLastFetched,\n    selectQuoteRefreshRate,\n    (_, __, currentTimeInMs: number) => currentTimeInMs,\n  ],\n  (isQuoteGoingToRefresh, quotesLastFetched, refreshRate, currentTimeInMs) =>\n    Boolean(\n      !isQuoteGoingToRefresh &&\n        quotesLastFetched &&\n        currentTimeInMs - quotesLastFetched > refreshRate,\n    ),\n);\n\n/**\n * Selects sorted cross-chain swap quotes. By default, the quotes are sorted by cost in ascending order.\n *\n * @param state - The state of the bridge controller and its dependency controllers\n * @param sortOrder - The sort order of the quotes\n * @param selectedQuote - The quote that is currently selected by the user, should be cleared by clients when the req params change\n * @returns The activeQuote, recommendedQuote, sortedQuotes, and other quote fetching metadata\n *\n * @example\n * ```ts\n * const quotes = useSelector(state => selectBridgeQuotes(\n *   { ...state.metamask, bridgeConfig: remoteFeatureFlags.bridgeConfig },\n *   {\n *     sortOrder: state.bridge.sortOrder,\n *     selectedQuote: state.bridge.selectedQuote,\n *   }\n * ));\n * ```\n */\nexport const selectBridgeQuotes = createStructuredBridgeSelector({\n  sortedQuotes: selectSortedBridgeQuotes,\n  recommendedQuote: selectRecommendedQuote,\n  activeQuote: selectActiveQuote,\n  quotesLastFetchedMs: (state) => state.quotesLastFetched,\n  isLoading: (state) => state.quotesLoadingStatus === RequestStatus.LOADING,\n  quoteFetchError: (state) => state.quoteFetchError,\n  quotesRefreshCount: (state) => state.quotesRefreshCount,\n  quotesInitialLoadTimeMs: (state) => state.quotesInitialLoadTime,\n  isQuoteGoingToRefresh: selectIsQuoteGoingToRefresh,\n});\n\nexport const selectMinimumBalanceForRentExemptionInSOL = (\n  state: BridgeAppState,\n) =>\n  new BigNumber(state.minimumBalanceForRentExemptionInLamports ?? 0)\n    .div(10 ** 9)\n    .toString();\n"]}
\ No newline at end of file
diff --git a/dist/selectors.d.cts b/dist/selectors.d.cts
index 115d7297dd891af0f5360c2381cb71d6736a1f17..29be62e313db7fb25a1dcd8685e34372484716a3 100644
--- a/dist/selectors.d.cts
+++ b/dist/selectors.d.cts
@@ -64,11 +64,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<import(".").FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 }) & {
     clearCache: () => void;
     resultsCount: () => number;
@@ -91,11 +86,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
             normal: number;
             gasless: number;
         } | undefined;
-        quoteRequestOverrides?: Record<import(".").FeatureId, {
-            aggIds?: string[] | undefined;
-            bridgeIds?: string[] | undefined;
-            noFee?: boolean | undefined;
-        } | undefined> | undefined;
     };
     memoizedResultFunc: ((resultFuncArgs_0: any) => {
         support: boolean;
@@ -114,11 +104,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
             normal: number;
             gasless: number;
         } | undefined;
-        quoteRequestOverrides?: Record<import(".").FeatureId, {
-            aggIds?: string[] | undefined;
-            bridgeIds?: string[] | undefined;
-            noFee?: boolean | undefined;
-        } | undefined> | undefined;
     }) & {
         clearCache: () => void;
         resultsCount: () => number;
@@ -141,11 +126,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
             normal: number;
             gasless: number;
         } | undefined;
-        quoteRequestOverrides?: Record<import(".").FeatureId, {
-            aggIds?: string[] | undefined;
-            bridgeIds?: string[] | undefined;
-            noFee?: boolean | undefined;
-        } | undefined> | undefined;
     };
     dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
     recomputations: () => number;
@@ -214,11 +194,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean;
         memoizedResultFunc: ((resultFuncArgs_0: {
             support: boolean;
@@ -237,11 +212,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -265,11 +235,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -292,11 +257,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             memoizedResultFunc: ((resultFuncArgs_0: any) => {
                 support: boolean;
@@ -315,11 +275,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             }) & {
                 clearCache: () => void;
                 resultsCount: () => number;
@@ -342,11 +297,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
             recomputations: () => number;
@@ -390,11 +340,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: string | number | undefined) => number;
         memoizedResultFunc: ((resultFuncArgs_0: {
             support: boolean;
@@ -413,11 +358,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: string | number | undefined) => number) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -441,11 +381,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -468,11 +403,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             memoizedResultFunc: ((resultFuncArgs_0: any) => {
                 support: boolean;
@@ -491,11 +421,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             }) & {
                 clearCache: () => void;
                 resultsCount: () => number;
@@ -518,11 +443,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
             recomputations: () => number;
@@ -712,6 +632,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -720,6 +641,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -729,6 +651,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -737,6 +660,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[];
     recommendedQuote: ({
@@ -878,6 +802,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -886,6 +811,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -895,6 +821,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -903,6 +830,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null;
     activeQuote: ({
@@ -1044,6 +972,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1052,6 +981,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1061,6 +991,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1069,6 +1000,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null;
     quotesLastFetchedMs: number | null;
@@ -1221,6 +1153,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1229,6 +1162,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1238,6 +1172,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1246,6 +1181,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[], resultFuncArgs_3: ({
         quote: {
@@ -1386,6 +1322,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1394,6 +1331,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1403,6 +1341,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1411,6 +1350,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_4: ({
         quote: {
@@ -1551,6 +1491,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1559,6 +1500,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1568,6 +1510,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1576,6 +1519,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_5: number | null, resultFuncArgs_6: boolean, resultFuncArgs_7: number | null, resultFuncArgs_8: boolean) => {
         sortedQuotes: ({
@@ -1717,6 +1661,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1725,6 +1670,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -1734,6 +1680,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1742,6 +1689,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         recommendedQuote: ({
@@ -1883,6 +1831,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1891,6 +1840,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -1900,6 +1850,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1908,6 +1859,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         activeQuote: ({
@@ -2049,6 +2001,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2057,6 +2010,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -2066,6 +2020,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2074,6 +2029,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         quotesLastFetchedMs: number | null;
@@ -2222,6 +2178,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2230,6 +2187,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -2239,6 +2197,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2247,6 +2206,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[], resultFuncArgs_3: ({
         quote: {
@@ -2387,6 +2347,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2395,6 +2356,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -2404,6 +2366,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2412,6 +2375,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_4: ({
         quote: {
@@ -2552,6 +2516,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2560,6 +2525,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -2569,6 +2535,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2577,6 +2544,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_5: number | null, resultFuncArgs_6: boolean, resultFuncArgs_7: number | null, resultFuncArgs_8: boolean) => {
         sortedQuotes: ({
@@ -2718,6 +2686,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2726,6 +2695,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -2735,6 +2705,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2743,6 +2714,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         recommendedQuote: ({
@@ -2884,6 +2856,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2892,6 +2865,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -2901,6 +2875,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2909,6 +2884,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         activeQuote: ({
@@ -3050,6 +3026,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3058,6 +3035,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3067,6 +3045,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3075,6 +3054,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         quotesLastFetchedMs: number | null;
@@ -3228,6 +3208,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3236,6 +3217,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3245,6 +3227,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3253,6 +3236,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         recommendedQuote: ({
@@ -3394,6 +3378,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3402,6 +3387,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3411,6 +3397,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3419,6 +3406,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         activeQuote: ({
@@ -3560,6 +3548,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3568,6 +3557,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3577,6 +3567,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3585,6 +3576,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         quotesLastFetchedMs: number | null;
@@ -3737,6 +3729,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -3745,6 +3738,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -3754,6 +3748,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -3762,6 +3757,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[]) & {
         clearCache: () => void;
@@ -3790,11 +3786,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 valueInCurrency: string | null;
                 usd: string | null;
             };
-            gasFee: {
-                amount: string;
-                valueInCurrency: string | null;
-                usd: string | null;
-            };
+            gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
             adjustedReturn: {
                 valueInCurrency: string | null;
                 usd: string | null;
@@ -3946,6 +3938,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | (string & {
                 data: string;
                 value: string;
@@ -3953,6 +3946,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             });
             approval?: {
                 data: string;
@@ -3961,6 +3955,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
             l1GasFeesInHexWei?: string | undefined;
             solanaFeesInLamports?: string | undefined;
@@ -4103,6 +4098,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4111,6 +4107,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -4120,6 +4117,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4128,6 +4126,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         memoizedResultFunc: ((resultFuncArgs_0: {
@@ -4152,11 +4151,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 valueInCurrency: string | null;
                 usd: string | null;
             };
-            gasFee: {
-                amount: string;
-                valueInCurrency: string | null;
-                usd: string | null;
-            };
+            gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
             adjustedReturn: {
                 valueInCurrency: string | null;
                 usd: string | null;
@@ -4308,6 +4303,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | (string & {
                 data: string;
                 value: string;
@@ -4315,6 +4311,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             });
             approval?: {
                 data: string;
@@ -4323,6 +4320,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
             l1GasFeesInHexWei?: string | undefined;
             solanaFeesInLamports?: string | undefined;
@@ -4465,6 +4463,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4473,6 +4472,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -4482,6 +4482,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4490,6 +4491,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) & {
             clearCache: () => void;
@@ -4635,6 +4637,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4643,6 +4646,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -4652,6 +4656,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4660,6 +4665,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         dependencies: [((state: BridgeControllerState & {
@@ -4688,11 +4694,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 valueInCurrency: string | null;
                 usd: string | null;
             };
-            gasFee: {
-                amount: string;
-                valueInCurrency: string | null;
-                usd: string | null;
-            };
+            gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
             adjustedReturn: {
                 valueInCurrency: string | null;
                 usd: string | null;
@@ -4844,6 +4846,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | (string & {
                 data: string;
                 value: string;
@@ -4851,6 +4854,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             });
             approval?: {
                 data: string;
@@ -4859,6 +4863,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
             l1GasFeesInHexWei?: string | undefined;
             solanaFeesInLamports?: string | undefined;
@@ -5006,6 +5011,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5014,6 +5020,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -5023,6 +5030,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5031,6 +5039,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], resultFuncArgs_1: {
                 estimatedBaseFeeInDecGwei: string;
@@ -5058,11 +5067,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -5214,6 +5219,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -5221,6 +5227,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -5229,6 +5236,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -5372,6 +5380,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5380,6 +5389,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -5389,6 +5399,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5397,6 +5408,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], resultFuncArgs_1: {
                 estimatedBaseFeeInDecGwei: string;
@@ -5424,11 +5436,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -5580,6 +5588,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -5587,6 +5596,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -5595,6 +5605,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -5625,11 +5636,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -5781,6 +5788,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -5788,6 +5796,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -5796,6 +5805,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -5939,6 +5949,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5947,6 +5958,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -5956,6 +5968,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5964,6 +5977,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], ((state: BridgeControllerState & {
                 gasFeeEstimates: GasFeeEstimates;
@@ -6236,6 +6250,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -6244,6 +6259,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -6253,6 +6269,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -6261,6 +6278,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null) & {
         clearCache: () => void;
@@ -6406,6 +6424,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6414,6 +6433,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6423,6 +6443,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6431,6 +6452,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) => ({
             quote: {
@@ -6571,6 +6593,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6579,6 +6602,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6588,6 +6612,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6596,6 +6621,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         memoizedResultFunc: ((resultFuncArgs_0: ({
@@ -6737,6 +6763,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6745,6 +6772,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6754,6 +6782,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6762,6 +6791,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) => ({
             quote: {
@@ -6902,6 +6932,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6910,6 +6941,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6919,6 +6951,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6927,6 +6960,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) & {
             clearCache: () => void;
@@ -7072,6 +7106,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7080,6 +7115,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -7089,6 +7125,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7097,6 +7134,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         dependencies: [((state: BridgeControllerState & {
@@ -7242,6 +7280,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7250,6 +7289,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -7259,6 +7299,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7267,6 +7308,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) & {
             clearCache: () => void;
@@ -7295,11 +7337,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -7451,6 +7489,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -7458,6 +7497,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -7466,6 +7506,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -7608,6 +7649,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7616,6 +7658,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -7625,6 +7668,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7633,6 +7677,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[];
             memoizedResultFunc: ((resultFuncArgs_0: {
@@ -7657,11 +7702,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -7813,6 +7854,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -7820,6 +7862,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -7828,6 +7871,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -7970,6 +8014,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7978,6 +8023,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -7987,6 +8033,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7995,6 +8042,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) & {
                 clearCache: () => void;
@@ -8140,6 +8188,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -8148,6 +8197,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -8157,6 +8207,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -8165,6 +8216,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[];
             dependencies: [((state: BridgeControllerState & {
@@ -8193,11 +8245,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -8349,6 +8397,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -8356,6 +8405,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -8364,6 +8414,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -8511,6 +8562,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8519,6 +8571,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -8528,6 +8581,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8536,6 +8590,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], resultFuncArgs_1: {
                     estimatedBaseFeeInDecGwei: string;
@@ -8563,11 +8618,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -8719,6 +8770,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -8726,6 +8778,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -8734,6 +8787,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -8877,6 +8931,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8885,6 +8940,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -8894,6 +8950,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8902,6 +8959,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], resultFuncArgs_1: {
                     estimatedBaseFeeInDecGwei: string;
@@ -8929,11 +8987,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -9085,6 +9139,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -9092,6 +9147,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -9100,6 +9156,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -9130,11 +9187,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -9286,6 +9339,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -9293,6 +9347,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -9301,6 +9356,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -9444,6 +9500,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -9452,6 +9509,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -9461,6 +9519,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -9469,6 +9528,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], ((state: BridgeControllerState & {
                     gasFeeEstimates: GasFeeEstimates;
@@ -9749,6 +9809,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -9757,6 +9818,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -9766,6 +9828,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -9774,6 +9837,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null) & {
         clearCache: () => void;
@@ -9919,6 +9983,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -9927,6 +9992,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -9936,6 +10002,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -9944,6 +10011,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null, resultFuncArgs_1: ({
             quote: {
@@ -10084,6 +10152,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10092,6 +10161,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10101,6 +10171,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10109,6 +10180,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) => ({
             quote: {
@@ -10249,6 +10321,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10257,6 +10330,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10266,6 +10340,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10274,6 +10349,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         memoizedResultFunc: ((resultFuncArgs_0: ({
@@ -10415,6 +10491,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10423,6 +10500,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10432,6 +10510,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10440,6 +10519,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null, resultFuncArgs_1: ({
             quote: {
@@ -10580,6 +10660,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10588,6 +10669,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10597,6 +10679,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10605,6 +10688,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) => ({
             quote: {
@@ -10745,6 +10829,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10753,6 +10838,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10762,6 +10848,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10770,6 +10857,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) & {
             clearCache: () => void;
@@ -10915,6 +11003,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10923,6 +11012,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10932,6 +11022,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10940,6 +11031,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         dependencies: [((state: BridgeControllerState & {
@@ -11085,6 +11177,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -11093,6 +11186,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -11102,6 +11196,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -11110,6 +11205,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) & {
             clearCache: () => void;
@@ -11255,6 +11351,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11263,6 +11360,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11272,6 +11370,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11280,6 +11379,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) => ({
                 quote: {
@@ -11420,6 +11520,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11428,6 +11529,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11437,6 +11539,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11445,6 +11548,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata) | null;
             memoizedResultFunc: ((resultFuncArgs_0: ({
@@ -11586,6 +11690,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11594,6 +11699,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11603,6 +11709,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11611,6 +11718,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) => ({
                 quote: {
@@ -11751,6 +11859,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11759,6 +11868,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11768,6 +11878,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11776,6 +11887,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata) | null) & {
                 clearCache: () => void;
@@ -11921,6 +12033,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11929,6 +12042,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11938,6 +12052,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11946,6 +12061,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata) | null;
             dependencies: [((state: BridgeControllerState & {
@@ -12091,6 +12207,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -12099,6 +12216,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -12108,6 +12226,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -12116,6 +12235,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) & {
                 clearCache: () => void;
@@ -12144,11 +12264,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -12300,6 +12416,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -12307,6 +12424,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -12315,6 +12433,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -12457,6 +12576,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12465,6 +12585,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -12474,6 +12595,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12482,6 +12604,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & QuoteMetadata)[];
                 memoizedResultFunc: ((resultFuncArgs_0: {
@@ -12506,11 +12629,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -12662,6 +12781,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -12669,6 +12789,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -12677,6 +12798,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -12819,6 +12941,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12827,6 +12950,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -12836,6 +12960,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12844,6 +12969,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & QuoteMetadata)[]) & {
                     clearCache: () => void;
@@ -12989,6 +13115,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12997,6 +13124,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -13006,6 +13134,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -13014,6 +13143,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & QuoteMetadata)[];
                 dependencies: [((state: BridgeControllerState & {
@@ -13042,11 +13172,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -13198,6 +13324,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -13205,6 +13332,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -13213,6 +13341,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -13360,6 +13489,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13368,6 +13498,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & {
                         trade: {
@@ -13377,6 +13508,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13385,6 +13517,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], resultFuncArgs_1: {
                         estimatedBaseFeeInDecGwei: string;
@@ -13412,11 +13545,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             valueInCurrency: string | null;
                             usd: string | null;
                         };
-                        gasFee: {
-                            amount: string;
-                            valueInCurrency: string | null;
-                            usd: string | null;
-                        };
+                        gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                         adjustedReturn: {
                             valueInCurrency: string | null;
                             usd: string | null;
@@ -13568,6 +13697,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | (string & {
                             data: string;
                             value: string;
@@ -13575,6 +13705,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         });
                         approval?: {
                             data: string;
@@ -13583,6 +13714,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                         l1GasFeesInHexWei?: string | undefined;
                         solanaFeesInLamports?: string | undefined;
@@ -13726,6 +13858,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13734,6 +13867,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & {
                         trade: {
@@ -13743,6 +13877,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13751,6 +13886,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], resultFuncArgs_1: {
                         estimatedBaseFeeInDecGwei: string;
@@ -13778,11 +13914,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             valueInCurrency: string | null;
                             usd: string | null;
                         };
-                        gasFee: {
-                            amount: string;
-                            valueInCurrency: string | null;
-                            usd: string | null;
-                        };
+                        gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                         adjustedReturn: {
                             valueInCurrency: string | null;
                             usd: string | null;
@@ -13934,6 +14066,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | (string & {
                             data: string;
                             value: string;
@@ -13941,6 +14074,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         });
                         approval?: {
                             data: string;
@@ -13949,6 +14083,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                         l1GasFeesInHexWei?: string | undefined;
                         solanaFeesInLamports?: string | undefined;
@@ -13979,11 +14114,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             valueInCurrency: string | null;
                             usd: string | null;
                         };
-                        gasFee: {
-                            amount: string;
-                            valueInCurrency: string | null;
-                            usd: string | null;
-                        };
+                        gasFee: Record<"max" | "total" | "effective", import("./types.cjs").TokenAmountValues>;
                         adjustedReturn: {
                             valueInCurrency: string | null;
                             usd: string | null;
@@ -14135,6 +14266,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | (string & {
                             data: string;
                             value: string;
@@ -14142,6 +14274,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         });
                         approval?: {
                             data: string;
@@ -14150,6 +14283,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                         l1GasFeesInHexWei?: string | undefined;
                         solanaFeesInLamports?: string | undefined;
@@ -14293,6 +14427,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -14301,6 +14436,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & {
                         trade: {
@@ -14310,6 +14446,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -14318,6 +14455,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & import("./types.cjs").L1GasFees & import("./types.cjs").SolanaFees)[], ((state: BridgeControllerState & {
                         gasFeeEstimates: GasFeeEstimates;
@@ -14594,6 +14732,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -14602,6 +14741,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -14611,6 +14751,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -14619,6 +14760,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null];
         recomputations: () => number;
@@ -14654,11 +14796,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean;
         memoizedResultFunc: ((resultFuncArgs_0: {
             support: boolean;
@@ -14677,11 +14814,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -14705,11 +14837,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -14732,11 +14859,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             memoizedResultFunc: ((resultFuncArgs_0: any) => {
                 support: boolean;
@@ -14755,11 +14877,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             }) & {
                 clearCache: () => void;
                 resultsCount: () => number;
@@ -14782,11 +14899,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
             recomputations: () => number;
diff --git a/dist/selectors.d.cts.map b/dist/selectors.d.cts.map
index 569605ee5762383082e8e1bf34445a66f475921e..337d95f9f8d511e71b9a3f0e53c1c23ce32efe1c 100644
--- a/dist/selectors.d.cts.map
+++ b/dist/selectors.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"selectors.d.cts","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAkQd,wBAAwB;;;;;;;;;yBApQ5B,eAAe;;kCAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAFlB,eAAe;;siCAFlB,eAAeqCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;qCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;qCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkQd,wBAAwB;;;;;;;;;;;;;;;;;yBApQ5B,eAAe;;klB,eAAe;;siCAFlB,eAAeqCAFlB,eAAeyCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAkQd,wBAAwB;;;;;;;;;;;;;;;;kDA6BpB,wBAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAjShC,eAAe;;kCAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkWnC,CAAC;AAEH,eAAO,MAAM,yCAAyC,UAC7C,cAAc,WAIR,CAAC"}
\ No newline at end of file
+{"version":3,"file":"selectors.d.cts","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAFlB,eAAe;;siCAFlB,eAAeqCAFlB,eAAeyCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA0Qd,wBAAwB;;;;;;;;;;;;;;;;kDA6BpB,wBAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAzShC,eAAe;;kCAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0WnC,CAAC;AAEH,eAAO,MAAM,yCAAyC,UAC7C,cAAc,WAIR,CAAC"}
\ No newline at end of file
diff --git a/dist/selectors.d.mts b/dist/selectors.d.mts
index e1c4e59de405885a5c361aa0ca0a4ab5e227d373..b199a22749b1f6cc2b643404f8044d9dfa510524 100644
--- a/dist/selectors.d.mts
+++ b/dist/selectors.d.mts
@@ -64,11 +64,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<import(".").FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 }) & {
     clearCache: () => void;
     resultsCount: () => number;
@@ -91,11 +86,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
             normal: number;
             gasless: number;
         } | undefined;
-        quoteRequestOverrides?: Record<import(".").FeatureId, {
-            aggIds?: string[] | undefined;
-            bridgeIds?: string[] | undefined;
-            noFee?: boolean | undefined;
-        } | undefined> | undefined;
     };
     memoizedResultFunc: ((resultFuncArgs_0: any) => {
         support: boolean;
@@ -114,11 +104,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
             normal: number;
             gasless: number;
         } | undefined;
-        quoteRequestOverrides?: Record<import(".").FeatureId, {
-            aggIds?: string[] | undefined;
-            bridgeIds?: string[] | undefined;
-            noFee?: boolean | undefined;
-        } | undefined> | undefined;
     }) & {
         clearCache: () => void;
         resultsCount: () => number;
@@ -141,11 +126,6 @@ export declare const selectBridgeFeatureFlags: ((state: RemoteFeatureFlagControl
             normal: number;
             gasless: number;
         } | undefined;
-        quoteRequestOverrides?: Record<import(".").FeatureId, {
-            aggIds?: string[] | undefined;
-            bridgeIds?: string[] | undefined;
-            noFee?: boolean | undefined;
-        } | undefined> | undefined;
     };
     dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
     recomputations: () => number;
@@ -214,11 +194,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean;
         memoizedResultFunc: ((resultFuncArgs_0: {
             support: boolean;
@@ -237,11 +212,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -265,11 +235,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -292,11 +257,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             memoizedResultFunc: ((resultFuncArgs_0: any) => {
                 support: boolean;
@@ -315,11 +275,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             }) & {
                 clearCache: () => void;
                 resultsCount: () => number;
@@ -342,11 +297,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
             recomputations: () => number;
@@ -390,11 +340,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: string | number | undefined) => number;
         memoizedResultFunc: ((resultFuncArgs_0: {
             support: boolean;
@@ -413,11 +358,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: string | number | undefined) => number) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -441,11 +381,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -468,11 +403,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             memoizedResultFunc: ((resultFuncArgs_0: any) => {
                 support: boolean;
@@ -491,11 +421,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             }) & {
                 clearCache: () => void;
                 resultsCount: () => number;
@@ -518,11 +443,6 @@ export declare const selectIsQuoteExpired: ((state: RemoteFeatureFlagControllerS
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
             recomputations: () => number;
@@ -712,6 +632,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -720,6 +641,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -729,6 +651,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -737,6 +660,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[];
     recommendedQuote: ({
@@ -878,6 +802,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -886,6 +811,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -895,6 +821,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -903,6 +830,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null;
     activeQuote: ({
@@ -1044,6 +972,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1052,6 +981,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1061,6 +991,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1069,6 +1000,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null;
     quotesLastFetchedMs: number | null;
@@ -1221,6 +1153,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1229,6 +1162,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1238,6 +1172,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1246,6 +1181,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[], resultFuncArgs_3: ({
         quote: {
@@ -1386,6 +1322,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1394,6 +1331,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1403,6 +1341,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1411,6 +1350,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_4: ({
         quote: {
@@ -1551,6 +1491,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1559,6 +1500,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -1568,6 +1510,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -1576,6 +1519,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_5: number | null, resultFuncArgs_6: boolean, resultFuncArgs_7: number | null, resultFuncArgs_8: boolean) => {
         sortedQuotes: ({
@@ -1717,6 +1661,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1725,6 +1670,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -1734,6 +1680,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1742,6 +1689,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         recommendedQuote: ({
@@ -1883,6 +1831,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1891,6 +1840,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -1900,6 +1850,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -1908,6 +1859,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         activeQuote: ({
@@ -2049,6 +2001,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2057,6 +2010,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -2066,6 +2020,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2074,6 +2029,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         quotesLastFetchedMs: number | null;
@@ -2222,6 +2178,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2230,6 +2187,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -2239,6 +2197,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2247,6 +2206,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[], resultFuncArgs_3: ({
         quote: {
@@ -2387,6 +2347,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2395,6 +2356,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -2404,6 +2366,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2412,6 +2375,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_4: ({
         quote: {
@@ -2552,6 +2516,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2560,6 +2525,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -2569,6 +2535,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -2577,6 +2544,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null, resultFuncArgs_5: number | null, resultFuncArgs_6: boolean, resultFuncArgs_7: number | null, resultFuncArgs_8: boolean) => {
         sortedQuotes: ({
@@ -2718,6 +2686,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2726,6 +2695,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -2735,6 +2705,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2743,6 +2714,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         recommendedQuote: ({
@@ -2884,6 +2856,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2892,6 +2865,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -2901,6 +2875,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -2909,6 +2884,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         activeQuote: ({
@@ -3050,6 +3026,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3058,6 +3035,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3067,6 +3045,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3075,6 +3054,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         quotesLastFetchedMs: number | null;
@@ -3228,6 +3208,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3236,6 +3217,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3245,6 +3227,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3253,6 +3236,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         recommendedQuote: ({
@@ -3394,6 +3378,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3402,6 +3387,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3411,6 +3397,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3419,6 +3406,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         activeQuote: ({
@@ -3560,6 +3548,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3568,6 +3557,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -3577,6 +3567,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -3585,6 +3576,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         quotesLastFetchedMs: number | null;
@@ -3737,6 +3729,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -3745,6 +3738,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -3754,6 +3748,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -3762,6 +3757,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata)[]) & {
         clearCache: () => void;
@@ -3790,11 +3786,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 valueInCurrency: string | null;
                 usd: string | null;
             };
-            gasFee: {
-                amount: string;
-                valueInCurrency: string | null;
-                usd: string | null;
-            };
+            gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
             adjustedReturn: {
                 valueInCurrency: string | null;
                 usd: string | null;
@@ -3946,6 +3938,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | (string & {
                 data: string;
                 value: string;
@@ -3953,6 +3946,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             });
             approval?: {
                 data: string;
@@ -3961,6 +3955,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
             l1GasFeesInHexWei?: string | undefined;
             solanaFeesInLamports?: string | undefined;
@@ -4103,6 +4098,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4111,6 +4107,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -4120,6 +4117,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4128,6 +4126,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         memoizedResultFunc: ((resultFuncArgs_0: {
@@ -4152,11 +4151,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 valueInCurrency: string | null;
                 usd: string | null;
             };
-            gasFee: {
-                amount: string;
-                valueInCurrency: string | null;
-                usd: string | null;
-            };
+            gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
             adjustedReturn: {
                 valueInCurrency: string | null;
                 usd: string | null;
@@ -4308,6 +4303,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | (string & {
                 data: string;
                 value: string;
@@ -4315,6 +4311,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             });
             approval?: {
                 data: string;
@@ -4323,6 +4320,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
             l1GasFeesInHexWei?: string | undefined;
             solanaFeesInLamports?: string | undefined;
@@ -4465,6 +4463,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4473,6 +4472,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -4482,6 +4482,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4490,6 +4491,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) & {
             clearCache: () => void;
@@ -4635,6 +4637,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4643,6 +4646,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -4652,6 +4656,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -4660,6 +4665,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[];
         dependencies: [((state: BridgeControllerState & {
@@ -4688,11 +4694,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 valueInCurrency: string | null;
                 usd: string | null;
             };
-            gasFee: {
-                amount: string;
-                valueInCurrency: string | null;
-                usd: string | null;
-            };
+            gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
             adjustedReturn: {
                 valueInCurrency: string | null;
                 usd: string | null;
@@ -4844,6 +4846,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | (string & {
                 data: string;
                 value: string;
@@ -4851,6 +4854,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             });
             approval?: {
                 data: string;
@@ -4859,6 +4863,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
             l1GasFeesInHexWei?: string | undefined;
             solanaFeesInLamports?: string | undefined;
@@ -5006,6 +5011,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5014,6 +5020,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -5023,6 +5030,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5031,6 +5039,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], resultFuncArgs_1: {
                 estimatedBaseFeeInDecGwei: string;
@@ -5058,11 +5067,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -5214,6 +5219,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -5221,6 +5227,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -5229,6 +5236,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -5372,6 +5380,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5380,6 +5389,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -5389,6 +5399,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5397,6 +5408,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], resultFuncArgs_1: {
                 estimatedBaseFeeInDecGwei: string;
@@ -5424,11 +5436,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -5580,6 +5588,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -5587,6 +5596,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -5595,6 +5605,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -5625,11 +5636,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -5781,6 +5788,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -5788,6 +5796,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -5796,6 +5805,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -5939,6 +5949,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5947,6 +5958,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -5956,6 +5968,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -5964,6 +5977,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], ((state: BridgeControllerState & {
                 gasFeeEstimates: GasFeeEstimates;
@@ -6236,6 +6250,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -6244,6 +6259,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -6253,6 +6269,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -6261,6 +6278,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null) & {
         clearCache: () => void;
@@ -6406,6 +6424,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6414,6 +6433,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6423,6 +6443,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6431,6 +6452,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) => ({
             quote: {
@@ -6571,6 +6593,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6579,6 +6602,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6588,6 +6612,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6596,6 +6621,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         memoizedResultFunc: ((resultFuncArgs_0: ({
@@ -6737,6 +6763,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6745,6 +6772,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6754,6 +6782,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6762,6 +6791,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) => ({
             quote: {
@@ -6902,6 +6932,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6910,6 +6941,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -6919,6 +6951,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -6927,6 +6960,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) & {
             clearCache: () => void;
@@ -7072,6 +7106,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7080,6 +7115,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -7089,6 +7125,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7097,6 +7134,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         dependencies: [((state: BridgeControllerState & {
@@ -7242,6 +7280,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7250,6 +7289,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -7259,6 +7299,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -7267,6 +7308,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata)[]) & {
             clearCache: () => void;
@@ -7295,11 +7337,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -7451,6 +7489,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -7458,6 +7497,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -7466,6 +7506,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -7608,6 +7649,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7616,6 +7658,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -7625,6 +7668,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7633,6 +7677,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[];
             memoizedResultFunc: ((resultFuncArgs_0: {
@@ -7657,11 +7702,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -7813,6 +7854,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -7820,6 +7862,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -7828,6 +7871,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -7970,6 +8014,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7978,6 +8023,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -7987,6 +8033,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -7995,6 +8042,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) & {
                 clearCache: () => void;
@@ -8140,6 +8188,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -8148,6 +8197,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -8157,6 +8207,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -8165,6 +8216,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[];
             dependencies: [((state: BridgeControllerState & {
@@ -8193,11 +8245,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     valueInCurrency: string | null;
                     usd: string | null;
                 };
-                gasFee: {
-                    amount: string;
-                    valueInCurrency: string | null;
-                    usd: string | null;
-                };
+                gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                 adjustedReturn: {
                     valueInCurrency: string | null;
                     usd: string | null;
@@ -8349,6 +8397,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | (string & {
                     data: string;
                     value: string;
@@ -8356,6 +8405,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 });
                 approval?: {
                     data: string;
@@ -8364,6 +8414,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
                 l1GasFeesInHexWei?: string | undefined;
                 solanaFeesInLamports?: string | undefined;
@@ -8511,6 +8562,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8519,6 +8571,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -8528,6 +8581,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8536,6 +8590,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], resultFuncArgs_1: {
                     estimatedBaseFeeInDecGwei: string;
@@ -8563,11 +8618,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -8719,6 +8770,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -8726,6 +8778,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -8734,6 +8787,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -8877,6 +8931,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8885,6 +8940,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -8894,6 +8950,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -8902,6 +8959,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], resultFuncArgs_1: {
                     estimatedBaseFeeInDecGwei: string;
@@ -8929,11 +8987,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -9085,6 +9139,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -9092,6 +9147,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -9100,6 +9156,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -9130,11 +9187,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -9286,6 +9339,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -9293,6 +9347,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -9301,6 +9356,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -9444,6 +9500,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -9452,6 +9509,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -9461,6 +9519,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -9469,6 +9528,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], ((state: BridgeControllerState & {
                     gasFeeEstimates: GasFeeEstimates;
@@ -9749,6 +9809,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -9757,6 +9818,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & {
         trade: {
@@ -9766,6 +9828,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         };
         approval?: {
             data: string;
@@ -9774,6 +9837,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
             from: string;
             gasLimit: number | null;
             chainId: number;
+            effectiveGas?: number | undefined;
         } | undefined;
     } & QuoteMetadata) | null) & {
         clearCache: () => void;
@@ -9919,6 +9983,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -9927,6 +9992,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -9936,6 +10002,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -9944,6 +10011,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null, resultFuncArgs_1: ({
             quote: {
@@ -10084,6 +10152,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10092,6 +10161,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10101,6 +10171,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10109,6 +10180,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) => ({
             quote: {
@@ -10249,6 +10321,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10257,6 +10330,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10266,6 +10340,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10274,6 +10349,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         memoizedResultFunc: ((resultFuncArgs_0: ({
@@ -10415,6 +10491,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10423,6 +10500,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10432,6 +10510,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10440,6 +10519,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null, resultFuncArgs_1: ({
             quote: {
@@ -10580,6 +10660,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10588,6 +10669,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10597,6 +10679,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10605,6 +10688,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) => ({
             quote: {
@@ -10745,6 +10829,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10753,6 +10838,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10762,6 +10848,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10770,6 +10857,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) & {
             clearCache: () => void;
@@ -10915,6 +11003,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10923,6 +11012,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -10932,6 +11022,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -10940,6 +11031,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null;
         dependencies: [((state: BridgeControllerState & {
@@ -11085,6 +11177,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -11093,6 +11186,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -11102,6 +11196,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -11110,6 +11205,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null) & {
             clearCache: () => void;
@@ -11255,6 +11351,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11263,6 +11360,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11272,6 +11370,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11280,6 +11379,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) => ({
                 quote: {
@@ -11420,6 +11520,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11428,6 +11529,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11437,6 +11539,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11445,6 +11548,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata) | null;
             memoizedResultFunc: ((resultFuncArgs_0: ({
@@ -11586,6 +11690,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11594,6 +11699,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11603,6 +11709,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11611,6 +11718,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) => ({
                 quote: {
@@ -11751,6 +11859,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11759,6 +11868,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11768,6 +11878,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11776,6 +11887,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata) | null) & {
                 clearCache: () => void;
@@ -11921,6 +12033,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11929,6 +12042,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -11938,6 +12052,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -11946,6 +12061,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata) | null;
             dependencies: [((state: BridgeControllerState & {
@@ -12091,6 +12207,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -12099,6 +12216,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & {
                 trade: {
@@ -12108,6 +12226,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 };
                 approval?: {
                     data: string;
@@ -12116,6 +12235,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     from: string;
                     gasLimit: number | null;
                     chainId: number;
+                    effectiveGas?: number | undefined;
                 } | undefined;
             } & QuoteMetadata)[]) & {
                 clearCache: () => void;
@@ -12144,11 +12264,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -12300,6 +12416,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -12307,6 +12424,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -12315,6 +12433,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -12457,6 +12576,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12465,6 +12585,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -12474,6 +12595,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12482,6 +12604,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & QuoteMetadata)[];
                 memoizedResultFunc: ((resultFuncArgs_0: {
@@ -12506,11 +12629,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -12662,6 +12781,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -12669,6 +12789,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -12677,6 +12798,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -12819,6 +12941,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12827,6 +12950,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -12836,6 +12960,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12844,6 +12969,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & QuoteMetadata)[]) & {
                     clearCache: () => void;
@@ -12989,6 +13115,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -12997,6 +13124,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & {
                     trade: {
@@ -13006,6 +13134,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     };
                     approval?: {
                         data: string;
@@ -13014,6 +13143,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                 } & QuoteMetadata)[];
                 dependencies: [((state: BridgeControllerState & {
@@ -13042,11 +13172,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         valueInCurrency: string | null;
                         usd: string | null;
                     };
-                    gasFee: {
-                        amount: string;
-                        valueInCurrency: string | null;
-                        usd: string | null;
-                    };
+                    gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                     adjustedReturn: {
                         valueInCurrency: string | null;
                         usd: string | null;
@@ -13198,6 +13324,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | (string & {
                         data: string;
                         value: string;
@@ -13205,6 +13332,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     });
                     approval?: {
                         data: string;
@@ -13213,6 +13341,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                         from: string;
                         gasLimit: number | null;
                         chainId: number;
+                        effectiveGas?: number | undefined;
                     } | undefined;
                     l1GasFeesInHexWei?: string | undefined;
                     solanaFeesInLamports?: string | undefined;
@@ -13360,6 +13489,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13368,6 +13498,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & {
                         trade: {
@@ -13377,6 +13508,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13385,6 +13517,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], resultFuncArgs_1: {
                         estimatedBaseFeeInDecGwei: string;
@@ -13412,11 +13545,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             valueInCurrency: string | null;
                             usd: string | null;
                         };
-                        gasFee: {
-                            amount: string;
-                            valueInCurrency: string | null;
-                            usd: string | null;
-                        };
+                        gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                         adjustedReturn: {
                             valueInCurrency: string | null;
                             usd: string | null;
@@ -13568,6 +13697,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | (string & {
                             data: string;
                             value: string;
@@ -13575,6 +13705,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         });
                         approval?: {
                             data: string;
@@ -13583,6 +13714,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                         l1GasFeesInHexWei?: string | undefined;
                         solanaFeesInLamports?: string | undefined;
@@ -13726,6 +13858,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13734,6 +13867,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & {
                         trade: {
@@ -13743,6 +13877,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -13751,6 +13886,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], resultFuncArgs_1: {
                         estimatedBaseFeeInDecGwei: string;
@@ -13778,11 +13914,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             valueInCurrency: string | null;
                             usd: string | null;
                         };
-                        gasFee: {
-                            amount: string;
-                            valueInCurrency: string | null;
-                            usd: string | null;
-                        };
+                        gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                         adjustedReturn: {
                             valueInCurrency: string | null;
                             usd: string | null;
@@ -13934,6 +14066,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | (string & {
                             data: string;
                             value: string;
@@ -13941,6 +14074,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         });
                         approval?: {
                             data: string;
@@ -13949,6 +14083,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                         l1GasFeesInHexWei?: string | undefined;
                         solanaFeesInLamports?: string | undefined;
@@ -13979,11 +14114,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             valueInCurrency: string | null;
                             usd: string | null;
                         };
-                        gasFee: {
-                            amount: string;
-                            valueInCurrency: string | null;
-                            usd: string | null;
-                        };
+                        gasFee: Record<"max" | "total" | "effective", import("./types.mjs").TokenAmountValues>;
                         adjustedReturn: {
                             valueInCurrency: string | null;
                             usd: string | null;
@@ -14135,6 +14266,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | (string & {
                             data: string;
                             value: string;
@@ -14142,6 +14274,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         });
                         approval?: {
                             data: string;
@@ -14150,6 +14283,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                         l1GasFeesInHexWei?: string | undefined;
                         solanaFeesInLamports?: string | undefined;
@@ -14293,6 +14427,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -14301,6 +14436,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & {
                         trade: {
@@ -14310,6 +14446,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         };
                         approval?: {
                             data: string;
@@ -14318,6 +14455,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                             from: string;
                             gasLimit: number | null;
                             chainId: number;
+                            effectiveGas?: number | undefined;
                         } | undefined;
                     } & import("./types.mjs").L1GasFees & import("./types.mjs").SolanaFees)[], ((state: BridgeControllerState & {
                         gasFeeEstimates: GasFeeEstimates;
@@ -14594,6 +14732,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -14602,6 +14741,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & {
             trade: {
@@ -14611,6 +14751,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             };
             approval?: {
                 data: string;
@@ -14619,6 +14760,7 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } | undefined;
         } & QuoteMetadata) | null];
         recomputations: () => number;
@@ -14654,11 +14796,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean;
         memoizedResultFunc: ((resultFuncArgs_0: {
             support: boolean;
@@ -14677,11 +14814,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }, resultFuncArgs_1: boolean | undefined, resultFuncArgs_2: number) => boolean) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -14705,11 +14837,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                 normal: number;
                 gasless: number;
             } | undefined;
-            quoteRequestOverrides?: Record<import(".").FeatureId, {
-                aggIds?: string[] | undefined;
-                bridgeIds?: string[] | undefined;
-                noFee?: boolean | undefined;
-            } | undefined> | undefined;
         }) & {
             clearCache: () => void;
             resultsCount: () => number;
@@ -14732,11 +14859,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             memoizedResultFunc: ((resultFuncArgs_0: any) => {
                 support: boolean;
@@ -14755,11 +14877,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             }) & {
                 clearCache: () => void;
                 resultsCount: () => number;
@@ -14782,11 +14899,6 @@ export declare const selectBridgeQuotes: ((state: BridgeControllerState & {
                     normal: number;
                     gasless: number;
                 } | undefined;
-                quoteRequestOverrides?: Record<import(".").FeatureId, {
-                    aggIds?: string[] | undefined;
-                    bridgeIds?: string[] | undefined;
-                    noFee?: boolean | undefined;
-                } | undefined> | undefined;
             };
             dependencies: [(state: RemoteFeatureFlagControllerState) => unknown];
             recomputations: () => number;
diff --git a/dist/selectors.d.mts.map b/dist/selectors.d.mts.map
index 69bc446bfd33cf1ab72d0c1d61310d116ecab2e3..197d39ec6ba605d4440cfbd234e1572cfda67a49 100644
--- a/dist/selectors.d.mts.map
+++ b/dist/selectors.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"selectors.d.mts","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAFlB,eAAe;;klB,eAAe;;sCAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;iCAFlB,eAAe;;0CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAkQd,wBAAwB;;;;;;;;;yBApQ5B,eAAe;;klB,eAAe;;siCAFlB,eAAeqCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;qCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;qCAFlB,eAAe;;8CAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkQd,wBAAwB;;;;;;;;;;;;;;;;;yBApQ5B,eAAe;;klB,eAAe;;siCAFlB,eAAeqCAFlB,eAAeyCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;yCAFlB,eAAe;;kDAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAkQd,wBAAwB;;;;;;;;;;;;;;;;kDA6BpB,wBAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAjShC,eAAe;;kCAEJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkWnC,CAAC;AAEH,eAAO,MAAM,yCAAyC,UAC7C,cAAc,WAIR,CAAC"}
\ No newline at end of file
+{"version":3,"file":"selectors.d.mts","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/selectors.mjs b/dist/selectors.mjs
index a53870be4a761744641ac905cdc506f5e5817950..aeecd3e0f74a39c16fce50009fbc367ff208f691 100644
--- a/dist/selectors.mjs
+++ b/dist/selectors.mjs
@@ -152,10 +152,14 @@ const selectBridgeQuotesWithMetadata = createBridgeSelector([
         const sentAmount = calcSentAmount(quote.quote, srcTokenExchangeRate);
         const toTokenAmount = calcToAmount(quote.quote, destTokenExchangeRate);
         const includedTxFees = calcIncludedTxFees(quote.quote, srcTokenExchangeRate, destTokenExchangeRate);
-        let totalEstimatedNetworkFee, gasFee, totalMaxNetworkFee, relayerFee;
+        let totalEstimatedNetworkFee, totalMaxNetworkFee, relayerFee, gasFee;
         if (isSolanaChainId(quote.quote.srcChainId)) {
             totalEstimatedNetworkFee = calcSolanaTotalNetworkFee(quote, nativeExchangeRate);
-            gasFee = totalEstimatedNetworkFee;
+            gasFee = {
+                effective: totalEstimatedNetworkFee,
+                total: totalEstimatedNetworkFee,
+                max: totalEstimatedNetworkFee,
+            };
             totalMaxNetworkFee = totalEstimatedNetworkFee;
         }
         else {
@@ -165,6 +169,7 @@ const selectBridgeQuotesWithMetadata = createBridgeSelector([
                 ...bridgeFeesPerGas,
                 ...nativeExchangeRate,
             });
+            // Uses effectiveGasFee to calculate the total estimated network fee
             totalEstimatedNetworkFee = calcTotalEstimatedNetworkFee(gasFee, relayerFee);
             totalMaxNetworkFee = calcTotalMaxNetworkFee(gasFee, relayerFee);
         }
diff --git a/dist/selectors.mjs.map b/dist/selectors.mjs.map
index 88d2f03805f437cd56d38fe412462bae2400bcc4..fd4de5a71efd24874541697b85ded486caae6b25 100644
--- a/dist/selectors.mjs.map
+++ b/dist/selectors.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"selectors.mjs","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport type {\n  CurrencyRateState,\n  MultichainAssetsRatesControllerState,\n  TokenRatesControllerState,\n} from '@metamask/assets-controllers';\nimport type { GasFeeEstimates } from '@metamask/gas-fee-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { isStrictHexString } from '@metamask/utils';\nimport { BigNumber } from 'bignumber.js';\nimport { orderBy } from 'lodash';\nimport {\n  createSelector as createSelector_,\n  createStructuredSelector as createStructuredSelector_,\n} from 'reselect';\n\nimport { BRIDGE_PREFERRED_GAS_ESTIMATE } from './constants/bridge';\nimport type {\n  BridgeControllerState,\n  ExchangeRate,\n  GenericQuoteRequest,\n  QuoteMetadata,\n  QuoteResponse,\n} from './types';\nimport { RequestStatus, SortOrder } from './types';\nimport {\n  getNativeAssetForChainId,\n  isNativeAddress,\n  isSolanaChainId,\n} from './utils/bridge';\nimport {\n  formatAddressToAssetId,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { processFeatureFlags } from './utils/feature-flags';\nimport {\n  calcAdjustedReturn,\n  calcCost,\n  calcEstimatedAndMaxTotalGasFee,\n  calcIncludedTxFees,\n  calcRelayerFee,\n  calcSentAmount,\n  calcSolanaTotalNetworkFee,\n  calcSwapRate,\n  calcToAmount,\n  calcTotalEstimatedNetworkFee,\n  calcTotalMaxNetworkFee,\n} from './utils/quote';\n\n/**\n * The controller states that provide exchange rates\n */\ntype ExchangeRateControllerState = MultichainAssetsRatesControllerState &\n  TokenRatesControllerState &\n  CurrencyRateState &\n  Pick<BridgeControllerState, 'assetExchangeRates'>;\n/**\n * The state of the bridge controller and all its dependency controllers\n */\ntype RemoteFeatureFlagControllerState = {\n  remoteFeatureFlags: {\n    bridgeConfig: unknown;\n  };\n};\nexport type BridgeAppState = BridgeControllerState & {\n  gasFeeEstimates: GasFeeEstimates;\n} & ExchangeRateControllerState & {\n    participateInMetaMetrics: boolean;\n  } & RemoteFeatureFlagControllerState;\n/**\n * Creates a structured selector for the bridge controller\n */\nconst createStructuredBridgeSelector =\n  createStructuredSelector_.withTypes<BridgeAppState>();\n/**\n * Creates a typed selector for the bridge controller\n */\nconst createBridgeSelector = createSelector_.withTypes<BridgeAppState>();\n/**\n * Required parameters that clients must provide for the bridge quotes selector\n */\ntype BridgeQuotesClientParams = {\n  sortOrder: SortOrder;\n  selectedQuote: (QuoteResponse & QuoteMetadata) | null;\n};\n\nconst createFeatureFlagsSelector =\n  createSelector_.withTypes<RemoteFeatureFlagControllerState>();\n\n/**\n * Selects the bridge feature flags\n *\n * @param state - The state of the bridge controller\n * @returns The bridge feature flags\n *\n * @example\n * ```ts\n * const featureFlags = useSelector(state => selectBridgeFeatureFlags(state));\n *\n * Or\n *\n * export const selectBridgeFeatureFlags = createSelector(\n * selectRemoteFeatureFlags,\n *  (remoteFeatureFlags) =>\n *    selectBridgeFeatureFlagsBase({\n *      bridgeConfig: remoteFeatureFlags.bridgeConfig,\n *    }),\n * );\n * ```\n */\nexport const selectBridgeFeatureFlags = createFeatureFlagsSelector(\n  [(state) => state.remoteFeatureFlags.bridgeConfig],\n  (bridgeConfig: unknown) => processFeatureFlags(bridgeConfig),\n);\n\nconst getExchangeRateByChainIdAndAddress = (\n  exchangeRateSources: ExchangeRateControllerState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n): ExchangeRate => {\n  if (!chainId || !address) {\n    return {};\n  }\n  // TODO return usd exchange rate if user has opted into metrics\n  const assetId = formatAddressToAssetId(address, chainId);\n  if (!assetId) {\n    return {};\n  }\n\n  const { assetExchangeRates, currencyRates, marketData, conversionRates } =\n    exchangeRateSources;\n\n  // If the asset exchange rate is available in the bridge controller, use it\n  // This is defined if the token's rate is not available from the assets controllers\n  const bridgeControllerRate =\n    assetExchangeRates?.[assetId] ??\n    assetExchangeRates?.[assetId.toLowerCase() as CaipAssetType];\n  if (bridgeControllerRate?.exchangeRate) {\n    return bridgeControllerRate;\n  }\n  // If the chain is a Solana chain, use the conversion rate from the multichain assets controller\n  if (isSolanaChainId(chainId)) {\n    const multichainAssetExchangeRate = conversionRates?.[assetId];\n    if (multichainAssetExchangeRate) {\n      return {\n        exchangeRate: multichainAssetExchangeRate.rate,\n        usdExchangeRate: undefined,\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain, use the conversion rate from the currency rates controller\n  if (isNativeAddress(address)) {\n    const { symbol } = getNativeAssetForChainId(chainId);\n    const evmNativeExchangeRate = currencyRates?.[symbol];\n    if (evmNativeExchangeRate) {\n      return {\n        exchangeRate: evmNativeExchangeRate?.conversionRate?.toString(),\n        usdExchangeRate: evmNativeExchangeRate?.usdConversionRate?.toString(),\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain and the asset is not the native asset, use the conversion rate from the token rates controller\n  const evmTokenExchangeRates = marketData?.[formatChainIdToHex(chainId)];\n  const evmTokenExchangeRateForAddress = isStrictHexString(address)\n    ? evmTokenExchangeRates?.[address]\n    : null;\n  const nativeCurrencyRate = evmTokenExchangeRateForAddress\n    ? currencyRates[evmTokenExchangeRateForAddress?.currency]\n    : undefined;\n  if (evmTokenExchangeRateForAddress && nativeCurrencyRate) {\n    return {\n      exchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.conversionRate ?? 0)\n        .toString(),\n      usdExchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.usdConversionRate ?? 0)\n        .toString(),\n    };\n  }\n\n  return {};\n};\n\n/**\n * Selects the asset exchange rate for a given chain and address\n *\n * @param state The state of the bridge controller and its dependency controllers\n * @param chainId The chain ID of the asset\n * @param address The address of the asset\n * @returns The asset exchange rate for the given chain and address\n */\nexport const selectExchangeRateByChainIdAndAddress = (\n  state: BridgeAppState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n) => {\n  return getExchangeRateByChainIdAndAddress(state, chainId, address);\n};\n\n/**\n * Checks whether an exchange rate is available for a given chain and address\n *\n * @param params The parameters to pass to {@link getExchangeRateByChainIdAndAddress}\n * @returns Whether an exchange rate is available for the given chain and address\n */\nexport const selectIsAssetExchangeRateInState = (\n  ...params: Parameters<typeof getExchangeRateByChainIdAndAddress>\n) =>\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.exchangeRate) &&\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.usdExchangeRate);\n\n/**\n * Selects the gas fee estimates from the gas fee controller. All potential networks\n * support EIP1559 gas fees so assume that gasFeeEstimates is of type GasFeeEstimates\n *\n * @returns The gas fee estimates in decGWEI\n */\nconst selectBridgeFeesPerGas = createStructuredBridgeSelector({\n  estimatedBaseFeeInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.estimatedBaseFee,\n  maxPriorityFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.[BRIDGE_PREFERRED_GAS_ESTIMATE]\n      ?.suggestedMaxPriorityFeePerGas,\n  maxFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.high?.suggestedMaxFeePerGas,\n});\n\n// Selects cross-chain swap quotes including their metadata\nconst selectBridgeQuotesWithMetadata = createBridgeSelector(\n  [\n    ({ quotes }) => quotes,\n    selectBridgeFeesPerGas,\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { srcChainId } }) => srcChainId,\n        ({ quoteRequest: { srcTokenAddress } }) => srcTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { destChainId } }) => destChainId,\n        ({ quoteRequest: { destTokenAddress } }) => destTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [(state) => state, ({ quoteRequest: { srcChainId } }) => srcChainId],\n      (state, chainId) =>\n        selectExchangeRateByChainIdAndAddress(state, chainId, AddressZero),\n    ),\n  ],\n  (\n    quotes,\n    bridgeFeesPerGas,\n    srcTokenExchangeRate,\n    destTokenExchangeRate,\n    nativeExchangeRate,\n  ) => {\n    const newQuotes = quotes.map((quote) => {\n      const sentAmount = calcSentAmount(quote.quote, srcTokenExchangeRate);\n      const toTokenAmount = calcToAmount(quote.quote, destTokenExchangeRate);\n\n      const includedTxFees = calcIncludedTxFees(\n        quote.quote,\n        srcTokenExchangeRate,\n        destTokenExchangeRate,\n      );\n\n      let totalEstimatedNetworkFee, gasFee, totalMaxNetworkFee, relayerFee;\n\n      if (isSolanaChainId(quote.quote.srcChainId)) {\n        totalEstimatedNetworkFee = calcSolanaTotalNetworkFee(\n          quote,\n          nativeExchangeRate,\n        );\n        gasFee = totalEstimatedNetworkFee;\n        totalMaxNetworkFee = totalEstimatedNetworkFee;\n      } else {\n        relayerFee = calcRelayerFee(quote, nativeExchangeRate);\n        gasFee = calcEstimatedAndMaxTotalGasFee({\n          bridgeQuote: quote,\n          ...bridgeFeesPerGas,\n          ...nativeExchangeRate,\n        });\n        totalEstimatedNetworkFee = calcTotalEstimatedNetworkFee(\n          gasFee,\n          relayerFee,\n        );\n        totalMaxNetworkFee = calcTotalMaxNetworkFee(gasFee, relayerFee);\n      }\n\n      const adjustedReturn = calcAdjustedReturn(\n        toTokenAmount,\n        totalEstimatedNetworkFee,\n        quote.quote,\n      );\n      const cost = calcCost(adjustedReturn, sentAmount);\n\n      return {\n        ...quote,\n        // QuoteMetadata fields\n        sentAmount,\n        toTokenAmount,\n        swapRate: calcSwapRate(sentAmount.amount, toTokenAmount.amount),\n        totalNetworkFee: totalEstimatedNetworkFee,\n        totalMaxNetworkFee,\n        gasFee,\n        adjustedReturn,\n        cost,\n        includedTxFees,\n      };\n    });\n\n    return newQuotes;\n  },\n);\n\nconst selectSortedBridgeQuotes = createBridgeSelector(\n  [\n    selectBridgeQuotesWithMetadata,\n    (_, { sortOrder }: BridgeQuotesClientParams) => sortOrder,\n  ],\n  (quotesWithMetadata, sortOrder): (QuoteResponse & QuoteMetadata)[] => {\n    switch (sortOrder) {\n      case SortOrder.ETA_ASC:\n        return orderBy(\n          quotesWithMetadata,\n          (quote) => quote.estimatedProcessingTimeInSeconds,\n          'asc',\n        );\n      default:\n        return orderBy(\n          quotesWithMetadata,\n          ({ cost }) =>\n            cost.valueInCurrency ? Number(cost.valueInCurrency) : 0,\n          'asc',\n        );\n    }\n  },\n);\n\nconst selectRecommendedQuote = createBridgeSelector(\n  [selectSortedBridgeQuotes],\n  (quotes) => (quotes.length > 0 ? quotes[0] : null),\n);\n\nconst selectActiveQuote = createBridgeSelector(\n  [\n    selectRecommendedQuote,\n    (_, { selectedQuote }: BridgeQuotesClientParams) => selectedQuote,\n  ],\n  (recommendedQuote, selectedQuote) => selectedQuote ?? recommendedQuote,\n);\n\nconst selectIsQuoteGoingToRefresh = createBridgeSelector(\n  [\n    selectBridgeFeatureFlags,\n    (state) => state.quoteRequest.insufficientBal,\n    (state) => state.quotesRefreshCount,\n  ],\n  (featureFlags, insufficientBal, quotesRefreshCount) =>\n    insufficientBal ? false : featureFlags.maxRefreshCount > quotesRefreshCount,\n);\n\nconst selectQuoteRefreshRate = createBridgeSelector(\n  [selectBridgeFeatureFlags, (state) => state.quoteRequest.srcChainId],\n  (featureFlags, srcChainId) =>\n    (srcChainId\n      ? featureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : featureFlags.refreshRate) ?? featureFlags.refreshRate,\n);\n\nexport const selectIsQuoteExpired = createBridgeSelector(\n  [\n    selectIsQuoteGoingToRefresh,\n    ({ quotesLastFetched }) => quotesLastFetched,\n    selectQuoteRefreshRate,\n    (_, __, currentTimeInMs: number) => currentTimeInMs,\n  ],\n  (isQuoteGoingToRefresh, quotesLastFetched, refreshRate, currentTimeInMs) =>\n    Boolean(\n      !isQuoteGoingToRefresh &&\n        quotesLastFetched &&\n        currentTimeInMs - quotesLastFetched > refreshRate,\n    ),\n);\n\n/**\n * Selects sorted cross-chain swap quotes. By default, the quotes are sorted by cost in ascending order.\n *\n * @param state - The state of the bridge controller and its dependency controllers\n * @param sortOrder - The sort order of the quotes\n * @param selectedQuote - The quote that is currently selected by the user, should be cleared by clients when the req params change\n * @returns The activeQuote, recommendedQuote, sortedQuotes, and other quote fetching metadata\n *\n * @example\n * ```ts\n * const quotes = useSelector(state => selectBridgeQuotes(\n *   { ...state.metamask, bridgeConfig: remoteFeatureFlags.bridgeConfig },\n *   {\n *     sortOrder: state.bridge.sortOrder,\n *     selectedQuote: state.bridge.selectedQuote,\n *   }\n * ));\n * ```\n */\nexport const selectBridgeQuotes = createStructuredBridgeSelector({\n  sortedQuotes: selectSortedBridgeQuotes,\n  recommendedQuote: selectRecommendedQuote,\n  activeQuote: selectActiveQuote,\n  quotesLastFetchedMs: (state) => state.quotesLastFetched,\n  isLoading: (state) => state.quotesLoadingStatus === RequestStatus.LOADING,\n  quoteFetchError: (state) => state.quoteFetchError,\n  quotesRefreshCount: (state) => state.quotesRefreshCount,\n  quotesInitialLoadTimeMs: (state) => state.quotesInitialLoadTime,\n  isQuoteGoingToRefresh: selectIsQuoteGoingToRefresh,\n});\n\nexport const selectMinimumBalanceForRentExemptionInSOL = (\n  state: BridgeAppState,\n) =>\n  new BigNumber(state.minimumBalanceForRentExemptionInLamports ?? 0)\n    .div(10 ** 9)\n    .toString();\n"]}
\ No newline at end of file
+{"version":3,"file":"selectors.mjs","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { AddressZero } from '@ethersproject/constants';\nimport type {\n  CurrencyRateState,\n  MultichainAssetsRatesControllerState,\n  TokenRatesControllerState,\n} from '@metamask/assets-controllers';\nimport type { GasFeeEstimates } from '@metamask/gas-fee-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport { isStrictHexString } from '@metamask/utils';\nimport { BigNumber } from 'bignumber.js';\nimport { orderBy } from 'lodash';\nimport {\n  createSelector as createSelector_,\n  createStructuredSelector as createStructuredSelector_,\n} from 'reselect';\n\nimport { BRIDGE_PREFERRED_GAS_ESTIMATE } from './constants/bridge';\nimport type {\n  BridgeControllerState,\n  ExchangeRate,\n  GenericQuoteRequest,\n  QuoteMetadata,\n  QuoteResponse,\n} from './types';\nimport { RequestStatus, SortOrder } from './types';\nimport {\n  getNativeAssetForChainId,\n  isNativeAddress,\n  isSolanaChainId,\n} from './utils/bridge';\nimport {\n  formatAddressToAssetId,\n  formatChainIdToCaip,\n  formatChainIdToHex,\n} from './utils/caip-formatters';\nimport { processFeatureFlags } from './utils/feature-flags';\nimport {\n  calcAdjustedReturn,\n  calcCost,\n  calcEstimatedAndMaxTotalGasFee,\n  calcIncludedTxFees,\n  calcRelayerFee,\n  calcSentAmount,\n  calcSolanaTotalNetworkFee,\n  calcSwapRate,\n  calcToAmount,\n  calcTotalEstimatedNetworkFee,\n  calcTotalMaxNetworkFee,\n} from './utils/quote';\n\n/**\n * The controller states that provide exchange rates\n */\ntype ExchangeRateControllerState = MultichainAssetsRatesControllerState &\n  TokenRatesControllerState &\n  CurrencyRateState &\n  Pick<BridgeControllerState, 'assetExchangeRates'>;\n/**\n * The state of the bridge controller and all its dependency controllers\n */\ntype RemoteFeatureFlagControllerState = {\n  remoteFeatureFlags: {\n    bridgeConfig: unknown;\n  };\n};\nexport type BridgeAppState = BridgeControllerState & {\n  gasFeeEstimates: GasFeeEstimates;\n} & ExchangeRateControllerState & {\n    participateInMetaMetrics: boolean;\n  } & RemoteFeatureFlagControllerState;\n/**\n * Creates a structured selector for the bridge controller\n */\nconst createStructuredBridgeSelector =\n  createStructuredSelector_.withTypes<BridgeAppState>();\n/**\n * Creates a typed selector for the bridge controller\n */\nconst createBridgeSelector = createSelector_.withTypes<BridgeAppState>();\n/**\n * Required parameters that clients must provide for the bridge quotes selector\n */\ntype BridgeQuotesClientParams = {\n  sortOrder: SortOrder;\n  selectedQuote: (QuoteResponse & QuoteMetadata) | null;\n};\n\nconst createFeatureFlagsSelector =\n  createSelector_.withTypes<RemoteFeatureFlagControllerState>();\n\n/**\n * Selects the bridge feature flags\n *\n * @param state - The state of the bridge controller\n * @returns The bridge feature flags\n *\n * @example\n * ```ts\n * const featureFlags = useSelector(state => selectBridgeFeatureFlags(state));\n *\n * Or\n *\n * export const selectBridgeFeatureFlags = createSelector(\n * selectRemoteFeatureFlags,\n *  (remoteFeatureFlags) =>\n *    selectBridgeFeatureFlagsBase({\n *      bridgeConfig: remoteFeatureFlags.bridgeConfig,\n *    }),\n * );\n * ```\n */\nexport const selectBridgeFeatureFlags = createFeatureFlagsSelector(\n  [(state) => state.remoteFeatureFlags.bridgeConfig],\n  (bridgeConfig: unknown) => processFeatureFlags(bridgeConfig),\n);\n\nconst getExchangeRateByChainIdAndAddress = (\n  exchangeRateSources: ExchangeRateControllerState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n): ExchangeRate => {\n  if (!chainId || !address) {\n    return {};\n  }\n  // TODO return usd exchange rate if user has opted into metrics\n  const assetId = formatAddressToAssetId(address, chainId);\n  if (!assetId) {\n    return {};\n  }\n\n  const { assetExchangeRates, currencyRates, marketData, conversionRates } =\n    exchangeRateSources;\n\n  // If the asset exchange rate is available in the bridge controller, use it\n  // This is defined if the token's rate is not available from the assets controllers\n  const bridgeControllerRate =\n    assetExchangeRates?.[assetId] ??\n    assetExchangeRates?.[assetId.toLowerCase() as CaipAssetType];\n  if (bridgeControllerRate?.exchangeRate) {\n    return bridgeControllerRate;\n  }\n  // If the chain is a Solana chain, use the conversion rate from the multichain assets controller\n  if (isSolanaChainId(chainId)) {\n    const multichainAssetExchangeRate = conversionRates?.[assetId];\n    if (multichainAssetExchangeRate) {\n      return {\n        exchangeRate: multichainAssetExchangeRate.rate,\n        usdExchangeRate: undefined,\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain, use the conversion rate from the currency rates controller\n  if (isNativeAddress(address)) {\n    const { symbol } = getNativeAssetForChainId(chainId);\n    const evmNativeExchangeRate = currencyRates?.[symbol];\n    if (evmNativeExchangeRate) {\n      return {\n        exchangeRate: evmNativeExchangeRate?.conversionRate?.toString(),\n        usdExchangeRate: evmNativeExchangeRate?.usdConversionRate?.toString(),\n      };\n    }\n    return {};\n  }\n  // If the chain is an EVM chain and the asset is not the native asset, use the conversion rate from the token rates controller\n  const evmTokenExchangeRates = marketData?.[formatChainIdToHex(chainId)];\n  const evmTokenExchangeRateForAddress = isStrictHexString(address)\n    ? evmTokenExchangeRates?.[address]\n    : null;\n  const nativeCurrencyRate = evmTokenExchangeRateForAddress\n    ? currencyRates[evmTokenExchangeRateForAddress?.currency]\n    : undefined;\n  if (evmTokenExchangeRateForAddress && nativeCurrencyRate) {\n    return {\n      exchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.conversionRate ?? 0)\n        .toString(),\n      usdExchangeRate: new BigNumber(evmTokenExchangeRateForAddress.price)\n        .multipliedBy(nativeCurrencyRate.usdConversionRate ?? 0)\n        .toString(),\n    };\n  }\n\n  return {};\n};\n\n/**\n * Selects the asset exchange rate for a given chain and address\n *\n * @param state The state of the bridge controller and its dependency controllers\n * @param chainId The chain ID of the asset\n * @param address The address of the asset\n * @returns The asset exchange rate for the given chain and address\n */\nexport const selectExchangeRateByChainIdAndAddress = (\n  state: BridgeAppState,\n  chainId?: GenericQuoteRequest['srcChainId'],\n  address?: GenericQuoteRequest['srcTokenAddress'],\n) => {\n  return getExchangeRateByChainIdAndAddress(state, chainId, address);\n};\n\n/**\n * Checks whether an exchange rate is available for a given chain and address\n *\n * @param params The parameters to pass to {@link getExchangeRateByChainIdAndAddress}\n * @returns Whether an exchange rate is available for the given chain and address\n */\nexport const selectIsAssetExchangeRateInState = (\n  ...params: Parameters<typeof getExchangeRateByChainIdAndAddress>\n) =>\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.exchangeRate) &&\n  Boolean(getExchangeRateByChainIdAndAddress(...params)?.usdExchangeRate);\n\n/**\n * Selects the gas fee estimates from the gas fee controller. All potential networks\n * support EIP1559 gas fees so assume that gasFeeEstimates is of type GasFeeEstimates\n *\n * @returns The gas fee estimates in decGWEI\n */\nconst selectBridgeFeesPerGas = createStructuredBridgeSelector({\n  estimatedBaseFeeInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.estimatedBaseFee,\n  maxPriorityFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.[BRIDGE_PREFERRED_GAS_ESTIMATE]\n      ?.suggestedMaxPriorityFeePerGas,\n  maxFeePerGasInDecGwei: ({ gasFeeEstimates }) =>\n    gasFeeEstimates?.high?.suggestedMaxFeePerGas,\n});\n\n// Selects cross-chain swap quotes including their metadata\nconst selectBridgeQuotesWithMetadata = createBridgeSelector(\n  [\n    ({ quotes }) => quotes,\n    selectBridgeFeesPerGas,\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { srcChainId } }) => srcChainId,\n        ({ quoteRequest: { srcTokenAddress } }) => srcTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [\n        (state) => state,\n        ({ quoteRequest: { destChainId } }) => destChainId,\n        ({ quoteRequest: { destTokenAddress } }) => destTokenAddress,\n      ],\n      selectExchangeRateByChainIdAndAddress,\n    ),\n    createBridgeSelector(\n      [(state) => state, ({ quoteRequest: { srcChainId } }) => srcChainId],\n      (state, chainId) =>\n        selectExchangeRateByChainIdAndAddress(state, chainId, AddressZero),\n    ),\n  ],\n  (\n    quotes,\n    bridgeFeesPerGas,\n    srcTokenExchangeRate,\n    destTokenExchangeRate,\n    nativeExchangeRate,\n  ) => {\n    const newQuotes = quotes.map((quote) => {\n      const sentAmount = calcSentAmount(quote.quote, srcTokenExchangeRate);\n      const toTokenAmount = calcToAmount(quote.quote, destTokenExchangeRate);\n\n      const includedTxFees = calcIncludedTxFees(\n        quote.quote,\n        srcTokenExchangeRate,\n        destTokenExchangeRate,\n      );\n\n      let totalEstimatedNetworkFee,\n        totalMaxNetworkFee,\n        relayerFee,\n        gasFee: QuoteMetadata['gasFee'];\n\n      if (isSolanaChainId(quote.quote.srcChainId)) {\n        totalEstimatedNetworkFee = calcSolanaTotalNetworkFee(\n          quote,\n          nativeExchangeRate,\n        );\n        gasFee = {\n          effective: totalEstimatedNetworkFee,\n          total: totalEstimatedNetworkFee,\n          max: totalEstimatedNetworkFee,\n        };\n        totalMaxNetworkFee = totalEstimatedNetworkFee;\n      } else {\n        relayerFee = calcRelayerFee(quote, nativeExchangeRate);\n        gasFee = calcEstimatedAndMaxTotalGasFee({\n          bridgeQuote: quote,\n          ...bridgeFeesPerGas,\n          ...nativeExchangeRate,\n        });\n        // Uses effectiveGasFee to calculate the total estimated network fee\n        totalEstimatedNetworkFee = calcTotalEstimatedNetworkFee(\n          gasFee,\n          relayerFee,\n        );\n        totalMaxNetworkFee = calcTotalMaxNetworkFee(gasFee, relayerFee);\n      }\n\n      const adjustedReturn = calcAdjustedReturn(\n        toTokenAmount,\n        totalEstimatedNetworkFee,\n        quote.quote,\n      );\n      const cost = calcCost(adjustedReturn, sentAmount);\n\n      return {\n        ...quote,\n        // QuoteMetadata fields\n        sentAmount,\n        toTokenAmount,\n        swapRate: calcSwapRate(sentAmount.amount, toTokenAmount.amount),\n        totalNetworkFee: totalEstimatedNetworkFee,\n        totalMaxNetworkFee,\n        gasFee,\n        adjustedReturn,\n        cost,\n        includedTxFees,\n      };\n    });\n\n    return newQuotes;\n  },\n);\n\nconst selectSortedBridgeQuotes = createBridgeSelector(\n  [\n    selectBridgeQuotesWithMetadata,\n    (_, { sortOrder }: BridgeQuotesClientParams) => sortOrder,\n  ],\n  (quotesWithMetadata, sortOrder): (QuoteResponse & QuoteMetadata)[] => {\n    switch (sortOrder) {\n      case SortOrder.ETA_ASC:\n        return orderBy(\n          quotesWithMetadata,\n          (quote) => quote.estimatedProcessingTimeInSeconds,\n          'asc',\n        );\n      default:\n        return orderBy(\n          quotesWithMetadata,\n          ({ cost }) =>\n            cost.valueInCurrency ? Number(cost.valueInCurrency) : 0,\n          'asc',\n        );\n    }\n  },\n);\n\nconst selectRecommendedQuote = createBridgeSelector(\n  [selectSortedBridgeQuotes],\n  (quotes) => (quotes.length > 0 ? quotes[0] : null),\n);\n\nconst selectActiveQuote = createBridgeSelector(\n  [\n    selectRecommendedQuote,\n    (_, { selectedQuote }: BridgeQuotesClientParams) => selectedQuote,\n  ],\n  (recommendedQuote, selectedQuote) => selectedQuote ?? recommendedQuote,\n);\n\nconst selectIsQuoteGoingToRefresh = createBridgeSelector(\n  [\n    selectBridgeFeatureFlags,\n    (state) => state.quoteRequest.insufficientBal,\n    (state) => state.quotesRefreshCount,\n  ],\n  (featureFlags, insufficientBal, quotesRefreshCount) =>\n    insufficientBal ? false : featureFlags.maxRefreshCount > quotesRefreshCount,\n);\n\nconst selectQuoteRefreshRate = createBridgeSelector(\n  [selectBridgeFeatureFlags, (state) => state.quoteRequest.srcChainId],\n  (featureFlags, srcChainId) =>\n    (srcChainId\n      ? featureFlags.chains[formatChainIdToCaip(srcChainId)]?.refreshRate\n      : featureFlags.refreshRate) ?? featureFlags.refreshRate,\n);\n\nexport const selectIsQuoteExpired = createBridgeSelector(\n  [\n    selectIsQuoteGoingToRefresh,\n    ({ quotesLastFetched }) => quotesLastFetched,\n    selectQuoteRefreshRate,\n    (_, __, currentTimeInMs: number) => currentTimeInMs,\n  ],\n  (isQuoteGoingToRefresh, quotesLastFetched, refreshRate, currentTimeInMs) =>\n    Boolean(\n      !isQuoteGoingToRefresh &&\n        quotesLastFetched &&\n        currentTimeInMs - quotesLastFetched > refreshRate,\n    ),\n);\n\n/**\n * Selects sorted cross-chain swap quotes. By default, the quotes are sorted by cost in ascending order.\n *\n * @param state - The state of the bridge controller and its dependency controllers\n * @param sortOrder - The sort order of the quotes\n * @param selectedQuote - The quote that is currently selected by the user, should be cleared by clients when the req params change\n * @returns The activeQuote, recommendedQuote, sortedQuotes, and other quote fetching metadata\n *\n * @example\n * ```ts\n * const quotes = useSelector(state => selectBridgeQuotes(\n *   { ...state.metamask, bridgeConfig: remoteFeatureFlags.bridgeConfig },\n *   {\n *     sortOrder: state.bridge.sortOrder,\n *     selectedQuote: state.bridge.selectedQuote,\n *   }\n * ));\n * ```\n */\nexport const selectBridgeQuotes = createStructuredBridgeSelector({\n  sortedQuotes: selectSortedBridgeQuotes,\n  recommendedQuote: selectRecommendedQuote,\n  activeQuote: selectActiveQuote,\n  quotesLastFetchedMs: (state) => state.quotesLastFetched,\n  isLoading: (state) => state.quotesLoadingStatus === RequestStatus.LOADING,\n  quoteFetchError: (state) => state.quoteFetchError,\n  quotesRefreshCount: (state) => state.quotesRefreshCount,\n  quotesInitialLoadTimeMs: (state) => state.quotesInitialLoadTime,\n  isQuoteGoingToRefresh: selectIsQuoteGoingToRefresh,\n});\n\nexport const selectMinimumBalanceForRentExemptionInSOL = (\n  state: BridgeAppState,\n) =>\n  new BigNumber(state.minimumBalanceForRentExemptionInLamports ?? 0)\n    .div(10 ** 9)\n    .toString();\n"]}
\ No newline at end of file
diff --git a/dist/types.cjs b/dist/types.cjs
index 9f5d0eda998b8a266c9527e1cf4f8abf60b0ae5b..7ce9c0a4239148f637bb00b7f0c993909febb75f 100644
--- a/dist/types.cjs
+++ b/dist/types.cjs
@@ -64,6 +64,5 @@ var BridgeBackgroundAction;
     BridgeBackgroundAction["GET_BRIDGE_ERC20_ALLOWANCE"] = "getBridgeERC20Allowance";
     BridgeBackgroundAction["TRACK_METAMETRICS_EVENT"] = "trackUnifiedSwapBridgeEvent";
     BridgeBackgroundAction["STOP_POLLING_FOR_QUOTES"] = "stopPollingForQuotes";
-    BridgeBackgroundAction["FETCH_QUOTES"] = "fetchQuotes";
 })(BridgeBackgroundAction || (exports.BridgeBackgroundAction = BridgeBackgroundAction = {}));
 //# sourceMappingURL=types.cjs.map
\ No newline at end of file
diff --git a/dist/types.cjs.map b/dist/types.cjs.map
index 67049b5c28a5dd2787007900edb6915fd3e0cfbc..135e6c2a70aebea21a40d10b6f3f22de4034ce39 100644
--- a/dist/types.cjs.map
+++ b/dist/types.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAwDA;;GAEG;AACH,IAAY,SAYX;AAZD,WAAY,SAAS;IACnB,4DAA4D;IAC5D,8BAAiB,CAAA;IACjB,qBAAqB;IACrB,4BAAe,CAAA;IACf,kCAAkC;IAClC,wBAAW,CAAA;IACX;;;OAGG;IACH,gCAAmB,CAAA;AACrB,CAAC,EAZW,SAAS,yBAAT,SAAS,QAYpB;AAsED;;GAEG;AACH,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,wCAA2B,CAAA;IAC3B,wCAA2B,CAAA;AAC7B,CAAC,EAHW,SAAS,yBAAT,SAAS,QAGpB;AAkED,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,kCAAmB,CAAA;IACnB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,oCAAqB,CAAA;AACvB,CAAC,EALW,WAAW,2BAAX,WAAW,QAKtB;AAmCD,IAAY,OAWX;AAXD,WAAY,OAAO;IACjB,mCAAO,CAAA;IACP,8CAAa,CAAA;IACb,oCAAQ,CAAA;IACR,6CAAa,CAAA;IACb,2CAAY,CAAA;IACZ,wCAAW,CAAA;IACX,iDAAgB,CAAA;IAChB,mDAAiB,CAAA;IACjB,2CAAa,CAAA;IACb,wDAAyB,CAAA;AAC3B,CAAC,EAXW,OAAO,uBAAP,OAAO,QAWlB;AAID,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,uDAAO,CAAA;IACP,uDAAO,CAAA;IACP,mDAAK,CAAA;AACP,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB;AACD,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IAC1B,6DAAyC,CAAA;IACzC,0EAAsD,CAAA;AACxD,CAAC,EAHW,gBAAgB,gCAAhB,gBAAgB,QAG3B;AACD,IAAY,sBAOX;AAPD,WAAY,sBAAsB;IAChC,8EAAoD,CAAA;IACpD,oDAA0B,CAAA;IAC1B,gFAAsD,CAAA;IACtD,iFAAuD,CAAA;IACvD,0EAAgD,CAAA;IAChD,sDAA4B,CAAA;AAC9B,CAAC,EAPW,sBAAsB,sCAAtB,sBAAsB,QAOjC","sourcesContent":["import type { AccountsControllerGetSelectedMultichainAccountAction } from '@metamask/accounts-controller';\nimport type {\n  GetCurrencyRateState,\n  MultichainAssetsRatesControllerGetStateAction,\n  TokenRatesControllerGetStateAction,\n} from '@metamask/assets-controllers';\nimport type {\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  CaipAccountId,\n  CaipAssetId,\n  CaipAssetType,\n  CaipChainId,\n  Hex,\n} from '@metamask/utils';\n\nimport type { BridgeController } from './bridge-controller';\nimport type { BRIDGE_CONTROLLER_NAME } from './constants/bridge';\nimport type {\n  BridgeAssetSchema,\n  ChainConfigurationSchema,\n  FeeDataSchema,\n  PlatformConfigSchema,\n  ProtocolSchema,\n  QuoteResponseSchema,\n  QuoteSchema,\n  StepSchema,\n  TxDataSchema,\n} from './utils/validators';\n\n/**\n * Additional options accepted by the extension's fetchWithCache function\n */\ntype FetchWithCacheOptions = {\n  cacheOptions?: {\n    cacheRefreshTime: number;\n  };\n  functionName?: string;\n};\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit & FetchWithCacheOptions,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * The types of assets that a user can send\n */\nexport enum AssetType {\n  /** The native asset for the current network, such as ETH */\n  native = 'NATIVE',\n  /** An ERC20 token */\n  token = 'TOKEN',\n  /** An ERC721 or ERC1155 token. */\n  NFT = 'NFT',\n  /**\n   * A transaction interacting with a contract that isn't a token method\n   * interaction will be marked as dealing with an unknown asset type.\n   */\n  unknown = 'UNKNOWN',\n}\n\nexport type ChainConfiguration = Infer<typeof ChainConfigurationSchema>;\n\nexport type L1GasFees = {\n  l1GasFeesInHexWei?: string; // l1 fees for approval and trade in hex wei, appended by BridgeController.#appendL1GasFees\n};\n\nexport type SolanaFees = {\n  solanaFeesInLamports?: string; // solana fees in lamports, appended by BridgeController.#appendSolanaFees\n};\n\n/**\n * The types of values for the token amount and its values when converted to the user's selected currency and USD\n */\nexport type TokenAmountValues = {\n  /**\n   * The amount of the token\n   *\n   * @example \"1000000000000000000\"\n   */\n  amount: string;\n  /**\n   * The amount of the token in the user's selected currency\n   *\n   * @example \"4.55\"\n   */\n  valueInCurrency: string | null;\n  /**\n   * The amount of the token in USD\n   *\n   * @example \"1.234\"\n   */\n  usd: string | null;\n};\n\n/**\n * Asset exchange rate values for a given chain and address\n */\nexport type ExchangeRate = { exchangeRate?: string; usdExchangeRate?: string };\n\n/**\n * Values derived from the quote response\n */\nexport type QuoteMetadata = {\n  /**\n   * If gas is included, this is the value of the src or dest token that was used to pay for the gas\n   */\n  includedTxFees?: TokenAmountValues | null;\n  gasFee: TokenAmountValues;\n  totalNetworkFee: TokenAmountValues; // estimatedGasFees + relayerFees\n  totalMaxNetworkFee: TokenAmountValues; // maxGasFees + relayerFees\n  /**\n   * The amount that the user will receive (destTokenAmount)\n   */\n  toTokenAmount: TokenAmountValues;\n  /**\n   * If gas is included: toTokenAmount\n   * Otherwise: toTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValues, 'amount'>;\n  /**\n   * The amount that the user will send, including fees\n   * srcTokenAmount + metabridgeFee + txFee\n   */\n  sentAmount: TokenAmountValues;\n  swapRate: string; // destTokenAmount / sentAmount\n  cost: Omit<TokenAmountValues, 'amount'>; // sentAmount - adjustedReturn\n};\n\n/**\n * Sort order set by the user\n */\nexport enum SortOrder {\n  COST_ASC = 'cost_ascending',\n  ETA_ASC = 'time_descending',\n}\n\n/**\n * This is the interface for the asset object returned by the bridge-api\n * This type is used in the QuoteResponse and in the fetchBridgeTokens response\n */\nexport type BridgeAsset = Infer<typeof BridgeAssetSchema>;\n\n/**\n * This is the interface for the token object used in the extension client\n * In addition to the {@link BridgeAsset} fields, it includes balance information\n */\nexport type BridgeToken = {\n  address: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  chainId: number | Hex | ChainId | CaipChainId;\n  balance: string; // raw balance\n  // TODO deprecate this field and use balance instead\n  string: string | undefined; // normalized balance as a stringified number\n  tokenFiatAmount?: number | null;\n  occurrences?: number;\n};\n\ntype DecimalChainId = string;\nexport type GasMultiplierByChainId = Record<DecimalChainId, number>;\n\nexport type FeatureFlagResponse = Infer<typeof PlatformConfigSchema>;\n\n// TODO move definition to validators.ts\n/**\n * This is the interface for the quote request sent to the bridge-api\n * and should only be used by the fetchBridgeQuotes utility function\n * Components and redux stores should use the {@link GenericQuoteRequest} type\n */\nexport type QuoteRequest<\n  ChainIdType = ChainId | number,\n  TokenAddressType = string,\n  WalletAddressType = string,\n> = {\n  walletAddress: WalletAddressType;\n  destWalletAddress?: WalletAddressType;\n  srcChainId: ChainIdType;\n  destChainId: ChainIdType;\n  srcTokenAddress: TokenAddressType;\n  destTokenAddress: TokenAddressType;\n  /**\n   * This is the amount sent, in atomic amount\n   */\n  srcTokenAmount: string;\n  slippage?: number;\n  aggIds?: string[];\n  bridgeIds?: string[];\n  insufficientBal?: boolean;\n  resetApproval?: boolean;\n  refuel?: boolean;\n  /**\n   * Whether the response should include gasless swap quotes\n   * This should be true if the user has opted in to STX on the client\n   * and the current network has STX support\n   */\n  gasIncluded: boolean;\n  noFee?: boolean;\n};\n\nexport enum StatusTypes {\n  UNKNOWN = 'UNKNOWN',\n  FAILED = 'FAILED',\n  PENDING = 'PENDING',\n  COMPLETE = 'COMPLETE',\n}\n\n/**\n * These are types that components pass in. Since data is a mix of types when coming from the redux store, we need to use a generic type that can cover all the types.\n * Payloads with this type are transformed into QuoteRequest by fetchBridgeQuotes right before fetching quotes\n */\nexport type GenericQuoteRequest = QuoteRequest<\n  Hex | CaipChainId | string | number, // chainIds\n  Hex | CaipAssetId | string, // assetIds/addresses\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-arguments\n  Hex | CaipAccountId | string // accountIds/addresses\n>;\n\nexport type Protocol = Infer<typeof ProtocolSchema>;\n\nexport type Step = Infer<typeof StepSchema>;\n\nexport type RefuelData = Step;\n\nexport type FeeData = Infer<typeof FeeDataSchema>;\n\nexport type Quote = Infer<typeof QuoteSchema>;\n\nexport type TxData = Infer<typeof TxDataSchema>;\n/**\n * This is the type for the quote response from the bridge-api\n * TxDataType can be overriden to be a string when the quote is non-evm\n */\nexport type QuoteResponse<TxDataType = TxData> = Infer<\n  typeof QuoteResponseSchema\n> & {\n  trade: TxDataType;\n  approval?: TxData;\n};\n\nexport enum ChainId {\n  ETH = 1,\n  OPTIMISM = 10,\n  BSC = 56,\n  POLYGON = 137,\n  ZKSYNC = 324,\n  BASE = 8453,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  LINEA = 59144,\n  SOLANA = 1151111081099710,\n}\n\nexport type FeatureFlagsPlatformConfig = Infer<typeof PlatformConfigSchema>;\n\nexport enum RequestStatus {\n  LOADING,\n  FETCHED,\n  ERROR,\n}\nexport enum BridgeUserAction {\n  SELECT_DEST_NETWORK = 'selectDestNetwork',\n  UPDATE_QUOTE_PARAMS = 'updateBridgeQuoteRequestParams',\n}\nexport enum BridgeBackgroundAction {\n  SET_CHAIN_INTERVAL_LENGTH = 'setChainIntervalLength',\n  RESET_STATE = 'resetState',\n  GET_BRIDGE_ERC20_ALLOWANCE = 'getBridgeERC20Allowance',\n  TRACK_METAMETRICS_EVENT = 'trackUnifiedSwapBridgeEvent',\n  STOP_POLLING_FOR_QUOTES = 'stopPollingForQuotes',\n  FETCH_QUOTES = 'fetchQuotes',\n}\n\nexport type BridgeControllerState = {\n  quoteRequest: Partial<GenericQuoteRequest>;\n  quotes: (QuoteResponse & L1GasFees & SolanaFees)[];\n  quotesInitialLoadTime: number | null;\n  quotesLastFetched: number | null;\n  quotesLoadingStatus: RequestStatus | null;\n  quoteFetchError: string | null;\n  quotesRefreshCount: number;\n  /**\n   * Asset exchange rates for EVM and multichain assets that are not indexed by the assets controllers\n   */\n  assetExchangeRates: Record<CaipAssetType, ExchangeRate>;\n  /**\n   * When the src token is SOL, this needs to be subtracted from their balance to determine\n   * the max amount that can be sent.\n   */\n  minimumBalanceForRentExemptionInLamports: string | null;\n};\n\nexport type BridgeControllerAction<\n  FunctionName extends keyof BridgeController,\n> = {\n  type: `${typeof BRIDGE_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeController[FunctionName];\n};\n\n// Maps to BridgeController function names\nexport type BridgeControllerActions =\n  | BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH>\n  | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE>\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | BridgeControllerAction<BridgeBackgroundAction.FETCH_QUOTES>\n  | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;\n\nexport type BridgeControllerEvents = ControllerStateChangeEvent<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState\n>;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | GetCurrencyRateState\n  | TokenRatesControllerGetStateAction\n  | MultichainAssetsRatesControllerGetStateAction\n  | HandleSnapRequest\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | RemoteFeatureFlagControllerGetStateAction;\nexport type AllowedEvents = never;\n\n/**\n * The messenger for the BridgeController.\n */\nexport type BridgeControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerActions | AllowedActions,\n  BridgeControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
+{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAwDA;;GAEG;AACH,IAAY,SAYX;AAZD,WAAY,SAAS;IACnB,4DAA4D;IAC5D,8BAAiB,CAAA;IACjB,qBAAqB;IACrB,4BAAe,CAAA;IACf,kCAAkC;IAClC,wBAAW,CAAA;IACX;;;OAGG;IACH,gCAAmB,CAAA;AACrB,CAAC,EAZW,SAAS,yBAAT,SAAS,QAYpB;AA6ED;;GAEG;AACH,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,wCAA2B,CAAA;IAC3B,wCAA2B,CAAA;AAC7B,CAAC,EAHW,SAAS,yBAAT,SAAS,QAGpB;AAgED,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,kCAAmB,CAAA;IACnB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,oCAAqB,CAAA;AACvB,CAAC,EALW,WAAW,2BAAX,WAAW,QAKtB;AAmCD,IAAY,OAWX;AAXD,WAAY,OAAO;IACjB,mCAAO,CAAA;IACP,8CAAa,CAAA;IACb,oCAAQ,CAAA;IACR,6CAAa,CAAA;IACb,2CAAY,CAAA;IACZ,wCAAW,CAAA;IACX,iDAAgB,CAAA;IAChB,mDAAiB,CAAA;IACjB,2CAAa,CAAA;IACb,wDAAyB,CAAA;AAC3B,CAAC,EAXW,OAAO,uBAAP,OAAO,QAWlB;AAID,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,uDAAO,CAAA;IACP,uDAAO,CAAA;IACP,mDAAK,CAAA;AACP,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB;AACD,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IAC1B,6DAAyC,CAAA;IACzC,0EAAsD,CAAA;AACxD,CAAC,EAHW,gBAAgB,gCAAhB,gBAAgB,QAG3B;AACD,IAAY,sBAMX;AAND,WAAY,sBAAsB;IAChC,8EAAoD,CAAA;IACpD,oDAA0B,CAAA;IAC1B,gFAAsD,CAAA;IACtD,iFAAuD,CAAA;IACvD,0EAAgD,CAAA;AAClD,CAAC,EANW,sBAAsB,sCAAtB,sBAAsB,QAMjC","sourcesContent":["import type { AccountsControllerGetSelectedMultichainAccountAction } from '@metamask/accounts-controller';\nimport type {\n  GetCurrencyRateState,\n  MultichainAssetsRatesControllerGetStateAction,\n  TokenRatesControllerGetStateAction,\n} from '@metamask/assets-controllers';\nimport type {\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  CaipAccountId,\n  CaipAssetId,\n  CaipAssetType,\n  CaipChainId,\n  Hex,\n} from '@metamask/utils';\n\nimport type { BridgeController } from './bridge-controller';\nimport type { BRIDGE_CONTROLLER_NAME } from './constants/bridge';\nimport type {\n  BridgeAssetSchema,\n  ChainConfigurationSchema,\n  FeeDataSchema,\n  PlatformConfigSchema,\n  ProtocolSchema,\n  QuoteResponseSchema,\n  QuoteSchema,\n  StepSchema,\n  TxDataSchema,\n} from './utils/validators';\n\n/**\n * Additional options accepted by the extension's fetchWithCache function\n */\ntype FetchWithCacheOptions = {\n  cacheOptions?: {\n    cacheRefreshTime: number;\n  };\n  functionName?: string;\n};\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit & FetchWithCacheOptions,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * The types of assets that a user can send\n */\nexport enum AssetType {\n  /** The native asset for the current network, such as ETH */\n  native = 'NATIVE',\n  /** An ERC20 token */\n  token = 'TOKEN',\n  /** An ERC721 or ERC1155 token. */\n  NFT = 'NFT',\n  /**\n   * A transaction interacting with a contract that isn't a token method\n   * interaction will be marked as dealing with an unknown asset type.\n   */\n  unknown = 'UNKNOWN',\n}\n\nexport type ChainConfiguration = Infer<typeof ChainConfigurationSchema>;\n\nexport type L1GasFees = {\n  l1GasFeesInHexWei?: string; // l1 fees for approval and trade in hex wei, appended by BridgeController.#appendL1GasFees\n};\n\nexport type SolanaFees = {\n  solanaFeesInLamports?: string; // solana fees in lamports, appended by BridgeController.#appendSolanaFees\n};\n\n/**\n * The types of values for the token amount and its values when converted to the user's selected currency and USD\n */\nexport type TokenAmountValues = {\n  /**\n   * The amount of the token\n   *\n   * @example \"1000000000000000000\"\n   */\n  amount: string;\n  /**\n   * The amount of the token in the user's selected currency\n   *\n   * @example \"4.55\"\n   */\n  valueInCurrency: string | null;\n  /**\n   * The amount of the token in USD\n   *\n   * @example \"1.234\"\n   */\n  usd: string | null;\n};\n\n/**\n * Asset exchange rate values for a given chain and address\n */\nexport type ExchangeRate = { exchangeRate?: string; usdExchangeRate?: string };\n\n/**\n * Values derived from the quote response\n */\nexport type QuoteMetadata = {\n  /**\n   * If gas is included, this is the value of the src or dest token that was used to pay for the gas\n   */\n  includedTxFees?: TokenAmountValues | null;\n  /**\n   * The gas fee for the bridge transaction.\n   * effective is the gas fee that is shown to the user. If this value is not\n   * included in the trade, the calculation falls back to the gasLimit (total)\n   * total is the gas fee that is spent by the user, including refunds.\n   * max is the max gas fee that will be used by the transaction.\n   */\n  gasFee: Record<'effective' | 'total' | 'max', TokenAmountValues>;\n  totalNetworkFee: TokenAmountValues; // estimatedGasFees + relayerFees\n  totalMaxNetworkFee: TokenAmountValues; // maxGasFees + relayerFees\n  /**\n   * The amount that the user will receive (destTokenAmount)\n   */\n  toTokenAmount: TokenAmountValues;\n  /**\n   * If gas is included: toTokenAmount\n   * Otherwise: toTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValues, 'amount'>;\n  /**\n   * The amount that the user will send, including fees\n   * srcTokenAmount + metabridgeFee + txFee\n   */\n  sentAmount: TokenAmountValues;\n  swapRate: string; // destTokenAmount / sentAmount\n  cost: Omit<TokenAmountValues, 'amount'>; // sentAmount - adjustedReturn\n};\n\n/**\n * Sort order set by the user\n */\nexport enum SortOrder {\n  COST_ASC = 'cost_ascending',\n  ETA_ASC = 'time_descending',\n}\n\n/**\n * This is the interface for the asset object returned by the bridge-api\n * This type is used in the QuoteResponse and in the fetchBridgeTokens response\n */\nexport type BridgeAsset = Infer<typeof BridgeAssetSchema>;\n\n/**\n * This is the interface for the token object used in the extension client\n * In addition to the {@link BridgeAsset} fields, it includes balance information\n */\nexport type BridgeToken = {\n  address: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  chainId: number | Hex | ChainId | CaipChainId;\n  balance: string; // raw balance\n  // TODO deprecate this field and use balance instead\n  string: string | undefined; // normalized balance as a stringified number\n  tokenFiatAmount?: number | null;\n  occurrences?: number;\n};\n\ntype DecimalChainId = string;\nexport type GasMultiplierByChainId = Record<DecimalChainId, number>;\n\nexport type FeatureFlagResponse = Infer<typeof PlatformConfigSchema>;\n\n/**\n * This is the interface for the quote request sent to the bridge-api\n * and should only be used by the fetchBridgeQuotes utility function\n * Components and redux stores should use the {@link GenericQuoteRequest} type\n */\nexport type QuoteRequest<\n  ChainIdType = ChainId | number,\n  TokenAddressType = string,\n  WalletAddressType = string,\n> = {\n  walletAddress: WalletAddressType;\n  destWalletAddress?: WalletAddressType;\n  srcChainId: ChainIdType;\n  destChainId: ChainIdType;\n  srcTokenAddress: TokenAddressType;\n  destTokenAddress: TokenAddressType;\n  /**\n   * This is the amount sent, in atomic amount\n   */\n  srcTokenAmount: string;\n  slippage?: number;\n  aggIds?: string[];\n  bridgeIds?: string[];\n  insufficientBal?: boolean;\n  resetApproval?: boolean;\n  refuel?: boolean;\n  /**\n   * Whether the response should include gasless swap quotes\n   * This should be true if the user has opted in to STX on the client\n   * and the current network has STX support\n   */\n  gasIncluded: boolean;\n};\n\nexport enum StatusTypes {\n  UNKNOWN = 'UNKNOWN',\n  FAILED = 'FAILED',\n  PENDING = 'PENDING',\n  COMPLETE = 'COMPLETE',\n}\n\n/**\n * These are types that components pass in. Since data is a mix of types when coming from the redux store, we need to use a generic type that can cover all the types.\n * Payloads with this type are transformed into QuoteRequest by fetchBridgeQuotes right before fetching quotes\n */\nexport type GenericQuoteRequest = QuoteRequest<\n  Hex | CaipChainId | string | number, // chainIds\n  Hex | CaipAssetId | string, // assetIds/addresses\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-arguments\n  Hex | CaipAccountId | string // accountIds/addresses\n>;\n\nexport type Protocol = Infer<typeof ProtocolSchema>;\n\nexport type Step = Infer<typeof StepSchema>;\n\nexport type RefuelData = Step;\n\nexport type FeeData = Infer<typeof FeeDataSchema>;\n\nexport type Quote = Infer<typeof QuoteSchema>;\n\nexport type TxData = Infer<typeof TxDataSchema>;\n/**\n * This is the type for the quote response from the bridge-api\n * TxDataType can be overriden to be a string when the quote is non-evm\n */\nexport type QuoteResponse<TxDataType = TxData> = Infer<\n  typeof QuoteResponseSchema\n> & {\n  trade: TxDataType;\n  approval?: TxData;\n};\n\nexport enum ChainId {\n  ETH = 1,\n  OPTIMISM = 10,\n  BSC = 56,\n  POLYGON = 137,\n  ZKSYNC = 324,\n  BASE = 8453,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  LINEA = 59144,\n  SOLANA = 1151111081099710,\n}\n\nexport type FeatureFlagsPlatformConfig = Infer<typeof PlatformConfigSchema>;\n\nexport enum RequestStatus {\n  LOADING,\n  FETCHED,\n  ERROR,\n}\nexport enum BridgeUserAction {\n  SELECT_DEST_NETWORK = 'selectDestNetwork',\n  UPDATE_QUOTE_PARAMS = 'updateBridgeQuoteRequestParams',\n}\nexport enum BridgeBackgroundAction {\n  SET_CHAIN_INTERVAL_LENGTH = 'setChainIntervalLength',\n  RESET_STATE = 'resetState',\n  GET_BRIDGE_ERC20_ALLOWANCE = 'getBridgeERC20Allowance',\n  TRACK_METAMETRICS_EVENT = 'trackUnifiedSwapBridgeEvent',\n  STOP_POLLING_FOR_QUOTES = 'stopPollingForQuotes',\n}\n\nexport type BridgeControllerState = {\n  quoteRequest: Partial<GenericQuoteRequest>;\n  quotes: (QuoteResponse & L1GasFees & SolanaFees)[];\n  quotesInitialLoadTime: number | null;\n  quotesLastFetched: number | null;\n  quotesLoadingStatus: RequestStatus | null;\n  quoteFetchError: string | null;\n  quotesRefreshCount: number;\n  /**\n   * Asset exchange rates for EVM and multichain assets that are not indexed by the assets controllers\n   */\n  assetExchangeRates: Record<CaipAssetType, ExchangeRate>;\n  /**\n   * When the src token is SOL, this needs to be subtracted from their balance to determine\n   * the max amount that can be sent.\n   */\n  minimumBalanceForRentExemptionInLamports: string | null;\n};\n\nexport type BridgeControllerAction<\n  FunctionName extends keyof BridgeController,\n> = {\n  type: `${typeof BRIDGE_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeController[FunctionName];\n};\n\n// Maps to BridgeController function names\nexport type BridgeControllerActions =\n  | BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH>\n  | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE>\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;\n\nexport type BridgeControllerEvents = ControllerStateChangeEvent<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState\n>;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | GetCurrencyRateState\n  | TokenRatesControllerGetStateAction\n  | MultichainAssetsRatesControllerGetStateAction\n  | HandleSnapRequest\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | RemoteFeatureFlagControllerGetStateAction;\nexport type AllowedEvents = never;\n\n/**\n * The messenger for the BridgeController.\n */\nexport type BridgeControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerActions | AllowedActions,\n  BridgeControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
diff --git a/dist/types.d.cts b/dist/types.d.cts
index ede2d42cc853107c815b16120ad0c0208c3abce9..75d81bf8404f6ade1df98d9dfc79c6fe4ff90603 100644
--- a/dist/types.d.cts
+++ b/dist/types.d.cts
@@ -80,7 +80,14 @@ export type QuoteMetadata = {
      * If gas is included, this is the value of the src or dest token that was used to pay for the gas
      */
     includedTxFees?: TokenAmountValues | null;
-    gasFee: TokenAmountValues;
+    /**
+     * The gas fee for the bridge transaction.
+     * effective is the gas fee that is shown to the user. If this value is not
+     * included in the trade, the calculation falls back to the gasLimit (total)
+     * total is the gas fee that is spent by the user, including refunds.
+     * max is the max gas fee that will be used by the transaction.
+     */
+    gasFee: Record<'effective' | 'total' | 'max', TokenAmountValues>;
     totalNetworkFee: TokenAmountValues;
     totalMaxNetworkFee: TokenAmountValues;
     /**
@@ -158,7 +165,6 @@ export type QuoteRequest<ChainIdType = ChainId | number, TokenAddressType = stri
      * and the current network has STX support
      */
     gasIncluded: boolean;
-    noFee?: boolean;
 };
 export declare enum StatusTypes {
     UNKNOWN = "UNKNOWN",
@@ -216,8 +222,7 @@ export declare enum BridgeBackgroundAction {
     RESET_STATE = "resetState",
     GET_BRIDGE_ERC20_ALLOWANCE = "getBridgeERC20Allowance",
     TRACK_METAMETRICS_EVENT = "trackUnifiedSwapBridgeEvent",
-    STOP_POLLING_FOR_QUOTES = "stopPollingForQuotes",
-    FETCH_QUOTES = "fetchQuotes"
+    STOP_POLLING_FOR_QUOTES = "stopPollingForQuotes"
 }
 export type BridgeControllerState = {
     quoteRequest: Partial<GenericQuoteRequest>;
@@ -241,7 +246,7 @@ export type BridgeControllerAction<FunctionName extends keyof BridgeController>
     type: `${typeof BRIDGE_CONTROLLER_NAME}:${FunctionName}`;
     handler: BridgeController[FunctionName];
 };
-export type BridgeControllerActions = BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH> | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE> | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE> | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT> | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES> | BridgeControllerAction<BridgeBackgroundAction.FETCH_QUOTES> | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;
+export type BridgeControllerActions = BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH> | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE> | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE> | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT> | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES> | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;
 export type BridgeControllerEvents = ControllerStateChangeEvent<typeof BRIDGE_CONTROLLER_NAME, BridgeControllerState>;
 export type AllowedActions = AccountsControllerGetSelectedMultichainAccountAction | GetCurrencyRateState | TokenRatesControllerGetStateAction | MultichainAssetsRatesControllerGetStateAction | HandleSnapRequest | NetworkControllerFindNetworkClientIdByChainIdAction | NetworkControllerGetStateAction | NetworkControllerGetNetworkClientByIdAction | RemoteFeatureFlagControllerGetStateAction;
 export type AllowedEvents = never;
diff --git a/dist/types.d.cts.map b/dist/types.d.cts.map
index 30b74f7f2aba3dca6ea6d6eaad9f182bac2db2da..7ba95c48bc19b7c0c9ef305ccfffa32a8cf174f7 100644
--- a/dist/types.d.cts.map
+++ b/dist/types.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.d.mts b/dist/types.d.mts
index 2944586627dfad89c77ffca8874ce00b0d1b639c..f0dcfec69f55168c598468eca7f8e701259ebb0f 100644
--- a/dist/types.d.mts
+++ b/dist/types.d.mts
@@ -80,7 +80,14 @@ export type QuoteMetadata = {
      * If gas is included, this is the value of the src or dest token that was used to pay for the gas
      */
     includedTxFees?: TokenAmountValues | null;
-    gasFee: TokenAmountValues;
+    /**
+     * The gas fee for the bridge transaction.
+     * effective is the gas fee that is shown to the user. If this value is not
+     * included in the trade, the calculation falls back to the gasLimit (total)
+     * total is the gas fee that is spent by the user, including refunds.
+     * max is the max gas fee that will be used by the transaction.
+     */
+    gasFee: Record<'effective' | 'total' | 'max', TokenAmountValues>;
     totalNetworkFee: TokenAmountValues;
     totalMaxNetworkFee: TokenAmountValues;
     /**
@@ -158,7 +165,6 @@ export type QuoteRequest<ChainIdType = ChainId | number, TokenAddressType = stri
      * and the current network has STX support
      */
     gasIncluded: boolean;
-    noFee?: boolean;
 };
 export declare enum StatusTypes {
     UNKNOWN = "UNKNOWN",
@@ -216,8 +222,7 @@ export declare enum BridgeBackgroundAction {
     RESET_STATE = "resetState",
     GET_BRIDGE_ERC20_ALLOWANCE = "getBridgeERC20Allowance",
     TRACK_METAMETRICS_EVENT = "trackUnifiedSwapBridgeEvent",
-    STOP_POLLING_FOR_QUOTES = "stopPollingForQuotes",
-    FETCH_QUOTES = "fetchQuotes"
+    STOP_POLLING_FOR_QUOTES = "stopPollingForQuotes"
 }
 export type BridgeControllerState = {
     quoteRequest: Partial<GenericQuoteRequest>;
@@ -241,7 +246,7 @@ export type BridgeControllerAction<FunctionName extends keyof BridgeController>
     type: `${typeof BRIDGE_CONTROLLER_NAME}:${FunctionName}`;
     handler: BridgeController[FunctionName];
 };
-export type BridgeControllerActions = BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH> | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE> | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE> | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT> | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES> | BridgeControllerAction<BridgeBackgroundAction.FETCH_QUOTES> | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;
+export type BridgeControllerActions = BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH> | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE> | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE> | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT> | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES> | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;
 export type BridgeControllerEvents = ControllerStateChangeEvent<typeof BRIDGE_CONTROLLER_NAME, BridgeControllerState>;
 export type AllowedActions = AccountsControllerGetSelectedMultichainAccountAction | GetCurrencyRateState | TokenRatesControllerGetStateAction | MultichainAssetsRatesControllerGetStateAction | HandleSnapRequest | NetworkControllerFindNetworkClientIdByChainIdAction | NetworkControllerGetStateAction | NetworkControllerGetNetworkClientByIdAction | RemoteFeatureFlagControllerGetStateAction;
 export type AllowedEvents = never;
diff --git a/dist/types.d.mts.map b/dist/types.d.mts.map
index 5cd3a4dde362530ea632d659ef0ebff815c01a30..3e766d550f29736b690775c9dd274bc6a0137ff3 100644
--- a/dist/types.d.mts.map
+++ b/dist/types.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.mjs b/dist/types.mjs
index 186d6ec55c8e15f1d13df2ac75f88b9ddb73c4a4..d1726e09029692e4eb299f061a81a93b86116793 100644
--- a/dist/types.mjs
+++ b/dist/types.mjs
@@ -61,6 +61,5 @@ export var BridgeBackgroundAction;
     BridgeBackgroundAction["GET_BRIDGE_ERC20_ALLOWANCE"] = "getBridgeERC20Allowance";
     BridgeBackgroundAction["TRACK_METAMETRICS_EVENT"] = "trackUnifiedSwapBridgeEvent";
     BridgeBackgroundAction["STOP_POLLING_FOR_QUOTES"] = "stopPollingForQuotes";
-    BridgeBackgroundAction["FETCH_QUOTES"] = "fetchQuotes";
 })(BridgeBackgroundAction || (BridgeBackgroundAction = {}));
 //# sourceMappingURL=types.mjs.map
\ No newline at end of file
diff --git a/dist/types.mjs.map b/dist/types.mjs.map
index 56b3cd3ae4160823d43947d1103532d619119fbb..20e893cde7bdd2908e7194ba4530556a4abb5fe1 100644
--- a/dist/types.mjs.map
+++ b/dist/types.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAwDA;;GAEG;AACH,MAAM,CAAN,IAAY,SAYX;AAZD,WAAY,SAAS;IACnB,4DAA4D;IAC5D,8BAAiB,CAAA;IACjB,qBAAqB;IACrB,4BAAe,CAAA;IACf,kCAAkC;IAClC,wBAAW,CAAA;IACX;;;OAGG;IACH,gCAAmB,CAAA;AACrB,CAAC,EAZW,SAAS,KAAT,SAAS,QAYpB;AAsED;;GAEG;AACH,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,wCAA2B,CAAA;IAC3B,wCAA2B,CAAA;AAC7B,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAkED,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,kCAAmB,CAAA;IACnB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,oCAAqB,CAAA;AACvB,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAmCD,MAAM,CAAN,IAAY,OAWX;AAXD,WAAY,OAAO;IACjB,mCAAO,CAAA;IACP,8CAAa,CAAA;IACb,oCAAQ,CAAA;IACR,6CAAa,CAAA;IACb,2CAAY,CAAA;IACZ,wCAAW,CAAA;IACX,iDAAgB,CAAA;IAChB,mDAAiB,CAAA;IACjB,2CAAa,CAAA;IACb,wDAAyB,CAAA;AAC3B,CAAC,EAXW,OAAO,KAAP,OAAO,QAWlB;AAID,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,uDAAO,CAAA;IACP,uDAAO,CAAA;IACP,mDAAK,CAAA;AACP,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AACD,MAAM,CAAN,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IAC1B,6DAAyC,CAAA;IACzC,0EAAsD,CAAA;AACxD,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB,QAG3B;AACD,MAAM,CAAN,IAAY,sBAOX;AAPD,WAAY,sBAAsB;IAChC,8EAAoD,CAAA;IACpD,oDAA0B,CAAA;IAC1B,gFAAsD,CAAA;IACtD,iFAAuD,CAAA;IACvD,0EAAgD,CAAA;IAChD,sDAA4B,CAAA;AAC9B,CAAC,EAPW,sBAAsB,KAAtB,sBAAsB,QAOjC","sourcesContent":["import type { AccountsControllerGetSelectedMultichainAccountAction } from '@metamask/accounts-controller';\nimport type {\n  GetCurrencyRateState,\n  MultichainAssetsRatesControllerGetStateAction,\n  TokenRatesControllerGetStateAction,\n} from '@metamask/assets-controllers';\nimport type {\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  CaipAccountId,\n  CaipAssetId,\n  CaipAssetType,\n  CaipChainId,\n  Hex,\n} from '@metamask/utils';\n\nimport type { BridgeController } from './bridge-controller';\nimport type { BRIDGE_CONTROLLER_NAME } from './constants/bridge';\nimport type {\n  BridgeAssetSchema,\n  ChainConfigurationSchema,\n  FeeDataSchema,\n  PlatformConfigSchema,\n  ProtocolSchema,\n  QuoteResponseSchema,\n  QuoteSchema,\n  StepSchema,\n  TxDataSchema,\n} from './utils/validators';\n\n/**\n * Additional options accepted by the extension's fetchWithCache function\n */\ntype FetchWithCacheOptions = {\n  cacheOptions?: {\n    cacheRefreshTime: number;\n  };\n  functionName?: string;\n};\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit & FetchWithCacheOptions,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * The types of assets that a user can send\n */\nexport enum AssetType {\n  /** The native asset for the current network, such as ETH */\n  native = 'NATIVE',\n  /** An ERC20 token */\n  token = 'TOKEN',\n  /** An ERC721 or ERC1155 token. */\n  NFT = 'NFT',\n  /**\n   * A transaction interacting with a contract that isn't a token method\n   * interaction will be marked as dealing with an unknown asset type.\n   */\n  unknown = 'UNKNOWN',\n}\n\nexport type ChainConfiguration = Infer<typeof ChainConfigurationSchema>;\n\nexport type L1GasFees = {\n  l1GasFeesInHexWei?: string; // l1 fees for approval and trade in hex wei, appended by BridgeController.#appendL1GasFees\n};\n\nexport type SolanaFees = {\n  solanaFeesInLamports?: string; // solana fees in lamports, appended by BridgeController.#appendSolanaFees\n};\n\n/**\n * The types of values for the token amount and its values when converted to the user's selected currency and USD\n */\nexport type TokenAmountValues = {\n  /**\n   * The amount of the token\n   *\n   * @example \"1000000000000000000\"\n   */\n  amount: string;\n  /**\n   * The amount of the token in the user's selected currency\n   *\n   * @example \"4.55\"\n   */\n  valueInCurrency: string | null;\n  /**\n   * The amount of the token in USD\n   *\n   * @example \"1.234\"\n   */\n  usd: string | null;\n};\n\n/**\n * Asset exchange rate values for a given chain and address\n */\nexport type ExchangeRate = { exchangeRate?: string; usdExchangeRate?: string };\n\n/**\n * Values derived from the quote response\n */\nexport type QuoteMetadata = {\n  /**\n   * If gas is included, this is the value of the src or dest token that was used to pay for the gas\n   */\n  includedTxFees?: TokenAmountValues | null;\n  gasFee: TokenAmountValues;\n  totalNetworkFee: TokenAmountValues; // estimatedGasFees + relayerFees\n  totalMaxNetworkFee: TokenAmountValues; // maxGasFees + relayerFees\n  /**\n   * The amount that the user will receive (destTokenAmount)\n   */\n  toTokenAmount: TokenAmountValues;\n  /**\n   * If gas is included: toTokenAmount\n   * Otherwise: toTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValues, 'amount'>;\n  /**\n   * The amount that the user will send, including fees\n   * srcTokenAmount + metabridgeFee + txFee\n   */\n  sentAmount: TokenAmountValues;\n  swapRate: string; // destTokenAmount / sentAmount\n  cost: Omit<TokenAmountValues, 'amount'>; // sentAmount - adjustedReturn\n};\n\n/**\n * Sort order set by the user\n */\nexport enum SortOrder {\n  COST_ASC = 'cost_ascending',\n  ETA_ASC = 'time_descending',\n}\n\n/**\n * This is the interface for the asset object returned by the bridge-api\n * This type is used in the QuoteResponse and in the fetchBridgeTokens response\n */\nexport type BridgeAsset = Infer<typeof BridgeAssetSchema>;\n\n/**\n * This is the interface for the token object used in the extension client\n * In addition to the {@link BridgeAsset} fields, it includes balance information\n */\nexport type BridgeToken = {\n  address: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  chainId: number | Hex | ChainId | CaipChainId;\n  balance: string; // raw balance\n  // TODO deprecate this field and use balance instead\n  string: string | undefined; // normalized balance as a stringified number\n  tokenFiatAmount?: number | null;\n  occurrences?: number;\n};\n\ntype DecimalChainId = string;\nexport type GasMultiplierByChainId = Record<DecimalChainId, number>;\n\nexport type FeatureFlagResponse = Infer<typeof PlatformConfigSchema>;\n\n// TODO move definition to validators.ts\n/**\n * This is the interface for the quote request sent to the bridge-api\n * and should only be used by the fetchBridgeQuotes utility function\n * Components and redux stores should use the {@link GenericQuoteRequest} type\n */\nexport type QuoteRequest<\n  ChainIdType = ChainId | number,\n  TokenAddressType = string,\n  WalletAddressType = string,\n> = {\n  walletAddress: WalletAddressType;\n  destWalletAddress?: WalletAddressType;\n  srcChainId: ChainIdType;\n  destChainId: ChainIdType;\n  srcTokenAddress: TokenAddressType;\n  destTokenAddress: TokenAddressType;\n  /**\n   * This is the amount sent, in atomic amount\n   */\n  srcTokenAmount: string;\n  slippage?: number;\n  aggIds?: string[];\n  bridgeIds?: string[];\n  insufficientBal?: boolean;\n  resetApproval?: boolean;\n  refuel?: boolean;\n  /**\n   * Whether the response should include gasless swap quotes\n   * This should be true if the user has opted in to STX on the client\n   * and the current network has STX support\n   */\n  gasIncluded: boolean;\n  noFee?: boolean;\n};\n\nexport enum StatusTypes {\n  UNKNOWN = 'UNKNOWN',\n  FAILED = 'FAILED',\n  PENDING = 'PENDING',\n  COMPLETE = 'COMPLETE',\n}\n\n/**\n * These are types that components pass in. Since data is a mix of types when coming from the redux store, we need to use a generic type that can cover all the types.\n * Payloads with this type are transformed into QuoteRequest by fetchBridgeQuotes right before fetching quotes\n */\nexport type GenericQuoteRequest = QuoteRequest<\n  Hex | CaipChainId | string | number, // chainIds\n  Hex | CaipAssetId | string, // assetIds/addresses\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-arguments\n  Hex | CaipAccountId | string // accountIds/addresses\n>;\n\nexport type Protocol = Infer<typeof ProtocolSchema>;\n\nexport type Step = Infer<typeof StepSchema>;\n\nexport type RefuelData = Step;\n\nexport type FeeData = Infer<typeof FeeDataSchema>;\n\nexport type Quote = Infer<typeof QuoteSchema>;\n\nexport type TxData = Infer<typeof TxDataSchema>;\n/**\n * This is the type for the quote response from the bridge-api\n * TxDataType can be overriden to be a string when the quote is non-evm\n */\nexport type QuoteResponse<TxDataType = TxData> = Infer<\n  typeof QuoteResponseSchema\n> & {\n  trade: TxDataType;\n  approval?: TxData;\n};\n\nexport enum ChainId {\n  ETH = 1,\n  OPTIMISM = 10,\n  BSC = 56,\n  POLYGON = 137,\n  ZKSYNC = 324,\n  BASE = 8453,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  LINEA = 59144,\n  SOLANA = 1151111081099710,\n}\n\nexport type FeatureFlagsPlatformConfig = Infer<typeof PlatformConfigSchema>;\n\nexport enum RequestStatus {\n  LOADING,\n  FETCHED,\n  ERROR,\n}\nexport enum BridgeUserAction {\n  SELECT_DEST_NETWORK = 'selectDestNetwork',\n  UPDATE_QUOTE_PARAMS = 'updateBridgeQuoteRequestParams',\n}\nexport enum BridgeBackgroundAction {\n  SET_CHAIN_INTERVAL_LENGTH = 'setChainIntervalLength',\n  RESET_STATE = 'resetState',\n  GET_BRIDGE_ERC20_ALLOWANCE = 'getBridgeERC20Allowance',\n  TRACK_METAMETRICS_EVENT = 'trackUnifiedSwapBridgeEvent',\n  STOP_POLLING_FOR_QUOTES = 'stopPollingForQuotes',\n  FETCH_QUOTES = 'fetchQuotes',\n}\n\nexport type BridgeControllerState = {\n  quoteRequest: Partial<GenericQuoteRequest>;\n  quotes: (QuoteResponse & L1GasFees & SolanaFees)[];\n  quotesInitialLoadTime: number | null;\n  quotesLastFetched: number | null;\n  quotesLoadingStatus: RequestStatus | null;\n  quoteFetchError: string | null;\n  quotesRefreshCount: number;\n  /**\n   * Asset exchange rates for EVM and multichain assets that are not indexed by the assets controllers\n   */\n  assetExchangeRates: Record<CaipAssetType, ExchangeRate>;\n  /**\n   * When the src token is SOL, this needs to be subtracted from their balance to determine\n   * the max amount that can be sent.\n   */\n  minimumBalanceForRentExemptionInLamports: string | null;\n};\n\nexport type BridgeControllerAction<\n  FunctionName extends keyof BridgeController,\n> = {\n  type: `${typeof BRIDGE_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeController[FunctionName];\n};\n\n// Maps to BridgeController function names\nexport type BridgeControllerActions =\n  | BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH>\n  | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE>\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | BridgeControllerAction<BridgeBackgroundAction.FETCH_QUOTES>\n  | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;\n\nexport type BridgeControllerEvents = ControllerStateChangeEvent<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState\n>;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | GetCurrencyRateState\n  | TokenRatesControllerGetStateAction\n  | MultichainAssetsRatesControllerGetStateAction\n  | HandleSnapRequest\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | RemoteFeatureFlagControllerGetStateAction;\nexport type AllowedEvents = never;\n\n/**\n * The messenger for the BridgeController.\n */\nexport type BridgeControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerActions | AllowedActions,\n  BridgeControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
+{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAwDA;;GAEG;AACH,MAAM,CAAN,IAAY,SAYX;AAZD,WAAY,SAAS;IACnB,4DAA4D;IAC5D,8BAAiB,CAAA;IACjB,qBAAqB;IACrB,4BAAe,CAAA;IACf,kCAAkC;IAClC,wBAAW,CAAA;IACX;;;OAGG;IACH,gCAAmB,CAAA;AACrB,CAAC,EAZW,SAAS,KAAT,SAAS,QAYpB;AA6ED;;GAEG;AACH,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,wCAA2B,CAAA;IAC3B,wCAA2B,CAAA;AAC7B,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAgED,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,kCAAmB,CAAA;IACnB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,oCAAqB,CAAA;AACvB,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAmCD,MAAM,CAAN,IAAY,OAWX;AAXD,WAAY,OAAO;IACjB,mCAAO,CAAA;IACP,8CAAa,CAAA;IACb,oCAAQ,CAAA;IACR,6CAAa,CAAA;IACb,2CAAY,CAAA;IACZ,wCAAW,CAAA;IACX,iDAAgB,CAAA;IAChB,mDAAiB,CAAA;IACjB,2CAAa,CAAA;IACb,wDAAyB,CAAA;AAC3B,CAAC,EAXW,OAAO,KAAP,OAAO,QAWlB;AAID,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,uDAAO,CAAA;IACP,uDAAO,CAAA;IACP,mDAAK,CAAA;AACP,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AACD,MAAM,CAAN,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IAC1B,6DAAyC,CAAA;IACzC,0EAAsD,CAAA;AACxD,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB,QAG3B;AACD,MAAM,CAAN,IAAY,sBAMX;AAND,WAAY,sBAAsB;IAChC,8EAAoD,CAAA;IACpD,oDAA0B,CAAA;IAC1B,gFAAsD,CAAA;IACtD,iFAAuD,CAAA;IACvD,0EAAgD,CAAA;AAClD,CAAC,EANW,sBAAsB,KAAtB,sBAAsB,QAMjC","sourcesContent":["import type { AccountsControllerGetSelectedMultichainAccountAction } from '@metamask/accounts-controller';\nimport type {\n  GetCurrencyRateState,\n  MultichainAssetsRatesControllerGetStateAction,\n  TokenRatesControllerGetStateAction,\n} from '@metamask/assets-controllers';\nimport type {\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  CaipAccountId,\n  CaipAssetId,\n  CaipAssetType,\n  CaipChainId,\n  Hex,\n} from '@metamask/utils';\n\nimport type { BridgeController } from './bridge-controller';\nimport type { BRIDGE_CONTROLLER_NAME } from './constants/bridge';\nimport type {\n  BridgeAssetSchema,\n  ChainConfigurationSchema,\n  FeeDataSchema,\n  PlatformConfigSchema,\n  ProtocolSchema,\n  QuoteResponseSchema,\n  QuoteSchema,\n  StepSchema,\n  TxDataSchema,\n} from './utils/validators';\n\n/**\n * Additional options accepted by the extension's fetchWithCache function\n */\ntype FetchWithCacheOptions = {\n  cacheOptions?: {\n    cacheRefreshTime: number;\n  };\n  functionName?: string;\n};\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit & FetchWithCacheOptions,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * The types of assets that a user can send\n */\nexport enum AssetType {\n  /** The native asset for the current network, such as ETH */\n  native = 'NATIVE',\n  /** An ERC20 token */\n  token = 'TOKEN',\n  /** An ERC721 or ERC1155 token. */\n  NFT = 'NFT',\n  /**\n   * A transaction interacting with a contract that isn't a token method\n   * interaction will be marked as dealing with an unknown asset type.\n   */\n  unknown = 'UNKNOWN',\n}\n\nexport type ChainConfiguration = Infer<typeof ChainConfigurationSchema>;\n\nexport type L1GasFees = {\n  l1GasFeesInHexWei?: string; // l1 fees for approval and trade in hex wei, appended by BridgeController.#appendL1GasFees\n};\n\nexport type SolanaFees = {\n  solanaFeesInLamports?: string; // solana fees in lamports, appended by BridgeController.#appendSolanaFees\n};\n\n/**\n * The types of values for the token amount and its values when converted to the user's selected currency and USD\n */\nexport type TokenAmountValues = {\n  /**\n   * The amount of the token\n   *\n   * @example \"1000000000000000000\"\n   */\n  amount: string;\n  /**\n   * The amount of the token in the user's selected currency\n   *\n   * @example \"4.55\"\n   */\n  valueInCurrency: string | null;\n  /**\n   * The amount of the token in USD\n   *\n   * @example \"1.234\"\n   */\n  usd: string | null;\n};\n\n/**\n * Asset exchange rate values for a given chain and address\n */\nexport type ExchangeRate = { exchangeRate?: string; usdExchangeRate?: string };\n\n/**\n * Values derived from the quote response\n */\nexport type QuoteMetadata = {\n  /**\n   * If gas is included, this is the value of the src or dest token that was used to pay for the gas\n   */\n  includedTxFees?: TokenAmountValues | null;\n  /**\n   * The gas fee for the bridge transaction.\n   * effective is the gas fee that is shown to the user. If this value is not\n   * included in the trade, the calculation falls back to the gasLimit (total)\n   * total is the gas fee that is spent by the user, including refunds.\n   * max is the max gas fee that will be used by the transaction.\n   */\n  gasFee: Record<'effective' | 'total' | 'max', TokenAmountValues>;\n  totalNetworkFee: TokenAmountValues; // estimatedGasFees + relayerFees\n  totalMaxNetworkFee: TokenAmountValues; // maxGasFees + relayerFees\n  /**\n   * The amount that the user will receive (destTokenAmount)\n   */\n  toTokenAmount: TokenAmountValues;\n  /**\n   * If gas is included: toTokenAmount\n   * Otherwise: toTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValues, 'amount'>;\n  /**\n   * The amount that the user will send, including fees\n   * srcTokenAmount + metabridgeFee + txFee\n   */\n  sentAmount: TokenAmountValues;\n  swapRate: string; // destTokenAmount / sentAmount\n  cost: Omit<TokenAmountValues, 'amount'>; // sentAmount - adjustedReturn\n};\n\n/**\n * Sort order set by the user\n */\nexport enum SortOrder {\n  COST_ASC = 'cost_ascending',\n  ETA_ASC = 'time_descending',\n}\n\n/**\n * This is the interface for the asset object returned by the bridge-api\n * This type is used in the QuoteResponse and in the fetchBridgeTokens response\n */\nexport type BridgeAsset = Infer<typeof BridgeAssetSchema>;\n\n/**\n * This is the interface for the token object used in the extension client\n * In addition to the {@link BridgeAsset} fields, it includes balance information\n */\nexport type BridgeToken = {\n  address: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  chainId: number | Hex | ChainId | CaipChainId;\n  balance: string; // raw balance\n  // TODO deprecate this field and use balance instead\n  string: string | undefined; // normalized balance as a stringified number\n  tokenFiatAmount?: number | null;\n  occurrences?: number;\n};\n\ntype DecimalChainId = string;\nexport type GasMultiplierByChainId = Record<DecimalChainId, number>;\n\nexport type FeatureFlagResponse = Infer<typeof PlatformConfigSchema>;\n\n/**\n * This is the interface for the quote request sent to the bridge-api\n * and should only be used by the fetchBridgeQuotes utility function\n * Components and redux stores should use the {@link GenericQuoteRequest} type\n */\nexport type QuoteRequest<\n  ChainIdType = ChainId | number,\n  TokenAddressType = string,\n  WalletAddressType = string,\n> = {\n  walletAddress: WalletAddressType;\n  destWalletAddress?: WalletAddressType;\n  srcChainId: ChainIdType;\n  destChainId: ChainIdType;\n  srcTokenAddress: TokenAddressType;\n  destTokenAddress: TokenAddressType;\n  /**\n   * This is the amount sent, in atomic amount\n   */\n  srcTokenAmount: string;\n  slippage?: number;\n  aggIds?: string[];\n  bridgeIds?: string[];\n  insufficientBal?: boolean;\n  resetApproval?: boolean;\n  refuel?: boolean;\n  /**\n   * Whether the response should include gasless swap quotes\n   * This should be true if the user has opted in to STX on the client\n   * and the current network has STX support\n   */\n  gasIncluded: boolean;\n};\n\nexport enum StatusTypes {\n  UNKNOWN = 'UNKNOWN',\n  FAILED = 'FAILED',\n  PENDING = 'PENDING',\n  COMPLETE = 'COMPLETE',\n}\n\n/**\n * These are types that components pass in. Since data is a mix of types when coming from the redux store, we need to use a generic type that can cover all the types.\n * Payloads with this type are transformed into QuoteRequest by fetchBridgeQuotes right before fetching quotes\n */\nexport type GenericQuoteRequest = QuoteRequest<\n  Hex | CaipChainId | string | number, // chainIds\n  Hex | CaipAssetId | string, // assetIds/addresses\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-arguments\n  Hex | CaipAccountId | string // accountIds/addresses\n>;\n\nexport type Protocol = Infer<typeof ProtocolSchema>;\n\nexport type Step = Infer<typeof StepSchema>;\n\nexport type RefuelData = Step;\n\nexport type FeeData = Infer<typeof FeeDataSchema>;\n\nexport type Quote = Infer<typeof QuoteSchema>;\n\nexport type TxData = Infer<typeof TxDataSchema>;\n/**\n * This is the type for the quote response from the bridge-api\n * TxDataType can be overriden to be a string when the quote is non-evm\n */\nexport type QuoteResponse<TxDataType = TxData> = Infer<\n  typeof QuoteResponseSchema\n> & {\n  trade: TxDataType;\n  approval?: TxData;\n};\n\nexport enum ChainId {\n  ETH = 1,\n  OPTIMISM = 10,\n  BSC = 56,\n  POLYGON = 137,\n  ZKSYNC = 324,\n  BASE = 8453,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  LINEA = 59144,\n  SOLANA = 1151111081099710,\n}\n\nexport type FeatureFlagsPlatformConfig = Infer<typeof PlatformConfigSchema>;\n\nexport enum RequestStatus {\n  LOADING,\n  FETCHED,\n  ERROR,\n}\nexport enum BridgeUserAction {\n  SELECT_DEST_NETWORK = 'selectDestNetwork',\n  UPDATE_QUOTE_PARAMS = 'updateBridgeQuoteRequestParams',\n}\nexport enum BridgeBackgroundAction {\n  SET_CHAIN_INTERVAL_LENGTH = 'setChainIntervalLength',\n  RESET_STATE = 'resetState',\n  GET_BRIDGE_ERC20_ALLOWANCE = 'getBridgeERC20Allowance',\n  TRACK_METAMETRICS_EVENT = 'trackUnifiedSwapBridgeEvent',\n  STOP_POLLING_FOR_QUOTES = 'stopPollingForQuotes',\n}\n\nexport type BridgeControllerState = {\n  quoteRequest: Partial<GenericQuoteRequest>;\n  quotes: (QuoteResponse & L1GasFees & SolanaFees)[];\n  quotesInitialLoadTime: number | null;\n  quotesLastFetched: number | null;\n  quotesLoadingStatus: RequestStatus | null;\n  quoteFetchError: string | null;\n  quotesRefreshCount: number;\n  /**\n   * Asset exchange rates for EVM and multichain assets that are not indexed by the assets controllers\n   */\n  assetExchangeRates: Record<CaipAssetType, ExchangeRate>;\n  /**\n   * When the src token is SOL, this needs to be subtracted from their balance to determine\n   * the max amount that can be sent.\n   */\n  minimumBalanceForRentExemptionInLamports: string | null;\n};\n\nexport type BridgeControllerAction<\n  FunctionName extends keyof BridgeController,\n> = {\n  type: `${typeof BRIDGE_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeController[FunctionName];\n};\n\n// Maps to BridgeController function names\nexport type BridgeControllerActions =\n  | BridgeControllerAction<BridgeBackgroundAction.SET_CHAIN_INTERVAL_LENGTH>\n  | BridgeControllerAction<BridgeBackgroundAction.RESET_STATE>\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | BridgeControllerAction<BridgeUserAction.UPDATE_QUOTE_PARAMS>;\n\nexport type BridgeControllerEvents = ControllerStateChangeEvent<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerState\n>;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | GetCurrencyRateState\n  | TokenRatesControllerGetStateAction\n  | MultichainAssetsRatesControllerGetStateAction\n  | HandleSnapRequest\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | RemoteFeatureFlagControllerGetStateAction;\nexport type AllowedEvents = never;\n\n/**\n * The messenger for the BridgeController.\n */\nexport type BridgeControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_CONTROLLER_NAME,\n  BridgeControllerActions | AllowedActions,\n  BridgeControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
diff --git a/dist/utils/feature-flags.d.cts b/dist/utils/feature-flags.d.cts
index 18aacf79823bdb87c6edbe01467845f0f8a9d3a8..e7ddd033d0167a41b19a170b729cdff6a53ea06c 100644
--- a/dist/utils/feature-flags.d.cts
+++ b/dist/utils/feature-flags.d.cts
@@ -10,11 +10,6 @@ export declare const formatFeatureFlags: (bridgeFeatureFlags: FeatureFlagsPlatfo
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<import("./validators.cjs").FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 };
 export declare const processFeatureFlags: (bridgeFeatureFlags: unknown) => FeatureFlagsPlatformConfig;
 /**
diff --git a/dist/utils/feature-flags.d.cts.map b/dist/utils/feature-flags.d.cts.map
index af105f369282de92a06fe463ba6baf222b672dac..1c46140c6ef0c7e9f01725583030d9fecf182d5c 100644
--- a/dist/utils/feature-flags.d.cts.map
+++ b/dist/utils/feature-flags.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"feature-flags.d.cts","sourceRoot":"","sources":["../../src/utils/feature-flags.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gCAAgC,EAAE,iDAAiD;AAKjG,OAAO,KAAK,EAAE,0BAA0B,EAAsB,qBAAiB;AAE/E,eAAO,MAAM,kBAAkB,uBACT,0BAA0B;;;;;;;;;;;;;;;CAe/C,CAAC;AAEF,eAAO,MAAM,mBAAmB,uBACV,OAAO,KAC1B,0BAKF,CAAC;AAEF;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,CAAC,SAAS;IACR,IAAI,CACF,MAAM,EAAE,sCAAsC,GAC7C,gCAAgC,CAAC;CACrC,EACD,SAAS,EAAE,CAAC,GAAG,0BAA0B,CAmB1C"}
\ No newline at end of file
+{"version":3,"file":"feature-flags.d.cts","sourceRoot":"","sources":["../../src/utils/feature-flags.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gCAAgC,EAAE,iDAAiD;AAKjG,OAAO,KAAK,EAAE,0BAA0B,EAAsB,qBAAiB;AAE/E,eAAO,MAAM,kBAAkB,uBACT,0BAA0B;;;;;;;;;;CAe/C,CAAC;AAEF,eAAO,MAAM,mBAAmB,uBACV,OAAO,KAC1B,0BAKF,CAAC;AAEF;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,CAAC,SAAS;IACR,IAAI,CACF,MAAM,EAAE,sCAAsC,GAC7C,gCAAgC,CAAC;CACrC,EACD,SAAS,EAAE,CAAC,GAAG,0BAA0B,CAmB1C"}
\ No newline at end of file
diff --git a/dist/utils/feature-flags.d.mts b/dist/utils/feature-flags.d.mts
index 6093bd53c4ea23782ced0a3eebb7557af5f7a712..9e6beab4dd84556fbda614e8b6e0cb40c086367f 100644
--- a/dist/utils/feature-flags.d.mts
+++ b/dist/utils/feature-flags.d.mts
@@ -10,11 +10,6 @@ export declare const formatFeatureFlags: (bridgeFeatureFlags: FeatureFlagsPlatfo
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<import("./validators.mjs").FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 };
 export declare const processFeatureFlags: (bridgeFeatureFlags: unknown) => FeatureFlagsPlatformConfig;
 /**
diff --git a/dist/utils/feature-flags.d.mts.map b/dist/utils/feature-flags.d.mts.map
index bf8331cd197ec1210389599140a7172d62f76484..1d9a0289758aa97ff7e3a55b1da982b37840a52a 100644
--- a/dist/utils/feature-flags.d.mts.map
+++ b/dist/utils/feature-flags.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"feature-flags.d.mts","sourceRoot":"","sources":["../../src/utils/feature-flags.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gCAAgC,EAAE,iDAAiD;AAKjG,OAAO,KAAK,EAAE,0BAA0B,EAAsB,qBAAiB;AAE/E,eAAO,MAAM,kBAAkB,uBACT,0BAA0B;;;;;;;;;;;;;;;CAe/C,CAAC;AAEF,eAAO,MAAM,mBAAmB,uBACV,OAAO,KAC1B,0BAKF,CAAC;AAEF;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,CAAC,SAAS;IACR,IAAI,CACF,MAAM,EAAE,sCAAsC,GAC7C,gCAAgC,CAAC;CACrC,EACD,SAAS,EAAE,CAAC,GAAG,0BAA0B,CAmB1C"}
\ No newline at end of file
+{"version":3,"file":"feature-flags.d.mts","sourceRoot":"","sources":["../../src/utils/feature-flags.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gCAAgC,EAAE,iDAAiD;AAKjG,OAAO,KAAK,EAAE,0BAA0B,EAAsB,qBAAiB;AAE/E,eAAO,MAAM,kBAAkB,uBACT,0BAA0B;;;;;;;;;;CAe/C,CAAC;AAEF,eAAO,MAAM,mBAAmB,uBACV,OAAO,KAC1B,0BAKF,CAAC;AAEF;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,CAAC,SAAS;IACR,IAAI,CACF,MAAM,EAAE,sCAAsC,GAC7C,gCAAgC,CAAC;CACrC,EACD,SAAS,EAAE,CAAC,GAAG,0BAA0B,CAmB1C"}
\ No newline at end of file
diff --git a/dist/utils/fetch.cjs b/dist/utils/fetch.cjs
index cc25d2cfca8c361c98a4ddc86eabd2577bcfd4ef..64fb385188ff52f7b4bc5f71018783b5ee69b165 100644
--- a/dist/utils/fetch.cjs
+++ b/dist/utils/fetch.cjs
@@ -68,15 +68,6 @@ async function fetchBridgeQuotes(request, signal, clientId, fetchFn, bridgeApiBa
     if (request.slippage !== undefined) {
         normalizedRequest.slippage = request.slippage;
     }
-    if (request.noFee !== undefined) {
-        normalizedRequest.noFee = request.noFee;
-    }
-    if (request.aggIds && request.aggIds.length > 0) {
-        normalizedRequest.aggIds = request.aggIds;
-    }
-    if (request.bridgeIds && request.bridgeIds.length > 0) {
-        normalizedRequest.bridgeIds = request.bridgeIds;
-    }
     const queryParams = new URLSearchParams();
     Object.entries(normalizedRequest).forEach(([key, value]) => {
         queryParams.append(key, value.toString());
diff --git a/dist/utils/fetch.cjs.map b/dist/utils/fetch.cjs.map
index 2e582f6b0801132b2c2393589713c84366ba413e..eba1b960f366a861cba20ffccb934700a88fe8b7 100644
--- a/dist/utils/fetch.cjs.map
+++ b/dist/utils/fetch.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"fetch.cjs","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { StructError } from '@metamask/superstruct';\nimport type { CaipAssetType, CaipChainId, Hex } from '@metamask/utils';\nimport { Duration } from '@metamask/utils';\n\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToDec,\n} from './caip-formatters';\nimport { validateQuoteResponse, validateSwapsTokenObject } from './validators';\nimport type {\n  QuoteResponse,\n  FetchFunction,\n  GenericQuoteRequest,\n  QuoteRequest,\n  BridgeAsset,\n} from '../types';\n\nconst CACHE_REFRESH_TEN_MINUTES = 10 * Duration.Minute;\n\nexport const getClientIdHeader = (clientId: string) => ({\n  'X-Client-Id': clientId,\n});\n\n/**\n * Returns a list of enabled (unblocked) tokens\n *\n * @param chainId - The chain ID to fetch tokens for\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of enabled (unblocked) tokens\n */\nexport async function fetchBridgeTokens(\n  chainId: Hex | CaipChainId,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<Record<string, BridgeAsset>> {\n  // TODO make token api v2 call\n  const url = `${bridgeApiBaseUrl}/getTokens?chainId=${formatChainIdToDec(chainId)}`;\n\n  // TODO we will need to cache these. In Extension fetchWithCache is used. This is due to the following:\n  // If we allow selecting dest networks which the user has not imported,\n  // note that the Assets controller won't be able to provide tokens. In extension we fetch+cache the token list from bridge-api to handle this\n  const tokens = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: CACHE_REFRESH_TEN_MINUTES },\n    functionName: 'fetchBridgeTokens',\n  });\n\n  const transformedTokens: Record<string, BridgeAsset> = {};\n  tokens.forEach((token: unknown) => {\n    if (validateSwapsTokenObject(token)) {\n      transformedTokens[token.address] = token;\n    }\n  });\n  return transformedTokens;\n}\n\n/**\n * Converts the generic quote request to the type that the bridge-api expects\n * then fetches quotes from the bridge-api\n *\n * @param request - The quote request\n * @param signal - The abort signal\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of bridge tx quotes\n */\nexport async function fetchBridgeQuotes(\n  request: GenericQuoteRequest,\n  signal: AbortSignal | null,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<QuoteResponse[]> {\n  const destWalletAddress = request.destWalletAddress ?? request.walletAddress;\n  // Transform the generic quote request into QuoteRequest\n  const normalizedRequest: QuoteRequest = {\n    walletAddress: formatAddressToCaipReference(request.walletAddress),\n    destWalletAddress: formatAddressToCaipReference(destWalletAddress),\n    srcChainId: formatChainIdToDec(request.srcChainId),\n    destChainId: formatChainIdToDec(request.destChainId),\n    srcTokenAddress: formatAddressToCaipReference(request.srcTokenAddress),\n    destTokenAddress: formatAddressToCaipReference(request.destTokenAddress),\n    srcTokenAmount: request.srcTokenAmount,\n    insufficientBal: Boolean(request.insufficientBal),\n    resetApproval: Boolean(request.resetApproval),\n    gasIncluded: Boolean(request.gasIncluded),\n  };\n  if (request.slippage !== undefined) {\n    normalizedRequest.slippage = request.slippage;\n  }\n  if (request.noFee !== undefined) {\n    normalizedRequest.noFee = request.noFee;\n  }\n  if (request.aggIds && request.aggIds.length > 0) {\n    normalizedRequest.aggIds = request.aggIds;\n  }\n  if (request.bridgeIds && request.bridgeIds.length > 0) {\n    normalizedRequest.bridgeIds = request.bridgeIds;\n  }\n\n  const queryParams = new URLSearchParams();\n  Object.entries(normalizedRequest).forEach(([key, value]) => {\n    queryParams.append(key, value.toString());\n  });\n  const url = `${bridgeApiBaseUrl}/getQuote?${queryParams}`;\n  const quotes: unknown[] = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    signal,\n    cacheOptions: { cacheRefreshTime: 0 },\n    functionName: 'fetchBridgeQuotes',\n  });\n\n  const validationFailuresByAggregator: {\n    [aggregator: string]: Set<string>;\n  } = {};\n  const filteredQuotes = quotes.filter((quoteResponse: unknown) => {\n    try {\n      return validateQuoteResponse(quoteResponse);\n    } catch (error) {\n      if (error instanceof StructError) {\n        error.failures().forEach(({ branch, path }) => {\n          const aggregatorId = branch?.[0]?.quote?.bridgeId;\n          if (!validationFailuresByAggregator[aggregatorId]) {\n            validationFailuresByAggregator[aggregatorId] = new Set([]);\n          }\n          const pathString = path?.join('.') || 'unknown';\n          validationFailuresByAggregator[aggregatorId].add(pathString);\n        });\n      }\n      return false;\n    }\n  });\n\n  if (Object.keys(validationFailuresByAggregator).length > 0) {\n    console.error('Quote validation failed', validationFailuresByAggregator);\n  }\n  return filteredQuotes as QuoteResponse[];\n}\n\nconst fetchAssetPricesForCurrency = async (request: {\n  currency: string;\n  assetIds: Set<CaipAssetType>;\n  clientId: string;\n  fetchFn: FetchFunction;\n}): Promise<Record<CaipAssetType, { [currency: string]: string }>> => {\n  const { currency, assetIds, clientId, fetchFn } = request;\n  const validAssetIds = Array.from(assetIds).filter(Boolean);\n  if (validAssetIds.length === 0) {\n    return {};\n  }\n\n  const queryParams = new URLSearchParams({\n    assetIds: validAssetIds.filter(Boolean).join(','),\n    vsCurrency: currency,\n  });\n  const url = `https://price.api.cx.metamask.io/v3/spot-prices?${queryParams}`;\n  const priceApiResponse = (await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: Number(Duration.Second * 30) },\n    functionName: 'fetchAssetExchangeRates',\n  })) as Record<CaipAssetType, { [currency: string]: number }>;\n\n  if (!priceApiResponse || typeof priceApiResponse !== 'object') {\n    return {};\n  }\n\n  return Object.entries(priceApiResponse).reduce(\n    (acc, [assetId, currencyToPrice]) => {\n      if (!currencyToPrice) {\n        return acc;\n      }\n      if (!acc[assetId as CaipAssetType]) {\n        acc[assetId as CaipAssetType] = {};\n      }\n      if (currencyToPrice[currency]) {\n        acc[assetId as CaipAssetType][currency] =\n          currencyToPrice[currency].toString();\n      }\n      return acc;\n    },\n    {} as Record<CaipAssetType, { [currency: string]: string }>,\n  );\n};\n\n/**\n * Fetches the asset prices from the price API for multiple currencies\n *\n * @param request - The request object\n * @returns The asset prices by assetId\n */\nexport const fetchAssetPrices = async (\n  request: {\n    currencies: Set<string>;\n  } & Omit<Parameters<typeof fetchAssetPricesForCurrency>[0], 'currency'>,\n): Promise<\n  Record<CaipAssetType, { [currency: string]: string } | undefined>\n> => {\n  const { currencies, ...args } = request;\n\n  const combinedPrices = await Promise.allSettled(\n    Array.from(currencies).map(\n      async (currency) =>\n        await fetchAssetPricesForCurrency({ ...args, currency }),\n    ),\n  ).then((priceApiResponse) => {\n    return priceApiResponse.reduce(\n      (acc, result) => {\n        if (result.status === 'fulfilled') {\n          Object.entries(result.value).forEach(([assetId, currencyToPrice]) => {\n            const existingPrices = acc[assetId as CaipAssetType];\n            if (!existingPrices) {\n              acc[assetId as CaipAssetType] = {};\n            }\n            Object.entries(currencyToPrice).forEach(([currency, price]) => {\n              acc[assetId as CaipAssetType][currency] = price;\n            });\n          });\n        }\n        return acc;\n      },\n      {} as Record<CaipAssetType, { [currency: string]: string }>,\n    );\n  });\n\n  return combinedPrices;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"fetch.cjs","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { StructError } from '@metamask/superstruct';\nimport type { CaipAssetType, CaipChainId, Hex } from '@metamask/utils';\nimport { Duration } from '@metamask/utils';\n\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToDec,\n} from './caip-formatters';\nimport { validateQuoteResponse, validateSwapsTokenObject } from './validators';\nimport type {\n  QuoteResponse,\n  FetchFunction,\n  GenericQuoteRequest,\n  QuoteRequest,\n  BridgeAsset,\n} from '../types';\n\nconst CACHE_REFRESH_TEN_MINUTES = 10 * Duration.Minute;\n\nexport const getClientIdHeader = (clientId: string) => ({\n  'X-Client-Id': clientId,\n});\n\n/**\n * Returns a list of enabled (unblocked) tokens\n *\n * @param chainId - The chain ID to fetch tokens for\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of enabled (unblocked) tokens\n */\nexport async function fetchBridgeTokens(\n  chainId: Hex | CaipChainId,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<Record<string, BridgeAsset>> {\n  // TODO make token api v2 call\n  const url = `${bridgeApiBaseUrl}/getTokens?chainId=${formatChainIdToDec(chainId)}`;\n\n  // TODO we will need to cache these. In Extension fetchWithCache is used. This is due to the following:\n  // If we allow selecting dest networks which the user has not imported,\n  // note that the Assets controller won't be able to provide tokens. In extension we fetch+cache the token list from bridge-api to handle this\n  const tokens = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: CACHE_REFRESH_TEN_MINUTES },\n    functionName: 'fetchBridgeTokens',\n  });\n\n  const transformedTokens: Record<string, BridgeAsset> = {};\n  tokens.forEach((token: unknown) => {\n    if (validateSwapsTokenObject(token)) {\n      transformedTokens[token.address] = token;\n    }\n  });\n  return transformedTokens;\n}\n\n/**\n * Converts the generic quote request to the type that the bridge-api expects\n * then fetches quotes from the bridge-api\n *\n * @param request - The quote request\n * @param signal - The abort signal\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of bridge tx quotes\n */\nexport async function fetchBridgeQuotes(\n  request: GenericQuoteRequest,\n  signal: AbortSignal,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<QuoteResponse[]> {\n  const destWalletAddress = request.destWalletAddress ?? request.walletAddress;\n  // Transform the generic quote request into QuoteRequest\n  const normalizedRequest: QuoteRequest = {\n    walletAddress: formatAddressToCaipReference(request.walletAddress),\n    destWalletAddress: formatAddressToCaipReference(destWalletAddress),\n    srcChainId: formatChainIdToDec(request.srcChainId),\n    destChainId: formatChainIdToDec(request.destChainId),\n    srcTokenAddress: formatAddressToCaipReference(request.srcTokenAddress),\n    destTokenAddress: formatAddressToCaipReference(request.destTokenAddress),\n    srcTokenAmount: request.srcTokenAmount,\n    insufficientBal: Boolean(request.insufficientBal),\n    resetApproval: Boolean(request.resetApproval),\n    gasIncluded: Boolean(request.gasIncluded),\n  };\n  if (request.slippage !== undefined) {\n    normalizedRequest.slippage = request.slippage;\n  }\n\n  const queryParams = new URLSearchParams();\n  Object.entries(normalizedRequest).forEach(([key, value]) => {\n    queryParams.append(key, value.toString());\n  });\n  const url = `${bridgeApiBaseUrl}/getQuote?${queryParams}`;\n  const quotes: unknown[] = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    signal,\n    cacheOptions: { cacheRefreshTime: 0 },\n    functionName: 'fetchBridgeQuotes',\n  });\n\n  const validationFailuresByAggregator: {\n    [aggregator: string]: Set<string>;\n  } = {};\n  const filteredQuotes = quotes.filter((quoteResponse: unknown) => {\n    try {\n      return validateQuoteResponse(quoteResponse);\n    } catch (error) {\n      if (error instanceof StructError) {\n        error.failures().forEach(({ branch, path }) => {\n          const aggregatorId = branch?.[0]?.quote?.bridgeId;\n          if (!validationFailuresByAggregator[aggregatorId]) {\n            validationFailuresByAggregator[aggregatorId] = new Set([]);\n          }\n          const pathString = path?.join('.') || 'unknown';\n          validationFailuresByAggregator[aggregatorId].add(pathString);\n        });\n      }\n      return false;\n    }\n  });\n\n  if (Object.keys(validationFailuresByAggregator).length > 0) {\n    console.error('Quote validation failed', validationFailuresByAggregator);\n  }\n  return filteredQuotes as QuoteResponse[];\n}\n\nconst fetchAssetPricesForCurrency = async (request: {\n  currency: string;\n  assetIds: Set<CaipAssetType>;\n  clientId: string;\n  fetchFn: FetchFunction;\n}): Promise<Record<CaipAssetType, { [currency: string]: string }>> => {\n  const { currency, assetIds, clientId, fetchFn } = request;\n  const validAssetIds = Array.from(assetIds).filter(Boolean);\n  if (validAssetIds.length === 0) {\n    return {};\n  }\n\n  const queryParams = new URLSearchParams({\n    assetIds: validAssetIds.filter(Boolean).join(','),\n    vsCurrency: currency,\n  });\n  const url = `https://price.api.cx.metamask.io/v3/spot-prices?${queryParams}`;\n  const priceApiResponse = (await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: Number(Duration.Second * 30) },\n    functionName: 'fetchAssetExchangeRates',\n  })) as Record<CaipAssetType, { [currency: string]: number }>;\n\n  if (!priceApiResponse || typeof priceApiResponse !== 'object') {\n    return {};\n  }\n\n  return Object.entries(priceApiResponse).reduce(\n    (acc, [assetId, currencyToPrice]) => {\n      if (!currencyToPrice) {\n        return acc;\n      }\n      if (!acc[assetId as CaipAssetType]) {\n        acc[assetId as CaipAssetType] = {};\n      }\n      if (currencyToPrice[currency]) {\n        acc[assetId as CaipAssetType][currency] =\n          currencyToPrice[currency].toString();\n      }\n      return acc;\n    },\n    {} as Record<CaipAssetType, { [currency: string]: string }>,\n  );\n};\n\n/**\n * Fetches the asset prices from the price API for multiple currencies\n *\n * @param request - The request object\n * @returns The asset prices by assetId\n */\nexport const fetchAssetPrices = async (\n  request: {\n    currencies: Set<string>;\n  } & Omit<Parameters<typeof fetchAssetPricesForCurrency>[0], 'currency'>,\n): Promise<\n  Record<CaipAssetType, { [currency: string]: string } | undefined>\n> => {\n  const { currencies, ...args } = request;\n\n  const combinedPrices = await Promise.allSettled(\n    Array.from(currencies).map(\n      async (currency) =>\n        await fetchAssetPricesForCurrency({ ...args, currency }),\n    ),\n  ).then((priceApiResponse) => {\n    return priceApiResponse.reduce(\n      (acc, result) => {\n        if (result.status === 'fulfilled') {\n          Object.entries(result.value).forEach(([assetId, currencyToPrice]) => {\n            const existingPrices = acc[assetId as CaipAssetType];\n            if (!existingPrices) {\n              acc[assetId as CaipAssetType] = {};\n            }\n            Object.entries(currencyToPrice).forEach(([currency, price]) => {\n              acc[assetId as CaipAssetType][currency] = price;\n            });\n          });\n        }\n        return acc;\n      },\n      {} as Record<CaipAssetType, { [currency: string]: string }>,\n    );\n  });\n\n  return combinedPrices;\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/fetch.d.cts b/dist/utils/fetch.d.cts
index 527ba3aef6166e1524cce5c1658124441982179b..f2f282e4913b53063e2749e49b4d84d44bbf895c 100644
--- a/dist/utils/fetch.d.cts
+++ b/dist/utils/fetch.d.cts
@@ -24,7 +24,7 @@ export declare function fetchBridgeTokens(chainId: Hex | CaipChainId, clientId:
  * @param bridgeApiBaseUrl - The base URL for the bridge API
  * @returns A list of bridge tx quotes
  */
-export declare function fetchBridgeQuotes(request: GenericQuoteRequest, signal: AbortSignal | null, clientId: string, fetchFn: FetchFunction, bridgeApiBaseUrl: string): Promise<QuoteResponse[]>;
+export declare function fetchBridgeQuotes(request: GenericQuoteRequest, signal: AbortSignal, clientId: string, fetchFn: FetchFunction, bridgeApiBaseUrl: string): Promise<QuoteResponse[]>;
 declare const fetchAssetPricesForCurrency: (request: {
     currency: string;
     assetIds: Set<CaipAssetType>;
diff --git a/dist/utils/fetch.d.cts.map b/dist/utils/fetch.d.cts.map
index 71e9d975985f587603d8e0bac48219b428d5ad77..0db3ee224abf642e5389637c2c7f4c13749a2c95 100644
--- a/dist/utils/fetch.d.cts.map
+++ b/dist/utils/fetch.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"fetch.d.cts","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,EAAE,wBAAwB;AAQvE,OAAO,KAAK,EACV,aAAa,EACb,aAAa,EACb,mBAAmB,EAEnB,WAAW,EACZ,qBAAiB;AAIlB,eAAO,MAAM,iBAAiB,aAAc,MAAM;;CAEhD,CAAC;AAEH;;;;;;;;GAQG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,GAAG,GAAG,WAAW,EAC1B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAoBtC;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,mBAAmB,EAC5B,MAAM,EAAE,WAAW,GAAG,IAAI,EAC1B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,aAAa,EAAE,CAAC,CAiE1B;AAED,QAAA,MAAM,2BAA2B,YAAmB;IAClD,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,IAAI,aAAa,CAAC,CAAC;IAC7B,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,aAAa,CAAC;CACxB;;GAsCA,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,gBAAgB,YAClB;IACP,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;CACzB,GAAG,KAAK,WAAW,kCAAkC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC;;eAgCxE,CAAC"}
\ No newline at end of file
+{"version":3,"file":"fetch.d.cts","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,EAAE,wBAAwB;AAQvE,OAAO,KAAK,EACV,aAAa,EACb,aAAa,EACb,mBAAmB,EAEnB,WAAW,EACZ,qBAAiB;AAIlB,eAAO,MAAM,iBAAiB,aAAc,MAAM;;CAEhD,CAAC;AAEH;;;;;;;;GAQG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,GAAG,GAAG,WAAW,EAC1B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAoBtC;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,mBAAmB,EAC5B,MAAM,EAAE,WAAW,EACnB,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,aAAa,EAAE,CAAC,CAwD1B;AAED,QAAA,MAAM,2BAA2B,YAAmB;IAClD,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,IAAI,aAAa,CAAC,CAAC;IAC7B,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,aAAa,CAAC;CACxB;;GAsCA,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,gBAAgB,YAClB;IACP,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;CACzB,GAAG,KAAK,WAAW,kCAAkC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC;;eAgCxE,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/fetch.d.mts b/dist/utils/fetch.d.mts
index b7e705e493f2cfa097c9788717c307f4919249ec..c39f21c1ce1e9ea63f915e820e7cccd040ad5fc3 100644
--- a/dist/utils/fetch.d.mts
+++ b/dist/utils/fetch.d.mts
@@ -24,7 +24,7 @@ export declare function fetchBridgeTokens(chainId: Hex | CaipChainId, clientId:
  * @param bridgeApiBaseUrl - The base URL for the bridge API
  * @returns A list of bridge tx quotes
  */
-export declare function fetchBridgeQuotes(request: GenericQuoteRequest, signal: AbortSignal | null, clientId: string, fetchFn: FetchFunction, bridgeApiBaseUrl: string): Promise<QuoteResponse[]>;
+export declare function fetchBridgeQuotes(request: GenericQuoteRequest, signal: AbortSignal, clientId: string, fetchFn: FetchFunction, bridgeApiBaseUrl: string): Promise<QuoteResponse[]>;
 declare const fetchAssetPricesForCurrency: (request: {
     currency: string;
     assetIds: Set<CaipAssetType>;
diff --git a/dist/utils/fetch.d.mts.map b/dist/utils/fetch.d.mts.map
index 0ad1772ff9695852dcb5a9d3f02c691eef1e39d9..0525a282277d3646b18755fdb7dd6bf0e7543ed7 100644
--- a/dist/utils/fetch.d.mts.map
+++ b/dist/utils/fetch.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"fetch.d.mts","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,EAAE,wBAAwB;AAQvE,OAAO,KAAK,EACV,aAAa,EACb,aAAa,EACb,mBAAmB,EAEnB,WAAW,EACZ,qBAAiB;AAIlB,eAAO,MAAM,iBAAiB,aAAc,MAAM;;CAEhD,CAAC;AAEH;;;;;;;;GAQG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,GAAG,GAAG,WAAW,EAC1B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAoBtC;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,mBAAmB,EAC5B,MAAM,EAAE,WAAW,GAAG,IAAI,EAC1B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,aAAa,EAAE,CAAC,CAiE1B;AAED,QAAA,MAAM,2BAA2B,YAAmB;IAClD,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,IAAI,aAAa,CAAC,CAAC;IAC7B,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,aAAa,CAAC;CACxB;;GAsCA,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,gBAAgB,YAClB;IACP,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;CACzB,GAAG,KAAK,WAAW,kCAAkC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC;;eAgCxE,CAAC"}
\ No newline at end of file
+{"version":3,"file":"fetch.d.mts","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,EAAE,wBAAwB;AAQvE,OAAO,KAAK,EACV,aAAa,EACb,aAAa,EACb,mBAAmB,EAEnB,WAAW,EACZ,qBAAiB;AAIlB,eAAO,MAAM,iBAAiB,aAAc,MAAM;;CAEhD,CAAC;AAEH;;;;;;;;GAQG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,GAAG,GAAG,WAAW,EAC1B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAoBtC;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,mBAAmB,EAC5B,MAAM,EAAE,WAAW,EACnB,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,aAAa,EACtB,gBAAgB,EAAE,MAAM,GACvB,OAAO,CAAC,aAAa,EAAE,CAAC,CAwD1B;AAED,QAAA,MAAM,2BAA2B,YAAmB;IAClD,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,IAAI,aAAa,CAAC,CAAC;IAC7B,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,aAAa,CAAC;CACxB;;GAsCA,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,gBAAgB,YAClB;IACP,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;CACzB,GAAG,KAAK,WAAW,kCAAkC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC;;eAgCxE,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/fetch.mjs b/dist/utils/fetch.mjs
index 0bda83f95daab6f7cb3ea5a25c10c26cda02c5e4..05b73118442334e152f064d1d9c62950f069f5ad 100644
--- a/dist/utils/fetch.mjs
+++ b/dist/utils/fetch.mjs
@@ -63,15 +63,6 @@ export async function fetchBridgeQuotes(request, signal, clientId, fetchFn, brid
     if (request.slippage !== undefined) {
         normalizedRequest.slippage = request.slippage;
     }
-    if (request.noFee !== undefined) {
-        normalizedRequest.noFee = request.noFee;
-    }
-    if (request.aggIds && request.aggIds.length > 0) {
-        normalizedRequest.aggIds = request.aggIds;
-    }
-    if (request.bridgeIds && request.bridgeIds.length > 0) {
-        normalizedRequest.bridgeIds = request.bridgeIds;
-    }
     const queryParams = new URLSearchParams();
     Object.entries(normalizedRequest).forEach(([key, value]) => {
         queryParams.append(key, value.toString());
diff --git a/dist/utils/fetch.mjs.map b/dist/utils/fetch.mjs.map
index fefc133ed33e5f0b424bd63b1549ca599ea940d5..c435f0ab195dba99a5ec3caa3e47af924cffc793 100644
--- a/dist/utils/fetch.mjs.map
+++ b/dist/utils/fetch.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"fetch.mjs","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { StructError } from '@metamask/superstruct';\nimport type { CaipAssetType, CaipChainId, Hex } from '@metamask/utils';\nimport { Duration } from '@metamask/utils';\n\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToDec,\n} from './caip-formatters';\nimport { validateQuoteResponse, validateSwapsTokenObject } from './validators';\nimport type {\n  QuoteResponse,\n  FetchFunction,\n  GenericQuoteRequest,\n  QuoteRequest,\n  BridgeAsset,\n} from '../types';\n\nconst CACHE_REFRESH_TEN_MINUTES = 10 * Duration.Minute;\n\nexport const getClientIdHeader = (clientId: string) => ({\n  'X-Client-Id': clientId,\n});\n\n/**\n * Returns a list of enabled (unblocked) tokens\n *\n * @param chainId - The chain ID to fetch tokens for\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of enabled (unblocked) tokens\n */\nexport async function fetchBridgeTokens(\n  chainId: Hex | CaipChainId,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<Record<string, BridgeAsset>> {\n  // TODO make token api v2 call\n  const url = `${bridgeApiBaseUrl}/getTokens?chainId=${formatChainIdToDec(chainId)}`;\n\n  // TODO we will need to cache these. In Extension fetchWithCache is used. This is due to the following:\n  // If we allow selecting dest networks which the user has not imported,\n  // note that the Assets controller won't be able to provide tokens. In extension we fetch+cache the token list from bridge-api to handle this\n  const tokens = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: CACHE_REFRESH_TEN_MINUTES },\n    functionName: 'fetchBridgeTokens',\n  });\n\n  const transformedTokens: Record<string, BridgeAsset> = {};\n  tokens.forEach((token: unknown) => {\n    if (validateSwapsTokenObject(token)) {\n      transformedTokens[token.address] = token;\n    }\n  });\n  return transformedTokens;\n}\n\n/**\n * Converts the generic quote request to the type that the bridge-api expects\n * then fetches quotes from the bridge-api\n *\n * @param request - The quote request\n * @param signal - The abort signal\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of bridge tx quotes\n */\nexport async function fetchBridgeQuotes(\n  request: GenericQuoteRequest,\n  signal: AbortSignal | null,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<QuoteResponse[]> {\n  const destWalletAddress = request.destWalletAddress ?? request.walletAddress;\n  // Transform the generic quote request into QuoteRequest\n  const normalizedRequest: QuoteRequest = {\n    walletAddress: formatAddressToCaipReference(request.walletAddress),\n    destWalletAddress: formatAddressToCaipReference(destWalletAddress),\n    srcChainId: formatChainIdToDec(request.srcChainId),\n    destChainId: formatChainIdToDec(request.destChainId),\n    srcTokenAddress: formatAddressToCaipReference(request.srcTokenAddress),\n    destTokenAddress: formatAddressToCaipReference(request.destTokenAddress),\n    srcTokenAmount: request.srcTokenAmount,\n    insufficientBal: Boolean(request.insufficientBal),\n    resetApproval: Boolean(request.resetApproval),\n    gasIncluded: Boolean(request.gasIncluded),\n  };\n  if (request.slippage !== undefined) {\n    normalizedRequest.slippage = request.slippage;\n  }\n  if (request.noFee !== undefined) {\n    normalizedRequest.noFee = request.noFee;\n  }\n  if (request.aggIds && request.aggIds.length > 0) {\n    normalizedRequest.aggIds = request.aggIds;\n  }\n  if (request.bridgeIds && request.bridgeIds.length > 0) {\n    normalizedRequest.bridgeIds = request.bridgeIds;\n  }\n\n  const queryParams = new URLSearchParams();\n  Object.entries(normalizedRequest).forEach(([key, value]) => {\n    queryParams.append(key, value.toString());\n  });\n  const url = `${bridgeApiBaseUrl}/getQuote?${queryParams}`;\n  const quotes: unknown[] = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    signal,\n    cacheOptions: { cacheRefreshTime: 0 },\n    functionName: 'fetchBridgeQuotes',\n  });\n\n  const validationFailuresByAggregator: {\n    [aggregator: string]: Set<string>;\n  } = {};\n  const filteredQuotes = quotes.filter((quoteResponse: unknown) => {\n    try {\n      return validateQuoteResponse(quoteResponse);\n    } catch (error) {\n      if (error instanceof StructError) {\n        error.failures().forEach(({ branch, path }) => {\n          const aggregatorId = branch?.[0]?.quote?.bridgeId;\n          if (!validationFailuresByAggregator[aggregatorId]) {\n            validationFailuresByAggregator[aggregatorId] = new Set([]);\n          }\n          const pathString = path?.join('.') || 'unknown';\n          validationFailuresByAggregator[aggregatorId].add(pathString);\n        });\n      }\n      return false;\n    }\n  });\n\n  if (Object.keys(validationFailuresByAggregator).length > 0) {\n    console.error('Quote validation failed', validationFailuresByAggregator);\n  }\n  return filteredQuotes as QuoteResponse[];\n}\n\nconst fetchAssetPricesForCurrency = async (request: {\n  currency: string;\n  assetIds: Set<CaipAssetType>;\n  clientId: string;\n  fetchFn: FetchFunction;\n}): Promise<Record<CaipAssetType, { [currency: string]: string }>> => {\n  const { currency, assetIds, clientId, fetchFn } = request;\n  const validAssetIds = Array.from(assetIds).filter(Boolean);\n  if (validAssetIds.length === 0) {\n    return {};\n  }\n\n  const queryParams = new URLSearchParams({\n    assetIds: validAssetIds.filter(Boolean).join(','),\n    vsCurrency: currency,\n  });\n  const url = `https://price.api.cx.metamask.io/v3/spot-prices?${queryParams}`;\n  const priceApiResponse = (await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: Number(Duration.Second * 30) },\n    functionName: 'fetchAssetExchangeRates',\n  })) as Record<CaipAssetType, { [currency: string]: number }>;\n\n  if (!priceApiResponse || typeof priceApiResponse !== 'object') {\n    return {};\n  }\n\n  return Object.entries(priceApiResponse).reduce(\n    (acc, [assetId, currencyToPrice]) => {\n      if (!currencyToPrice) {\n        return acc;\n      }\n      if (!acc[assetId as CaipAssetType]) {\n        acc[assetId as CaipAssetType] = {};\n      }\n      if (currencyToPrice[currency]) {\n        acc[assetId as CaipAssetType][currency] =\n          currencyToPrice[currency].toString();\n      }\n      return acc;\n    },\n    {} as Record<CaipAssetType, { [currency: string]: string }>,\n  );\n};\n\n/**\n * Fetches the asset prices from the price API for multiple currencies\n *\n * @param request - The request object\n * @returns The asset prices by assetId\n */\nexport const fetchAssetPrices = async (\n  request: {\n    currencies: Set<string>;\n  } & Omit<Parameters<typeof fetchAssetPricesForCurrency>[0], 'currency'>,\n): Promise<\n  Record<CaipAssetType, { [currency: string]: string } | undefined>\n> => {\n  const { currencies, ...args } = request;\n\n  const combinedPrices = await Promise.allSettled(\n    Array.from(currencies).map(\n      async (currency) =>\n        await fetchAssetPricesForCurrency({ ...args, currency }),\n    ),\n  ).then((priceApiResponse) => {\n    return priceApiResponse.reduce(\n      (acc, result) => {\n        if (result.status === 'fulfilled') {\n          Object.entries(result.value).forEach(([assetId, currencyToPrice]) => {\n            const existingPrices = acc[assetId as CaipAssetType];\n            if (!existingPrices) {\n              acc[assetId as CaipAssetType] = {};\n            }\n            Object.entries(currencyToPrice).forEach(([currency, price]) => {\n              acc[assetId as CaipAssetType][currency] = price;\n            });\n          });\n        }\n        return acc;\n      },\n      {} as Record<CaipAssetType, { [currency: string]: string }>,\n    );\n  });\n\n  return combinedPrices;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"fetch.mjs","sourceRoot":"","sources":["../../src/utils/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { StructError } from '@metamask/superstruct';\nimport type { CaipAssetType, CaipChainId, Hex } from '@metamask/utils';\nimport { Duration } from '@metamask/utils';\n\nimport {\n  formatAddressToCaipReference,\n  formatChainIdToDec,\n} from './caip-formatters';\nimport { validateQuoteResponse, validateSwapsTokenObject } from './validators';\nimport type {\n  QuoteResponse,\n  FetchFunction,\n  GenericQuoteRequest,\n  QuoteRequest,\n  BridgeAsset,\n} from '../types';\n\nconst CACHE_REFRESH_TEN_MINUTES = 10 * Duration.Minute;\n\nexport const getClientIdHeader = (clientId: string) => ({\n  'X-Client-Id': clientId,\n});\n\n/**\n * Returns a list of enabled (unblocked) tokens\n *\n * @param chainId - The chain ID to fetch tokens for\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of enabled (unblocked) tokens\n */\nexport async function fetchBridgeTokens(\n  chainId: Hex | CaipChainId,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<Record<string, BridgeAsset>> {\n  // TODO make token api v2 call\n  const url = `${bridgeApiBaseUrl}/getTokens?chainId=${formatChainIdToDec(chainId)}`;\n\n  // TODO we will need to cache these. In Extension fetchWithCache is used. This is due to the following:\n  // If we allow selecting dest networks which the user has not imported,\n  // note that the Assets controller won't be able to provide tokens. In extension we fetch+cache the token list from bridge-api to handle this\n  const tokens = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: CACHE_REFRESH_TEN_MINUTES },\n    functionName: 'fetchBridgeTokens',\n  });\n\n  const transformedTokens: Record<string, BridgeAsset> = {};\n  tokens.forEach((token: unknown) => {\n    if (validateSwapsTokenObject(token)) {\n      transformedTokens[token.address] = token;\n    }\n  });\n  return transformedTokens;\n}\n\n/**\n * Converts the generic quote request to the type that the bridge-api expects\n * then fetches quotes from the bridge-api\n *\n * @param request - The quote request\n * @param signal - The abort signal\n * @param clientId - The client ID for metrics\n * @param fetchFn - The fetch function to use\n * @param bridgeApiBaseUrl - The base URL for the bridge API\n * @returns A list of bridge tx quotes\n */\nexport async function fetchBridgeQuotes(\n  request: GenericQuoteRequest,\n  signal: AbortSignal,\n  clientId: string,\n  fetchFn: FetchFunction,\n  bridgeApiBaseUrl: string,\n): Promise<QuoteResponse[]> {\n  const destWalletAddress = request.destWalletAddress ?? request.walletAddress;\n  // Transform the generic quote request into QuoteRequest\n  const normalizedRequest: QuoteRequest = {\n    walletAddress: formatAddressToCaipReference(request.walletAddress),\n    destWalletAddress: formatAddressToCaipReference(destWalletAddress),\n    srcChainId: formatChainIdToDec(request.srcChainId),\n    destChainId: formatChainIdToDec(request.destChainId),\n    srcTokenAddress: formatAddressToCaipReference(request.srcTokenAddress),\n    destTokenAddress: formatAddressToCaipReference(request.destTokenAddress),\n    srcTokenAmount: request.srcTokenAmount,\n    insufficientBal: Boolean(request.insufficientBal),\n    resetApproval: Boolean(request.resetApproval),\n    gasIncluded: Boolean(request.gasIncluded),\n  };\n  if (request.slippage !== undefined) {\n    normalizedRequest.slippage = request.slippage;\n  }\n\n  const queryParams = new URLSearchParams();\n  Object.entries(normalizedRequest).forEach(([key, value]) => {\n    queryParams.append(key, value.toString());\n  });\n  const url = `${bridgeApiBaseUrl}/getQuote?${queryParams}`;\n  const quotes: unknown[] = await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    signal,\n    cacheOptions: { cacheRefreshTime: 0 },\n    functionName: 'fetchBridgeQuotes',\n  });\n\n  const validationFailuresByAggregator: {\n    [aggregator: string]: Set<string>;\n  } = {};\n  const filteredQuotes = quotes.filter((quoteResponse: unknown) => {\n    try {\n      return validateQuoteResponse(quoteResponse);\n    } catch (error) {\n      if (error instanceof StructError) {\n        error.failures().forEach(({ branch, path }) => {\n          const aggregatorId = branch?.[0]?.quote?.bridgeId;\n          if (!validationFailuresByAggregator[aggregatorId]) {\n            validationFailuresByAggregator[aggregatorId] = new Set([]);\n          }\n          const pathString = path?.join('.') || 'unknown';\n          validationFailuresByAggregator[aggregatorId].add(pathString);\n        });\n      }\n      return false;\n    }\n  });\n\n  if (Object.keys(validationFailuresByAggregator).length > 0) {\n    console.error('Quote validation failed', validationFailuresByAggregator);\n  }\n  return filteredQuotes as QuoteResponse[];\n}\n\nconst fetchAssetPricesForCurrency = async (request: {\n  currency: string;\n  assetIds: Set<CaipAssetType>;\n  clientId: string;\n  fetchFn: FetchFunction;\n}): Promise<Record<CaipAssetType, { [currency: string]: string }>> => {\n  const { currency, assetIds, clientId, fetchFn } = request;\n  const validAssetIds = Array.from(assetIds).filter(Boolean);\n  if (validAssetIds.length === 0) {\n    return {};\n  }\n\n  const queryParams = new URLSearchParams({\n    assetIds: validAssetIds.filter(Boolean).join(','),\n    vsCurrency: currency,\n  });\n  const url = `https://price.api.cx.metamask.io/v3/spot-prices?${queryParams}`;\n  const priceApiResponse = (await fetchFn(url, {\n    headers: getClientIdHeader(clientId),\n    cacheOptions: { cacheRefreshTime: Number(Duration.Second * 30) },\n    functionName: 'fetchAssetExchangeRates',\n  })) as Record<CaipAssetType, { [currency: string]: number }>;\n\n  if (!priceApiResponse || typeof priceApiResponse !== 'object') {\n    return {};\n  }\n\n  return Object.entries(priceApiResponse).reduce(\n    (acc, [assetId, currencyToPrice]) => {\n      if (!currencyToPrice) {\n        return acc;\n      }\n      if (!acc[assetId as CaipAssetType]) {\n        acc[assetId as CaipAssetType] = {};\n      }\n      if (currencyToPrice[currency]) {\n        acc[assetId as CaipAssetType][currency] =\n          currencyToPrice[currency].toString();\n      }\n      return acc;\n    },\n    {} as Record<CaipAssetType, { [currency: string]: string }>,\n  );\n};\n\n/**\n * Fetches the asset prices from the price API for multiple currencies\n *\n * @param request - The request object\n * @returns The asset prices by assetId\n */\nexport const fetchAssetPrices = async (\n  request: {\n    currencies: Set<string>;\n  } & Omit<Parameters<typeof fetchAssetPricesForCurrency>[0], 'currency'>,\n): Promise<\n  Record<CaipAssetType, { [currency: string]: string } | undefined>\n> => {\n  const { currencies, ...args } = request;\n\n  const combinedPrices = await Promise.allSettled(\n    Array.from(currencies).map(\n      async (currency) =>\n        await fetchAssetPricesForCurrency({ ...args, currency }),\n    ),\n  ).then((priceApiResponse) => {\n    return priceApiResponse.reduce(\n      (acc, result) => {\n        if (result.status === 'fulfilled') {\n          Object.entries(result.value).forEach(([assetId, currencyToPrice]) => {\n            const existingPrices = acc[assetId as CaipAssetType];\n            if (!existingPrices) {\n              acc[assetId as CaipAssetType] = {};\n            }\n            Object.entries(currencyToPrice).forEach(([currency, price]) => {\n              acc[assetId as CaipAssetType][currency] = price;\n            });\n          });\n        }\n        return acc;\n      },\n      {} as Record<CaipAssetType, { [currency: string]: string }>,\n    );\n  });\n\n  return combinedPrices;\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/quote.cjs b/dist/utils/quote.cjs
index 8786ec7ef3809ab4a862ef6e4c403ea5170c6b89..5ecb0d27773720a522c0755406d14e518f7e6866 100644
--- a/dist/utils/quote.cjs
+++ b/dist/utils/quote.cjs
@@ -122,9 +122,8 @@ const calcRelayerFee = ({ quote, trade }, { exchangeRate, usdExchangeRate }) =>
     };
 };
 exports.calcRelayerFee = calcRelayerFee;
-const calcTotalGasFee = ({ bridgeQuote, feePerGasInDecGwei, priorityFeePerGasInDecGwei, nativeToDisplayCurrencyExchangeRate, nativeToUsdExchangeRate, }) => {
-    const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;
-    const totalGasLimitInDec = new bignumber_js_1.BigNumber(trade.gasLimit?.toString() ?? '0').plus(approval?.gasLimit?.toString() ?? '0');
+const calcTotalGasFee = ({ approvalGasLimit, tradeGasLimit, l1GasFeesInHexWei, feePerGasInDecGwei, priorityFeePerGasInDecGwei, nativeToDisplayCurrencyExchangeRate, nativeToUsdExchangeRate, }) => {
+    const totalGasLimitInDec = new bignumber_js_1.BigNumber(tradeGasLimit?.toString() ?? '0').plus(approvalGasLimit?.toString() ?? '0');
     const totalFeePerGasInDecGwei = new bignumber_js_1.BigNumber(feePerGasInDecGwei).plus(priorityFeePerGasInDecGwei);
     const l1GasFeesInDecGWei = (0, controller_utils_1.weiHexToGweiDec)((0, controller_utils_1.toHex)(l1GasFeesInHexWei ?? '0'));
     const gasFeesInDecGwei = totalGasLimitInDec
@@ -143,55 +142,93 @@ const calcTotalGasFee = ({ bridgeQuote, feePerGasInDecGwei, priorityFeePerGasInD
         usd: gasFeesInUSD?.toString() ?? null,
     };
 };
-const calcEstimatedAndMaxTotalGasFee = ({ bridgeQuote, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }) => {
+const calcEstimatedAndMaxTotalGasFee = ({ bridgeQuote: { approval, trade, l1GasFeesInHexWei }, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }) => {
+    // Estimated gas fees spent after receiving refunds, this is shown to the user
+    const { amount: amountEffective, valueInCurrency: valueInCurrencyEffective, usd: usdEffective, } = calcTotalGasFee({
+        // Fallback to gasLimit if effectiveGas is not available
+        approvalGasLimit: approval?.effectiveGas ?? approval?.gasLimit,
+        tradeGasLimit: trade?.effectiveGas ?? trade?.gasLimit,
+        l1GasFeesInHexWei,
+        feePerGasInDecGwei: estimatedBaseFeeInDecGwei,
+        priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,
+        nativeToDisplayCurrencyExchangeRate,
+        nativeToUsdExchangeRate,
+    });
+    // Estimated total gas fee, including refunded fees (medium)
     const { amount, valueInCurrency, usd } = calcTotalGasFee({
-        bridgeQuote,
+        approvalGasLimit: approval?.gasLimit,
+        tradeGasLimit: trade?.gasLimit,
+        l1GasFeesInHexWei,
         feePerGasInDecGwei: estimatedBaseFeeInDecGwei,
         priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,
         nativeToDisplayCurrencyExchangeRate,
         nativeToUsdExchangeRate,
     });
+    // Max gas fee (high), used to disable submission of the transaction
     const { amount: amountMax, valueInCurrency: valueInCurrencyMax, usd: usdMax, } = calcTotalGasFee({
-        bridgeQuote,
+        approvalGasLimit: approval?.gasLimit,
+        tradeGasLimit: trade?.gasLimit,
+        l1GasFeesInHexWei,
         feePerGasInDecGwei: maxFeePerGasInDecGwei,
         priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,
         nativeToDisplayCurrencyExchangeRate,
         nativeToUsdExchangeRate,
     });
     return {
-        amount,
-        amountMax,
-        valueInCurrency,
-        valueInCurrencyMax,
-        usd,
-        usdMax,
+        effective: {
+            amount: amountEffective,
+            valueInCurrency: valueInCurrencyEffective,
+            usd: usdEffective,
+        },
+        total: {
+            amount,
+            valueInCurrency,
+            usd,
+        },
+        max: {
+            amount: amountMax,
+            valueInCurrency: valueInCurrencyMax,
+            usd: usdMax,
+        },
     };
 };
 exports.calcEstimatedAndMaxTotalGasFee = calcEstimatedAndMaxTotalGasFee;
-const calcTotalEstimatedNetworkFee = (gasFee, relayerFee) => {
+/**
+ * Calculates the total estimated network fees for the bridge transaction
+ *
+ * @param gasFee - The gas fee for the bridge transaction
+ * @param gasFee.effective - The fee to display to the user. If not available, this is equal to the gasLimit (total)
+ * @param relayerFee - The relayer fee paid to bridge providers
+ * @returns The total estimated network fee for the bridge transaction, including the relayer fee paid to bridge providers
+ */
+const calcTotalEstimatedNetworkFee = ({ effective: gasFeeToDisplay, }, relayerFee) => {
     return {
-        amount: new bignumber_js_1.BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),
-        valueInCurrency: gasFee.valueInCurrency
-            ? new bignumber_js_1.BigNumber(gasFee.valueInCurrency)
+        amount: new bignumber_js_1.BigNumber(gasFeeToDisplay?.amount ?? '0')
+            .plus(relayerFee.amount)
+            .toString(),
+        valueInCurrency: gasFeeToDisplay?.valueInCurrency
+            ? new bignumber_js_1.BigNumber(gasFeeToDisplay.valueInCurrency)
                 .plus(relayerFee.valueInCurrency || '0')
                 .toString()
             : null,
-        usd: gasFee.usd
-            ? new bignumber_js_1.BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()
+        usd: gasFeeToDisplay?.usd
+            ? new bignumber_js_1.BigNumber(gasFeeToDisplay.usd)
+                .plus(relayerFee.usd || '0')
+                .toString()
             : null,
     };
 };
 exports.calcTotalEstimatedNetworkFee = calcTotalEstimatedNetworkFee;
 const calcTotalMaxNetworkFee = (gasFee, relayerFee) => {
     return {
-        amount: new bignumber_js_1.BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),
-        valueInCurrency: gasFee.valueInCurrencyMax
-            ? new bignumber_js_1.BigNumber(gasFee.valueInCurrencyMax)
+        amount: new bignumber_js_1.BigNumber(gasFee.max.amount).plus(relayerFee.amount).toString(),
+        valueInCurrency: gasFee.max.valueInCurrency
+            ? new bignumber_js_1.BigNumber(gasFee.max.valueInCurrency)
                 .plus(relayerFee.valueInCurrency || '0')
                 .toString()
             : null,
-        usd: gasFee.usdMax
-            ? new bignumber_js_1.BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()
+        usd: gasFee.max.usd
+            ? new bignumber_js_1.BigNumber(gasFee.max.usd).plus(relayerFee.usd || '0').toString()
             : null,
     };
 };
diff --git a/dist/utils/quote.cjs.map b/dist/utils/quote.cjs.map
index a2d0f9cfdd8de9ec9a3d3b0aa553fb16d18caba5..60c28af23918eaac92b8698d218bf111bad5762e 100644
--- a/dist/utils/quote.cjs.map
+++ b/dist/utils/quote.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"quote.cjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress, isSolanaChainId } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  // If bridging and one of the chains is solana, require the dest wallet address\n  if (\n    partialRequest.destChainId &&\n    partialRequest.srcChainId &&\n    isSolanaChainId(partialRequest.destChainId) ===\n      !isSolanaChainId(partialRequest.srcChainId)\n  ) {\n    stringFields.push('destWalletAddress');\n    if (!partialRequest.destWalletAddress) {\n      return false;\n    }\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  bridgeQuote,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;\n\n  const totalGasLimitInDec = new BigNumber(\n    trade.gasLimit?.toString() ?? '0',\n  ).plus(approval?.gasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote,\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate) => {\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  return {\n    amount,\n    amountMax,\n    valueInCurrency,\n    valueInCurrencyMax,\n    usd,\n    usdMax,\n  };\n};\n\nexport const calcTotalEstimatedNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrency\n      ? new BigNumber(gasFee.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usd\n      ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrencyMax\n      ? new BigNumber(gasFee.valueInCurrencyMax)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usdMax\n      ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"quote.cjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":";;;AAAA,iEAIoC;AACpC,+CAAyC;AAEzC,yCAA4D;AAWrD,MAAM,mBAAmB,GAAG,CACjC,cAA4C,EAC5C,aAAa,GAAG,IAAI,EACmB,EAAE;IACzC,MAAM,YAAY,GAAG;QACnB,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;QACZ,aAAa;QACb,eAAe;KAChB,CAAC;IACF,IAAI,aAAa,EAAE;QACjB,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACrC;IACD,+EAA+E;IAC/E,IACE,cAAc,CAAC,WAAW;QAC1B,cAAc,CAAC,UAAU;QACzB,IAAA,wBAAe,EAAC,cAAc,CAAC,WAAW,CAAC;YACzC,CAAC,IAAA,wBAAe,EAAC,cAAc,CAAC,UAAU,CAAC,EAC7C;QACA,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;KACF;IACD,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,oDAAoD;IACpD,IAAI,cAAc,CAAC,QAAQ,KAAK,SAAS,EAAE;QACzC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC/B;IAED,OAAO,CACL,YAAY,CAAC,KAAK,CAChB,CAAC,KAAK,EAAE,EAAE,CACR,KAAK,IAAI,cAAc;QACvB,OAAO,cAAc,CAAC,KAAoC,CAAC;YACzD,QAAQ;QACV,cAAc,CAAC,KAAoC,CAAC,KAAK,SAAS;QAClE,cAAc,CAAC,KAAoC,CAAC,KAAK,EAAE;QAC3D,cAAc,CAAC,KAAoC,CAAC,KAAK,IAAI,CAChE;QACD,YAAY,CAAC,KAAK,CAChB,CAAC,KAAK,EAAE,EAAE,CACR,KAAK,IAAI,cAAc;YACvB,OAAO,cAAc,CAAC,KAAoC,CAAC;gBACzD,QAAQ;YACV,cAAc,CAAC,KAAoC,CAAC,KAAK,SAAS;YAClE,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAoC,CAAC,CAAC,CAAC;YACpE,cAAc,CAAC,KAAoC,CAAC,KAAK,IAAI,CAChE;QACD,CAAC,aAAa;YACZ,CAAC,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACrE,CAAC,CAAC,IAAI,CAAC,CACV,CAAC;AACJ,CAAC,CAAC;AAvDW,QAAA,mBAAmB,uBAuD9B;AAEF;;;;;GAKG;AACI,MAAM,kBAAkB,GAAG,CAAC,KAA6B,EAAE,EAAE,CAClE,GAAG,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AADnD,QAAA,kBAAkB,sBACiC;AAEhE,MAAM,eAAe,GAAG,CAAC,KAAyB,EAAE,QAAgB,EAAE,EAAE;IACtE,MAAM,OAAO,GAAG,IAAI,wBAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;IACrD,OAAO,IAAI,wBAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEK,MAAM,yBAAyB,GAAG,CACvC,WAAuC,EACvC,EAAE,YAAY,EAAE,eAAe,EAAgB,EAC/C,EAAE;IACF,MAAM,EAAE,oBAAoB,EAAE,GAAG,WAAW,CAAC;IAC7C,MAAM,iBAAiB,GAAG,eAAe,CAAC,oBAAoB,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;IAC1E,OAAO;QACL,MAAM,EAAE,iBAAiB,CAAC,QAAQ,EAAE;QACpC,eAAe,EAAE,YAAY;YAC3B,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE;YAClD,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,eAAe;YAClB,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,EAAE;YACrD,CAAC,CAAC,IAAI;KACT,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,yBAAyB,6BAepC;AAEK,MAAM,YAAY,GAAG,CAC1B,EAAE,eAAe,EAAE,SAAS,EAAS,EACrC,EAAE,YAAY,EAAE,eAAe,EAAgB,EAC/C,EAAE;IACF,MAAM,oBAAoB,GAAG,eAAe,CAC1C,eAAe,EACf,SAAS,CAAC,QAAQ,CACnB,CAAC;IACF,OAAO;QACL,MAAM,EAAE,oBAAoB,CAAC,QAAQ,EAAE;QACvC,eAAe,EAAE,YAAY;YAC3B,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE;YACrD,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,eAAe;YAClB,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,EAAE;YACxD,CAAC,CAAC,IAAI;KACT,CAAC;AACJ,CAAC,CAAC;AAjBW,QAAA,YAAY,gBAiBvB;AAEK,MAAM,cAAc,GAAG,CAC5B,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAS,EAC5C,EAAE,YAAY,EAAE,eAAe,EAAgB,EAC/C,EAAE;IACF,sDAAsD;IACtD,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAChD,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,OAAO,KAAK,QAAQ,CAAC,OAAO,CACtE,CAAC;IACF,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CACpC,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EACrC,IAAI,wBAAS,CAAC,cAAc,CAAC,CAC9B,CAAC;IACF,MAAM,oBAAoB,GAAG,eAAe,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC5E,OAAO;QACL,MAAM,EAAE,oBAAoB,CAAC,QAAQ,EAAE;QACvC,eAAe,EAAE,YAAY;YAC3B,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE;YACrD,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,eAAe;YAClB,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,EAAE;YACxD,CAAC,CAAC,IAAI;KACT,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,cAAc,kBAsBzB;AAEK,MAAM,cAAc,GAAG,CAC5B,EAAE,KAAK,EAAE,KAAK,EAAiB,EAC/B,EAAE,YAAY,EAAE,eAAe,EAAgB,EAC/C,EAAE;IACF,MAAM,gBAAgB,GAAG,IAAI,wBAAS,CACpC,IAAA,sCAAmB,EAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,CAC1C,CAAC;IACF,IAAI,kBAAkB,GAAG,eAAe,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAE/D,2EAA2E;IAC3E,IAAI,IAAA,wBAAe,EAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC3C,MAAM,kBAAkB,GAAG,IAAA,sBAAc,EAAC,KAAK,EAAE;YAC/C,YAAY;YACZ,eAAe;SAChB,CAAC,CAAC,MAAM,CAAC;QACV,kBAAkB,GAAG,kBAAkB,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;KACnE;IAED,OAAO;QACL,MAAM,EAAE,kBAAkB;QAC1B,eAAe,EAAE,YAAY;YAC3B,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,YAAY,CAAC;YACxC,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI;KACxE,CAAC;AACJ,CAAC,CAAC;AAzBW,QAAA,cAAc,kBAyBzB;AAEF,MAAM,eAAe,GAAG,CAAC,EACvB,gBAAgB,EAChB,aAAa,EACb,iBAAiB,EACjB,kBAAkB,EAClB,0BAA0B,EAC1B,mCAAmC,EACnC,uBAAuB,GASxB,EAAE,EAAE;IACH,MAAM,kBAAkB,GAAG,IAAI,wBAAS,CACtC,aAAa,EAAE,QAAQ,EAAE,IAAI,GAAG,CACjC,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,CAAC;IAE5C,MAAM,uBAAuB,GAAG,IAAI,wBAAS,CAAC,kBAAkB,CAAC,CAAC,IAAI,CACpE,0BAA0B,CAC3B,CAAC;IACF,MAAM,kBAAkB,GAAG,IAAA,kCAAe,EAAC,IAAA,wBAAK,EAAC,iBAAiB,IAAI,GAAG,CAAC,CAAC,CAAC;IAC5E,MAAM,gBAAgB,GAAG,kBAAkB;SACxC,KAAK,CAAC,uBAAuB,CAAC;SAC9B,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC5B,MAAM,eAAe,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,wBAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE1E,MAAM,wBAAwB,GAAG,mCAAmC;QAClE,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,mCAAmC,CAAC,QAAQ,EAAE,CAAC;QACvE,CAAC,CAAC,IAAI,CAAC;IACT,MAAM,YAAY,GAAG,uBAAuB;QAC1C,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC;QAC3D,CAAC,CAAC,IAAI,CAAC;IAET,OAAO;QACL,MAAM,EAAE,eAAe,CAAC,QAAQ,EAAE;QAClC,eAAe,EAAE,wBAAwB,EAAE,QAAQ,EAAE,IAAI,IAAI;QAC7D,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,IAAI;KACtC,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,8BAA8B,GAAG,CAAC,EAC7C,WAAW,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,iBAAiB,EAAE,EACnD,yBAAyB,EACzB,qBAAqB,EACrB,6BAA6B,EAC7B,YAAY,EAAE,mCAAmC,EACjD,eAAe,EAAE,uBAAuB,GAM1B,EAA2B,EAAE;IAC3C,8EAA8E;IAC9E,MAAM,EACJ,MAAM,EAAE,eAAe,EACvB,eAAe,EAAE,wBAAwB,EACzC,GAAG,EAAE,YAAY,GAClB,GAAG,eAAe,CAAC;QAClB,wDAAwD;QACxD,gBAAgB,EAAE,QAAQ,EAAE,YAAY,IAAI,QAAQ,EAAE,QAAQ;QAC9D,aAAa,EAAE,KAAK,EAAE,YAAY,IAAI,KAAK,EAAE,QAAQ;QACrD,iBAAiB;QACjB,kBAAkB,EAAE,yBAAyB;QAC7C,0BAA0B,EAAE,6BAA6B;QACzD,mCAAmC;QACnC,uBAAuB;KACxB,CAAC,CAAC;IAEH,4DAA4D;IAC5D,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,GAAG,EAAE,GAAG,eAAe,CAAC;QACvD,gBAAgB,EAAE,QAAQ,EAAE,QAAQ;QACpC,aAAa,EAAE,KAAK,EAAE,QAAQ;QAC9B,iBAAiB;QACjB,kBAAkB,EAAE,yBAAyB;QAC7C,0BAA0B,EAAE,6BAA6B;QACzD,mCAAmC;QACnC,uBAAuB;KACxB,CAAC,CAAC;IAEH,oEAAoE;IACpE,MAAM,EACJ,MAAM,EAAE,SAAS,EACjB,eAAe,EAAE,kBAAkB,EACnC,GAAG,EAAE,MAAM,GACZ,GAAG,eAAe,CAAC;QAClB,gBAAgB,EAAE,QAAQ,EAAE,QAAQ;QACpC,aAAa,EAAE,KAAK,EAAE,QAAQ;QAC9B,iBAAiB;QACjB,kBAAkB,EAAE,qBAAqB;QACzC,0BAA0B,EAAE,6BAA6B;QACzD,mCAAmC;QACnC,uBAAuB;KACxB,CAAC,CAAC;IAEH,OAAO;QACL,SAAS,EAAE;YACT,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,wBAAwB;YACzC,GAAG,EAAE,YAAY;SAClB;QACD,KAAK,EAAE;YACL,MAAM;YACN,eAAe;YACf,GAAG;SACJ;QACD,GAAG,EAAE;YACH,MAAM,EAAE,SAAS;YACjB,eAAe,EAAE,kBAAkB;YACnC,GAAG,EAAE,MAAM;SACZ;KACF,CAAC;AACJ,CAAC,CAAC;AAxEW,QAAA,8BAA8B,kCAwEzC;AAEF;;;;;;;GAOG;AACI,MAAM,4BAA4B,GAAG,CAC1C,EACE,SAAS,EAAE,eAAe,GACwB,EACpD,UAA6C,EAC7C,EAAE;IACF,OAAO;QACL,MAAM,EAAE,IAAI,wBAAS,CAAC,eAAe,EAAE,MAAM,IAAI,GAAG,CAAC;aAClD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;aACvB,QAAQ,EAAE;QACb,eAAe,EAAE,eAAe,EAAE,eAAe;YAC/C,CAAC,CAAC,IAAI,wBAAS,CAAC,eAAe,CAAC,eAAe,CAAC;iBAC3C,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,GAAG,CAAC;iBACvC,QAAQ,EAAE;YACf,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,eAAe,EAAE,GAAG;YACvB,CAAC,CAAC,IAAI,wBAAS,CAAC,eAAe,CAAC,GAAG,CAAC;iBAC/B,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,GAAG,CAAC;iBAC3B,QAAQ,EAAE;YACf,CAAC,CAAC,IAAI;KACT,CAAC;AACJ,CAAC,CAAC;AArBW,QAAA,4BAA4B,gCAqBvC;AAEK,MAAM,sBAAsB,GAAG,CACpC,MAAyD,EACzD,UAA6C,EAC7C,EAAE;IACF,OAAO;QACL,MAAM,EAAE,IAAI,wBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;QAC3E,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,eAAe;YACzC,CAAC,CAAC,IAAI,wBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC;iBACtC,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,GAAG,CAAC;iBACvC,QAAQ,EAAE;YACf,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG;YACjB,CAAC,CAAC,IAAI,wBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE;YACtE,CAAC,CAAC,IAAI;KACT,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,sBAAsB,0BAejC;AAEF,qFAAqF;AAC9E,MAAM,kBAAkB,GAAG,CAChC,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAS,EACpD,oBAAkC,EAClC,qBAAmC,EACnC,EAAE;IACF,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW,EAAE;QAC1B,OAAO,IAAI,CAAC;KACb;IACD,+EAA+E;IAC/E,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,GACrC,KAAK,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO;QACtC,CAAC,CAAC,oBAAoB;QACtB,CAAC,CAAC,qBAAqB,CAAC;IAC5B,MAAM,qBAAqB,GAAG,eAAe,CAC3C,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,KAAK,CAAC,QAAQ,CACrB,CAAC;IAEF,OAAO;QACL,MAAM,EAAE,qBAAqB,CAAC,QAAQ,EAAE;QACxC,eAAe,EAAE,YAAY;YAC3B,CAAC,CAAC,qBAAqB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE;YACtD,CAAC,CAAC,IAAI;QACR,GAAG,EAAE,eAAe;YAClB,CAAC,CAAC,qBAAqB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,EAAE;YACzD,CAAC,CAAC,IAAI;KACT,CAAC;AACJ,CAAC,CAAC;AA3BW,QAAA,kBAAkB,sBA2B7B;AAEK,MAAM,kBAAkB,GAAG,CAChC,aAA8C,EAC9C,wBAAyE,EACzE,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,EAAS,EAClE,EAAE;IACF,8FAA8F;IAC9F,IAAI,KAAK,EAAE,KAAK,EAAE,OAAO,KAAK,WAAW,EAAE;QACzC,OAAO;YACL,eAAe,EAAE,aAAa,CAAC,eAAe;YAC9C,GAAG,EAAE,aAAa,CAAC,GAAG;SACvB,CAAC;KACH;IACD,OAAO;QACL,eAAe,EACb,aAAa,CAAC,eAAe,IAAI,wBAAwB,CAAC,eAAe;YACvE,CAAC,CAAC,IAAI,wBAAS,CAAC,aAAa,CAAC,eAAe,CAAC;iBACzC,KAAK,CAAC,wBAAwB,CAAC,eAAe,CAAC;iBAC/C,QAAQ,EAAE;YACf,CAAC,CAAC,IAAI;QACV,GAAG,EACD,aAAa,CAAC,GAAG,IAAI,wBAAwB,CAAC,GAAG;YAC/C,CAAC,CAAC,IAAI,wBAAS,CAAC,aAAa,CAAC,GAAG,CAAC;iBAC7B,KAAK,CAAC,wBAAwB,CAAC,GAAG,CAAC;iBACnC,QAAQ,EAAE;YACf,CAAC,CAAC,IAAI;KACX,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,kBAAkB,sBA0B7B;AAEK,MAAM,YAAY,GAAG,CAAC,UAAkB,EAAE,eAAuB,EAAE,EAAE,CAC1E,IAAI,wBAAS,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;AAD/C,QAAA,YAAY,gBACmC;AAErD,MAAM,QAAQ,GAAG,CACtB,cAAqD,EACrD,UAA6C,EAC7C,EAAE,CAAC,CAAC;IACJ,eAAe,EACb,cAAc,CAAC,eAAe,IAAI,UAAU,CAAC,eAAe;QAC1D,CAAC,CAAC,IAAI,wBAAS,CAAC,UAAU,CAAC,eAAe,CAAC;aACtC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAC;aACrC,QAAQ,EAAE;QACf,CAAC,CAAC,IAAI;IACV,GAAG,EACD,cAAc,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG;QAClC,CAAC,CAAC,IAAI,wBAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;QACpE,CAAC,CAAC,IAAI;CACX,CAAC,CAAC;AAdU,QAAA,QAAQ,YAclB;AAEH;;;;;;GAMG;AACI,MAAM,sBAAsB,GAAG,CACpC,cAAqD,EACrD,UAA6C,EAC9B,EAAE;IACjB,MAAM,IAAI,GAAG,IAAA,gBAAQ,EAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IAElD,IAAI,IAAI,CAAC,eAAe,IAAI,UAAU,CAAC,eAAe,EAAE;QACtD,OAAO,IAAI,wBAAS,CAAC,IAAI,CAAC,eAAe,CAAC;aACvC,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC;aAC/B,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,EAAE;aACL,QAAQ,EAAE,CAAC;KACf;IAED,IAAI,IAAI,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE;QAC9B,OAAO,IAAI,wBAAS,CAAC,IAAI,CAAC,GAAG,CAAC;aAC3B,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC;aACnB,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,EAAE;aACL,QAAQ,EAAE,CAAC;KACf;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAvBW,QAAA,sBAAsB,0BAuBjC;AAEK,MAAM,kBAAkB,GAAG,CAChC,gCAAwC,EACxC,EAAE;IACF,IAAI,gCAAgC,GAAG,EAAE,EAAE;QACzC,OAAO,KAAK,CAAC;KACd;IACD,OAAO,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;AAC3D,CAAC,CAAC;AAPW,QAAA,kBAAkB,sBAO7B","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress, isSolanaChainId } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteMetadata,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  // If bridging and one of the chains is solana, require the dest wallet address\n  if (\n    partialRequest.destChainId &&\n    partialRequest.srcChainId &&\n    isSolanaChainId(partialRequest.destChainId) ===\n      !isSolanaChainId(partialRequest.srcChainId)\n  ) {\n    stringFields.push('destWalletAddress');\n    if (!partialRequest.destWalletAddress) {\n      return false;\n    }\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  approvalGasLimit,\n  tradeGasLimit,\n  l1GasFeesInHexWei,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  approvalGasLimit?: number | null;\n  tradeGasLimit?: number | null;\n  l1GasFeesInHexWei?: string | null;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const totalGasLimitInDec = new BigNumber(\n    tradeGasLimit?.toString() ?? '0',\n  ).plus(approvalGasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote: { approval, trade, l1GasFeesInHexWei },\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate): QuoteMetadata['gasFee'] => {\n  // Estimated gas fees spent after receiving refunds, this is shown to the user\n  const {\n    amount: amountEffective,\n    valueInCurrency: valueInCurrencyEffective,\n    usd: usdEffective,\n  } = calcTotalGasFee({\n    // Fallback to gasLimit if effectiveGas is not available\n    approvalGasLimit: approval?.effectiveGas ?? approval?.gasLimit,\n    tradeGasLimit: trade?.effectiveGas ?? trade?.gasLimit,\n    l1GasFeesInHexWei,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n\n  // Estimated total gas fee, including refunded fees (medium)\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    approvalGasLimit: approval?.gasLimit,\n    tradeGasLimit: trade?.gasLimit,\n    l1GasFeesInHexWei,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n\n  // Max gas fee (high), used to disable submission of the transaction\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    approvalGasLimit: approval?.gasLimit,\n    tradeGasLimit: trade?.gasLimit,\n    l1GasFeesInHexWei,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n\n  return {\n    effective: {\n      amount: amountEffective,\n      valueInCurrency: valueInCurrencyEffective,\n      usd: usdEffective,\n    },\n    total: {\n      amount,\n      valueInCurrency,\n      usd,\n    },\n    max: {\n      amount: amountMax,\n      valueInCurrency: valueInCurrencyMax,\n      usd: usdMax,\n    },\n  };\n};\n\n/**\n * Calculates the total estimated network fees for the bridge transaction\n *\n * @param gasFee - The gas fee for the bridge transaction\n * @param gasFee.effective - The fee to display to the user. If not available, this is equal to the gasLimit (total)\n * @param relayerFee - The relayer fee paid to bridge providers\n * @returns The total estimated network fee for the bridge transaction, including the relayer fee paid to bridge providers\n */\nexport const calcTotalEstimatedNetworkFee = (\n  {\n    effective: gasFeeToDisplay,\n  }: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFeeToDisplay?.amount ?? '0')\n      .plus(relayerFee.amount)\n      .toString(),\n    valueInCurrency: gasFeeToDisplay?.valueInCurrency\n      ? new BigNumber(gasFeeToDisplay.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFeeToDisplay?.usd\n      ? new BigNumber(gasFeeToDisplay.usd)\n          .plus(relayerFee.usd || '0')\n          .toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.max.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.max.valueInCurrency\n      ? new BigNumber(gasFee.max.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.max.usd\n      ? new BigNumber(gasFee.max.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/quote.d.cts b/dist/utils/quote.d.cts
index 46f7306df530d3d320bc1beb4e90493b302e9364..3ffbf68992a1d09e3e6c5dda44577da68b576119 100644
--- a/dist/utils/quote.d.cts
+++ b/dist/utils/quote.d.cts
@@ -1,5 +1,5 @@
 import { BigNumber } from "bignumber.js";
-import type { ExchangeRate, GenericQuoteRequest, L1GasFees, Quote, QuoteResponse, SolanaFees } from "../types.cjs";
+import type { ExchangeRate, GenericQuoteRequest, L1GasFees, Quote, QuoteMetadata, QuoteResponse, SolanaFees } from "../types.cjs";
 export declare const isValidQuoteRequest: (partialRequest: Partial<GenericQuoteRequest>, requireAmount?: boolean) => partialRequest is GenericQuoteRequest;
 /**
  * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps
@@ -28,20 +28,21 @@ export declare const calcRelayerFee: ({ quote, trade }: QuoteResponse, { exchang
     valueInCurrency: BigNumber | null;
     usd: BigNumber | null;
 };
-export declare const calcEstimatedAndMaxTotalGasFee: ({ bridgeQuote, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }: {
+export declare const calcEstimatedAndMaxTotalGasFee: ({ bridgeQuote: { approval, trade, l1GasFeesInHexWei }, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }: {
     bridgeQuote: QuoteResponse & L1GasFees;
     estimatedBaseFeeInDecGwei: string;
     maxFeePerGasInDecGwei: string;
     maxPriorityFeePerGasInDecGwei: string;
-} & ExchangeRate) => {
-    amount: string;
-    amountMax: string;
-    valueInCurrency: string | null;
-    valueInCurrencyMax: string | null;
-    usd: string | null;
-    usdMax: string | null;
-};
-export declare const calcTotalEstimatedNetworkFee: (gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>, relayerFee: ReturnType<typeof calcRelayerFee>) => {
+} & ExchangeRate) => QuoteMetadata['gasFee'];
+/**
+ * Calculates the total estimated network fees for the bridge transaction
+ *
+ * @param gasFee - The gas fee for the bridge transaction
+ * @param gasFee.effective - The fee to display to the user. If not available, this is equal to the gasLimit (total)
+ * @param relayerFee - The relayer fee paid to bridge providers
+ * @returns The total estimated network fee for the bridge transaction, including the relayer fee paid to bridge providers
+ */
+export declare const calcTotalEstimatedNetworkFee: ({ effective: gasFeeToDisplay, }: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>, relayerFee: ReturnType<typeof calcRelayerFee>) => {
     amount: string;
     valueInCurrency: string | null;
     usd: string | null;
diff --git a/dist/utils/quote.d.cts.map b/dist/utils/quote.d.cts.map
index c1d90ce3769c60c15ee1f3f1c34c2b9515155144..0bd98aa35fc1a4009112b5c36f283948677ca272 100644
--- a/dist/utils/quote.d.cts.map
+++ b/dist/utils/quote.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"quote.d.cts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEAsD7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA4CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;;;;;;;;CA4BtC,CAAC;AAEF,eAAO,MAAM,4BAA4B,WAC/B,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"quote.d.cts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEAsD7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA8CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;qBACpB,aAAa,CAAC,QAAQ,CA4DxC,CAAC;AAEF;;;;;;;GAOG;AACH,eAAO,MAAM,4BAA4B,oCAGpC,WAAW,qCAAqC,CAAC,cACxC,WAAW,qBAAqB,CAAC;;;;CAiB9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/quote.d.mts b/dist/utils/quote.d.mts
index 32daa087ba7a007fa0988da474ffc7eca208b5e1..e2418afc1a7070974263eca6f6aaf4a3f9982728 100644
--- a/dist/utils/quote.d.mts
+++ b/dist/utils/quote.d.mts
@@ -1,5 +1,5 @@
 import { BigNumber } from "bignumber.js";
-import type { ExchangeRate, GenericQuoteRequest, L1GasFees, Quote, QuoteResponse, SolanaFees } from "../types.mjs";
+import type { ExchangeRate, GenericQuoteRequest, L1GasFees, Quote, QuoteMetadata, QuoteResponse, SolanaFees } from "../types.mjs";
 export declare const isValidQuoteRequest: (partialRequest: Partial<GenericQuoteRequest>, requireAmount?: boolean) => partialRequest is GenericQuoteRequest;
 /**
  * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps
@@ -28,20 +28,21 @@ export declare const calcRelayerFee: ({ quote, trade }: QuoteResponse, { exchang
     valueInCurrency: BigNumber | null;
     usd: BigNumber | null;
 };
-export declare const calcEstimatedAndMaxTotalGasFee: ({ bridgeQuote, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }: {
+export declare const calcEstimatedAndMaxTotalGasFee: ({ bridgeQuote: { approval, trade, l1GasFeesInHexWei }, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }: {
     bridgeQuote: QuoteResponse & L1GasFees;
     estimatedBaseFeeInDecGwei: string;
     maxFeePerGasInDecGwei: string;
     maxPriorityFeePerGasInDecGwei: string;
-} & ExchangeRate) => {
-    amount: string;
-    amountMax: string;
-    valueInCurrency: string | null;
-    valueInCurrencyMax: string | null;
-    usd: string | null;
-    usdMax: string | null;
-};
-export declare const calcTotalEstimatedNetworkFee: (gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>, relayerFee: ReturnType<typeof calcRelayerFee>) => {
+} & ExchangeRate) => QuoteMetadata['gasFee'];
+/**
+ * Calculates the total estimated network fees for the bridge transaction
+ *
+ * @param gasFee - The gas fee for the bridge transaction
+ * @param gasFee.effective - The fee to display to the user. If not available, this is equal to the gasLimit (total)
+ * @param relayerFee - The relayer fee paid to bridge providers
+ * @returns The total estimated network fee for the bridge transaction, including the relayer fee paid to bridge providers
+ */
+export declare const calcTotalEstimatedNetworkFee: ({ effective: gasFeeToDisplay, }: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>, relayerFee: ReturnType<typeof calcRelayerFee>) => {
     amount: string;
     valueInCurrency: string | null;
     usd: string | null;
diff --git a/dist/utils/quote.d.mts.map b/dist/utils/quote.d.mts.map
index adfdb7ce601d473b94e90e10a689f45f09ce0cae..289cd0af8151c04fd707c8612fc294d123ad53f4 100644
--- a/dist/utils/quote.d.mts.map
+++ b/dist/utils/quote.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"quote.d.mts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEAsD7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA4CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;;;;;;;;CA4BtC,CAAC;AAEF,eAAO,MAAM,4BAA4B,WAC/B,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"quote.d.mts","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,qBAAqB;AAGzC,OAAO,KAAK,EACV,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,KAAK,EACL,aAAa,EACb,aAAa,EACb,UAAU,EACX,qBAAiB;AAElB,eAAO,MAAM,mBAAmB,mBACd,QAAQ,mBAAmB,CAAC,mEAsD7C,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,kBAAkB,UAAW,aAAa,CAAC,OAAO,CAAC,WACD,CAAC;AAOhE,eAAO,MAAM,yBAAyB,gBACvB,aAAa,GAAG,UAAU,qCACJ,YAAY;;;;CAahD,CAAC;AAEF,eAAO,MAAM,YAAY,mCACS,KAAK,qCACF,YAAY;;;;CAehD,CAAC;AAEF,eAAO,MAAM,cAAc,0CACc,KAAK,qCACT,YAAY;;;;CAoBhD,CAAC;AAEF,eAAO,MAAM,cAAc,qBACP,aAAa,qCACI,YAAY;;;;CAuBhD,CAAC;AA8CF,eAAO,MAAM,8BAA8B;iBAQ5B,aAAa,GAAG,SAAS;+BACX,MAAM;2BACV,MAAM;mCACE,MAAM;qBACpB,aAAa,CAAC,QAAQ,CA4DxC,CAAC;AAEF;;;;;;;GAOG;AACH,eAAO,MAAM,4BAA4B,oCAGpC,WAAW,qCAAqC,CAAC,cACxC,WAAW,qBAAqB,CAAC;;;;CAiB9C,CAAC;AAEF,eAAO,MAAM,sBAAsB,WACzB,WAAW,qCAAqC,CAAC,cAC7C,WAAW,qBAAqB,CAAC;;;;CAa9C,CAAC;AAGF,eAAO,MAAM,kBAAkB,kDACkB,KAAK,wBAC9B,YAAY,yBACX,YAAY;;;;QAwBpC,CAAC;AAEF,eAAO,MAAM,kBAAkB,kBACd,WAAW,mBAAmB,CAAC,4BACpB,WAAW,mCAAmC,CAAC,+DACZ,KAAK;;;CAuBnE,CAAC;AAEF,eAAO,MAAM,YAAY,eAAgB,MAAM,mBAAmB,MAAM,WACb,CAAC;AAE5D,eAAO,MAAM,QAAQ,mBACH,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC;;;CAY7C,CAAC;AAEH;;;;;;GAMG;AACH,eAAO,MAAM,sBAAsB,mBACjB,WAAW,yBAAyB,CAAC,cACzC,WAAW,qBAAqB,CAAC,KAC5C,MAAM,GAAG,IAoBX,CAAC;AAEF,eAAO,MAAM,kBAAkB,qCACK,MAAM,WAMzC,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/quote.mjs b/dist/utils/quote.mjs
index 0b0454b19b5e241adf5a5fac7490da5374f23fd1..c58d15c1abdb6554487b7080980f0971801f25fe 100644
--- a/dist/utils/quote.mjs
+++ b/dist/utils/quote.mjs
@@ -113,9 +113,8 @@ export const calcRelayerFee = ({ quote, trade }, { exchangeRate, usdExchangeRate
         usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,
     };
 };
-const calcTotalGasFee = ({ bridgeQuote, feePerGasInDecGwei, priorityFeePerGasInDecGwei, nativeToDisplayCurrencyExchangeRate, nativeToUsdExchangeRate, }) => {
-    const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;
-    const totalGasLimitInDec = new BigNumber(trade.gasLimit?.toString() ?? '0').plus(approval?.gasLimit?.toString() ?? '0');
+const calcTotalGasFee = ({ approvalGasLimit, tradeGasLimit, l1GasFeesInHexWei, feePerGasInDecGwei, priorityFeePerGasInDecGwei, nativeToDisplayCurrencyExchangeRate, nativeToUsdExchangeRate, }) => {
+    const totalGasLimitInDec = new BigNumber(tradeGasLimit?.toString() ?? '0').plus(approvalGasLimit?.toString() ?? '0');
     const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(priorityFeePerGasInDecGwei);
     const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));
     const gasFeesInDecGwei = totalGasLimitInDec
@@ -134,53 +133,91 @@ const calcTotalGasFee = ({ bridgeQuote, feePerGasInDecGwei, priorityFeePerGasInD
         usd: gasFeesInUSD?.toString() ?? null,
     };
 };
-export const calcEstimatedAndMaxTotalGasFee = ({ bridgeQuote, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }) => {
+export const calcEstimatedAndMaxTotalGasFee = ({ bridgeQuote: { approval, trade, l1GasFeesInHexWei }, estimatedBaseFeeInDecGwei, maxFeePerGasInDecGwei, maxPriorityFeePerGasInDecGwei, exchangeRate: nativeToDisplayCurrencyExchangeRate, usdExchangeRate: nativeToUsdExchangeRate, }) => {
+    // Estimated gas fees spent after receiving refunds, this is shown to the user
+    const { amount: amountEffective, valueInCurrency: valueInCurrencyEffective, usd: usdEffective, } = calcTotalGasFee({
+        // Fallback to gasLimit if effectiveGas is not available
+        approvalGasLimit: approval?.effectiveGas ?? approval?.gasLimit,
+        tradeGasLimit: trade?.effectiveGas ?? trade?.gasLimit,
+        l1GasFeesInHexWei,
+        feePerGasInDecGwei: estimatedBaseFeeInDecGwei,
+        priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,
+        nativeToDisplayCurrencyExchangeRate,
+        nativeToUsdExchangeRate,
+    });
+    // Estimated total gas fee, including refunded fees (medium)
     const { amount, valueInCurrency, usd } = calcTotalGasFee({
-        bridgeQuote,
+        approvalGasLimit: approval?.gasLimit,
+        tradeGasLimit: trade?.gasLimit,
+        l1GasFeesInHexWei,
         feePerGasInDecGwei: estimatedBaseFeeInDecGwei,
         priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,
         nativeToDisplayCurrencyExchangeRate,
         nativeToUsdExchangeRate,
     });
+    // Max gas fee (high), used to disable submission of the transaction
     const { amount: amountMax, valueInCurrency: valueInCurrencyMax, usd: usdMax, } = calcTotalGasFee({
-        bridgeQuote,
+        approvalGasLimit: approval?.gasLimit,
+        tradeGasLimit: trade?.gasLimit,
+        l1GasFeesInHexWei,
         feePerGasInDecGwei: maxFeePerGasInDecGwei,
         priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,
         nativeToDisplayCurrencyExchangeRate,
         nativeToUsdExchangeRate,
     });
     return {
-        amount,
-        amountMax,
-        valueInCurrency,
-        valueInCurrencyMax,
-        usd,
-        usdMax,
+        effective: {
+            amount: amountEffective,
+            valueInCurrency: valueInCurrencyEffective,
+            usd: usdEffective,
+        },
+        total: {
+            amount,
+            valueInCurrency,
+            usd,
+        },
+        max: {
+            amount: amountMax,
+            valueInCurrency: valueInCurrencyMax,
+            usd: usdMax,
+        },
     };
 };
-export const calcTotalEstimatedNetworkFee = (gasFee, relayerFee) => {
+/**
+ * Calculates the total estimated network fees for the bridge transaction
+ *
+ * @param gasFee - The gas fee for the bridge transaction
+ * @param gasFee.effective - The fee to display to the user. If not available, this is equal to the gasLimit (total)
+ * @param relayerFee - The relayer fee paid to bridge providers
+ * @returns The total estimated network fee for the bridge transaction, including the relayer fee paid to bridge providers
+ */
+export const calcTotalEstimatedNetworkFee = ({ effective: gasFeeToDisplay, }, relayerFee) => {
     return {
-        amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),
-        valueInCurrency: gasFee.valueInCurrency
-            ? new BigNumber(gasFee.valueInCurrency)
+        amount: new BigNumber(gasFeeToDisplay?.amount ?? '0')
+            .plus(relayerFee.amount)
+            .toString(),
+        valueInCurrency: gasFeeToDisplay?.valueInCurrency
+            ? new BigNumber(gasFeeToDisplay.valueInCurrency)
                 .plus(relayerFee.valueInCurrency || '0')
                 .toString()
             : null,
-        usd: gasFee.usd
-            ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()
+        usd: gasFeeToDisplay?.usd
+            ? new BigNumber(gasFeeToDisplay.usd)
+                .plus(relayerFee.usd || '0')
+                .toString()
             : null,
     };
 };
 export const calcTotalMaxNetworkFee = (gasFee, relayerFee) => {
     return {
-        amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),
-        valueInCurrency: gasFee.valueInCurrencyMax
-            ? new BigNumber(gasFee.valueInCurrencyMax)
+        amount: new BigNumber(gasFee.max.amount).plus(relayerFee.amount).toString(),
+        valueInCurrency: gasFee.max.valueInCurrency
+            ? new BigNumber(gasFee.max.valueInCurrency)
                 .plus(relayerFee.valueInCurrency || '0')
                 .toString()
             : null,
-        usd: gasFee.usdMax
-            ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()
+        usd: gasFee.max.usd
+            ? new BigNumber(gasFee.max.usd).plus(relayerFee.usd || '0').toString()
             : null,
     };
 };
diff --git a/dist/utils/quote.mjs.map b/dist/utils/quote.mjs.map
index 87e1de95b4f08743fdc24c3d2fcfd96ee943cc79..549a2b8c1a3c4ef9c298e2162ff96d9cc2311539 100644
--- a/dist/utils/quote.mjs.map
+++ b/dist/utils/quote.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"quote.mjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress, isSolanaChainId } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  // If bridging and one of the chains is solana, require the dest wallet address\n  if (\n    partialRequest.destChainId &&\n    partialRequest.srcChainId &&\n    isSolanaChainId(partialRequest.destChainId) ===\n      !isSolanaChainId(partialRequest.srcChainId)\n  ) {\n    stringFields.push('destWalletAddress');\n    if (!partialRequest.destWalletAddress) {\n      return false;\n    }\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  bridgeQuote,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const { approval, trade, l1GasFeesInHexWei } = bridgeQuote;\n\n  const totalGasLimitInDec = new BigNumber(\n    trade.gasLimit?.toString() ?? '0',\n  ).plus(approval?.gasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote,\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate) => {\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    bridgeQuote,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n  return {\n    amount,\n    amountMax,\n    valueInCurrency,\n    valueInCurrencyMax,\n    usd,\n    usdMax,\n  };\n};\n\nexport const calcTotalEstimatedNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrency\n      ? new BigNumber(gasFee.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usd\n      ? new BigNumber(gasFee.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.amountMax).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.valueInCurrencyMax\n      ? new BigNumber(gasFee.valueInCurrencyMax)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.usdMax\n      ? new BigNumber(gasFee.usdMax).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"quote.mjs","sourceRoot":"","sources":["../../src/utils/quote.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  toHex,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport { BigNumber } from 'bignumber.js';\n\nimport { isNativeAddress, isSolanaChainId } from './bridge';\nimport type {\n  ExchangeRate,\n  GenericQuoteRequest,\n  L1GasFees,\n  Quote,\n  QuoteMetadata,\n  QuoteResponse,\n  SolanaFees,\n} from '../types';\n\nexport const isValidQuoteRequest = (\n  partialRequest: Partial<GenericQuoteRequest>,\n  requireAmount = true,\n): partialRequest is GenericQuoteRequest => {\n  const stringFields = [\n    'srcTokenAddress',\n    'destTokenAddress',\n    'srcChainId',\n    'destChainId',\n    'walletAddress',\n  ];\n  if (requireAmount) {\n    stringFields.push('srcTokenAmount');\n  }\n  // If bridging and one of the chains is solana, require the dest wallet address\n  if (\n    partialRequest.destChainId &&\n    partialRequest.srcChainId &&\n    isSolanaChainId(partialRequest.destChainId) ===\n      !isSolanaChainId(partialRequest.srcChainId)\n  ) {\n    stringFields.push('destWalletAddress');\n    if (!partialRequest.destWalletAddress) {\n      return false;\n    }\n  }\n  const numberFields = [];\n  // if slippage is defined, require it to be a number\n  if (partialRequest.slippage !== undefined) {\n    numberFields.push('slippage');\n  }\n\n  return (\n    stringFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'string' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        partialRequest[field as keyof typeof partialRequest] !== '' &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    numberFields.every(\n      (field) =>\n        field in partialRequest &&\n        typeof partialRequest[field as keyof typeof partialRequest] ===\n          'number' &&\n        partialRequest[field as keyof typeof partialRequest] !== undefined &&\n        !isNaN(Number(partialRequest[field as keyof typeof partialRequest])) &&\n        partialRequest[field as keyof typeof partialRequest] !== null,\n    ) &&\n    (requireAmount\n      ? Boolean((partialRequest.srcTokenAmount ?? '').match(/^[1-9]\\d*$/u))\n      : true)\n  );\n};\n\n/**\n * Generates a pseudo-unique string that identifies each quote by aggregator, bridge, and steps\n *\n * @param quote - The quote to generate an identifier for\n * @returns A pseudo-unique string that identifies the quote\n */\nexport const getQuoteIdentifier = (quote: QuoteResponse['quote']) =>\n  `${quote.bridgeId}-${quote.bridges[0]}-${quote.steps.length}`;\n\nconst calcTokenAmount = (value: string | BigNumber, decimals: number) => {\n  const divisor = new BigNumber(10).pow(decimals ?? 0);\n  return new BigNumber(value).div(divisor);\n};\n\nexport const calcSolanaTotalNetworkFee = (\n  bridgeQuote: QuoteResponse & SolanaFees,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const { solanaFeesInLamports } = bridgeQuote;\n  const solanaFeeInNative = calcTokenAmount(solanaFeesInLamports ?? '0', 9);\n  return {\n    amount: solanaFeeInNative.toString(),\n    valueInCurrency: exchangeRate\n      ? solanaFeeInNative.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? solanaFeeInNative.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcToAmount = (\n  { destTokenAmount, destAsset }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const normalizedDestAmount = calcTokenAmount(\n    destTokenAmount,\n    destAsset.decimals,\n  );\n  return {\n    amount: normalizedDestAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedDestAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedDestAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcSentAmount = (\n  { srcTokenAmount, srcAsset, feeData }: Quote,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  // Find all fees that will be taken from the src token\n  const srcTokenFees = Object.values(feeData).filter(\n    (fee) => fee && fee.amount && fee.asset?.assetId === srcAsset.assetId,\n  );\n  const sentAmount = srcTokenFees.reduce(\n    (acc, { amount }) => acc.plus(amount),\n    new BigNumber(srcTokenAmount),\n  );\n  const normalizedSentAmount = calcTokenAmount(sentAmount, srcAsset.decimals);\n  return {\n    amount: normalizedSentAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedSentAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedSentAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcRelayerFee = (\n  { quote, trade }: QuoteResponse,\n  { exchangeRate, usdExchangeRate }: ExchangeRate,\n) => {\n  const relayerFeeAmount = new BigNumber(\n    convertHexToDecimal(trade.value || '0x0'),\n  );\n  let relayerFeeInNative = calcTokenAmount(relayerFeeAmount, 18);\n\n  // Subtract srcAmount and other fees from trade value if srcAsset is native\n  if (isNativeAddress(quote.srcAsset.address)) {\n    const sentAmountInNative = calcSentAmount(quote, {\n      exchangeRate,\n      usdExchangeRate,\n    }).amount;\n    relayerFeeInNative = relayerFeeInNative.minus(sentAmountInNative);\n  }\n\n  return {\n    amount: relayerFeeInNative,\n    valueInCurrency: exchangeRate\n      ? relayerFeeInNative.times(exchangeRate)\n      : null,\n    usd: usdExchangeRate ? relayerFeeInNative.times(usdExchangeRate) : null,\n  };\n};\n\nconst calcTotalGasFee = ({\n  approvalGasLimit,\n  tradeGasLimit,\n  l1GasFeesInHexWei,\n  feePerGasInDecGwei,\n  priorityFeePerGasInDecGwei,\n  nativeToDisplayCurrencyExchangeRate,\n  nativeToUsdExchangeRate,\n}: {\n  approvalGasLimit?: number | null;\n  tradeGasLimit?: number | null;\n  l1GasFeesInHexWei?: string | null;\n  feePerGasInDecGwei: string;\n  priorityFeePerGasInDecGwei: string;\n  nativeToDisplayCurrencyExchangeRate?: string;\n  nativeToUsdExchangeRate?: string;\n}) => {\n  const totalGasLimitInDec = new BigNumber(\n    tradeGasLimit?.toString() ?? '0',\n  ).plus(approvalGasLimit?.toString() ?? '0');\n\n  const totalFeePerGasInDecGwei = new BigNumber(feePerGasInDecGwei).plus(\n    priorityFeePerGasInDecGwei,\n  );\n  const l1GasFeesInDecGWei = weiHexToGweiDec(toHex(l1GasFeesInHexWei ?? '0'));\n  const gasFeesInDecGwei = totalGasLimitInDec\n    .times(totalFeePerGasInDecGwei)\n    .plus(l1GasFeesInDecGWei);\n  const gasFeesInDecEth = gasFeesInDecGwei.times(new BigNumber(10).pow(-9));\n\n  const gasFeesInDisplayCurrency = nativeToDisplayCurrencyExchangeRate\n    ? gasFeesInDecEth.times(nativeToDisplayCurrencyExchangeRate.toString())\n    : null;\n  const gasFeesInUSD = nativeToUsdExchangeRate\n    ? gasFeesInDecEth.times(nativeToUsdExchangeRate.toString())\n    : null;\n\n  return {\n    amount: gasFeesInDecEth.toString(),\n    valueInCurrency: gasFeesInDisplayCurrency?.toString() ?? null,\n    usd: gasFeesInUSD?.toString() ?? null,\n  };\n};\n\nexport const calcEstimatedAndMaxTotalGasFee = ({\n  bridgeQuote: { approval, trade, l1GasFeesInHexWei },\n  estimatedBaseFeeInDecGwei,\n  maxFeePerGasInDecGwei,\n  maxPriorityFeePerGasInDecGwei,\n  exchangeRate: nativeToDisplayCurrencyExchangeRate,\n  usdExchangeRate: nativeToUsdExchangeRate,\n}: {\n  bridgeQuote: QuoteResponse & L1GasFees;\n  estimatedBaseFeeInDecGwei: string;\n  maxFeePerGasInDecGwei: string;\n  maxPriorityFeePerGasInDecGwei: string;\n} & ExchangeRate): QuoteMetadata['gasFee'] => {\n  // Estimated gas fees spent after receiving refunds, this is shown to the user\n  const {\n    amount: amountEffective,\n    valueInCurrency: valueInCurrencyEffective,\n    usd: usdEffective,\n  } = calcTotalGasFee({\n    // Fallback to gasLimit if effectiveGas is not available\n    approvalGasLimit: approval?.effectiveGas ?? approval?.gasLimit,\n    tradeGasLimit: trade?.effectiveGas ?? trade?.gasLimit,\n    l1GasFeesInHexWei,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n\n  // Estimated total gas fee, including refunded fees (medium)\n  const { amount, valueInCurrency, usd } = calcTotalGasFee({\n    approvalGasLimit: approval?.gasLimit,\n    tradeGasLimit: trade?.gasLimit,\n    l1GasFeesInHexWei,\n    feePerGasInDecGwei: estimatedBaseFeeInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n\n  // Max gas fee (high), used to disable submission of the transaction\n  const {\n    amount: amountMax,\n    valueInCurrency: valueInCurrencyMax,\n    usd: usdMax,\n  } = calcTotalGasFee({\n    approvalGasLimit: approval?.gasLimit,\n    tradeGasLimit: trade?.gasLimit,\n    l1GasFeesInHexWei,\n    feePerGasInDecGwei: maxFeePerGasInDecGwei,\n    priorityFeePerGasInDecGwei: maxPriorityFeePerGasInDecGwei,\n    nativeToDisplayCurrencyExchangeRate,\n    nativeToUsdExchangeRate,\n  });\n\n  return {\n    effective: {\n      amount: amountEffective,\n      valueInCurrency: valueInCurrencyEffective,\n      usd: usdEffective,\n    },\n    total: {\n      amount,\n      valueInCurrency,\n      usd,\n    },\n    max: {\n      amount: amountMax,\n      valueInCurrency: valueInCurrencyMax,\n      usd: usdMax,\n    },\n  };\n};\n\n/**\n * Calculates the total estimated network fees for the bridge transaction\n *\n * @param gasFee - The gas fee for the bridge transaction\n * @param gasFee.effective - The fee to display to the user. If not available, this is equal to the gasLimit (total)\n * @param relayerFee - The relayer fee paid to bridge providers\n * @returns The total estimated network fee for the bridge transaction, including the relayer fee paid to bridge providers\n */\nexport const calcTotalEstimatedNetworkFee = (\n  {\n    effective: gasFeeToDisplay,\n  }: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFeeToDisplay?.amount ?? '0')\n      .plus(relayerFee.amount)\n      .toString(),\n    valueInCurrency: gasFeeToDisplay?.valueInCurrency\n      ? new BigNumber(gasFeeToDisplay.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFeeToDisplay?.usd\n      ? new BigNumber(gasFeeToDisplay.usd)\n          .plus(relayerFee.usd || '0')\n          .toString()\n      : null,\n  };\n};\n\nexport const calcTotalMaxNetworkFee = (\n  gasFee: ReturnType<typeof calcEstimatedAndMaxTotalGasFee>,\n  relayerFee: ReturnType<typeof calcRelayerFee>,\n) => {\n  return {\n    amount: new BigNumber(gasFee.max.amount).plus(relayerFee.amount).toString(),\n    valueInCurrency: gasFee.max.valueInCurrency\n      ? new BigNumber(gasFee.max.valueInCurrency)\n          .plus(relayerFee.valueInCurrency || '0')\n          .toString()\n      : null,\n    usd: gasFee.max.usd\n      ? new BigNumber(gasFee.max.usd).plus(relayerFee.usd || '0').toString()\n      : null,\n  };\n};\n\n// Gas is included for some swap quotes and this is the value displayed in the client\nexport const calcIncludedTxFees = (\n  { gasIncluded, srcAsset, feeData: { txFee } }: Quote,\n  srcTokenExchangeRate: ExchangeRate,\n  destTokenExchangeRate: ExchangeRate,\n) => {\n  if (!txFee || !gasIncluded) {\n    return null;\n  }\n  // Use exchange rate of the token that is being used to pay for the transaction\n  const { exchangeRate, usdExchangeRate } =\n    txFee.asset.assetId === srcAsset.assetId\n      ? srcTokenExchangeRate\n      : destTokenExchangeRate;\n  const normalizedTxFeeAmount = calcTokenAmount(\n    txFee.amount,\n    txFee.asset.decimals,\n  );\n\n  return {\n    amount: normalizedTxFeeAmount.toString(),\n    valueInCurrency: exchangeRate\n      ? normalizedTxFeeAmount.times(exchangeRate).toString()\n      : null,\n    usd: usdExchangeRate\n      ? normalizedTxFeeAmount.times(usdExchangeRate).toString()\n      : null,\n  };\n};\n\nexport const calcAdjustedReturn = (\n  toTokenAmount: ReturnType<typeof calcToAmount>,\n  totalEstimatedNetworkFee: ReturnType<typeof calcTotalEstimatedNetworkFee>,\n  { feeData: { txFee }, destAsset: { assetId: destAssetId } }: Quote,\n) => {\n  // If gas is included and is taken from the dest token, don't subtract network fee from return\n  if (txFee?.asset?.assetId === destAssetId) {\n    return {\n      valueInCurrency: toTokenAmount.valueInCurrency,\n      usd: toTokenAmount.usd,\n    };\n  }\n  return {\n    valueInCurrency:\n      toTokenAmount.valueInCurrency && totalEstimatedNetworkFee.valueInCurrency\n        ? new BigNumber(toTokenAmount.valueInCurrency)\n            .minus(totalEstimatedNetworkFee.valueInCurrency)\n            .toString()\n        : null,\n    usd:\n      toTokenAmount.usd && totalEstimatedNetworkFee.usd\n        ? new BigNumber(toTokenAmount.usd)\n            .minus(totalEstimatedNetworkFee.usd)\n            .toString()\n        : null,\n  };\n};\n\nexport const calcSwapRate = (sentAmount: string, destTokenAmount: string) =>\n  new BigNumber(destTokenAmount).div(sentAmount).toString();\n\nexport const calcCost = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n) => ({\n  valueInCurrency:\n    adjustedReturn.valueInCurrency && sentAmount.valueInCurrency\n      ? new BigNumber(sentAmount.valueInCurrency)\n          .minus(adjustedReturn.valueInCurrency)\n          .toString()\n      : null,\n  usd:\n    adjustedReturn.usd && sentAmount.usd\n      ? new BigNumber(sentAmount.usd).minus(adjustedReturn.usd).toString()\n      : null,\n});\n\n/**\n * Calculates the slippage absolute value percentage based on the adjusted return and sent amount.\n *\n * @param adjustedReturn - Adjusted return value\n * @param sentAmount - Sent amount value\n * @returns the slippage in percentage\n */\nexport const calcSlippagePercentage = (\n  adjustedReturn: ReturnType<typeof calcAdjustedReturn>,\n  sentAmount: ReturnType<typeof calcSentAmount>,\n): string | null => {\n  const cost = calcCost(adjustedReturn, sentAmount);\n\n  if (cost.valueInCurrency && sentAmount.valueInCurrency) {\n    return new BigNumber(cost.valueInCurrency)\n      .div(sentAmount.valueInCurrency)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  if (cost.usd && sentAmount.usd) {\n    return new BigNumber(cost.usd)\n      .div(sentAmount.usd)\n      .times(100)\n      .abs()\n      .toString();\n  }\n\n  return null;\n};\n\nexport const formatEtaInMinutes = (\n  estimatedProcessingTimeInSeconds: number,\n) => {\n  if (estimatedProcessingTimeInSeconds < 60) {\n    return `< 1`;\n  }\n  return (estimatedProcessingTimeInSeconds / 60).toFixed();\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/validators.cjs b/dist/utils/validators.cjs
index fae3620fa6f43081465e1b874eb6dc44f95dae83..46bab369e8c49e462e8d4dec9c339ed140637dec 100644
--- a/dist/utils/validators.cjs
+++ b/dist/utils/validators.cjs
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateQuoteResponse = exports.QuoteResponseSchema = exports.TxDataSchema = exports.QuoteSchema = exports.StepSchema = exports.ProtocolSchema = exports.FeeDataSchema = exports.validateSwapsTokenObject = exports.validateFeatureFlagsResponse = exports.PlatformConfigSchema = exports.PriceImpactThresholdSchema = exports.ChainConfigurationSchema = exports.BridgeAssetSchema = exports.truthyString = exports.ActionTypes = exports.FeatureId = exports.FeeType = void 0;
+exports.validateQuoteResponse = exports.QuoteResponseSchema = exports.TxDataSchema = exports.QuoteSchema = exports.StepSchema = exports.ProtocolSchema = exports.FeeDataSchema = exports.validateSwapsTokenObject = exports.validateFeatureFlagsResponse = exports.PlatformConfigSchema = exports.PriceImpactThresholdSchema = exports.ChainConfigurationSchema = exports.BridgeAssetSchema = exports.truthyString = exports.ActionTypes = exports.FeeType = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const superstruct_1 = require("@metamask/superstruct");
 const utils_1 = require("@metamask/utils");
@@ -10,10 +10,6 @@ var FeeType;
     FeeType["REFUEL"] = "refuel";
     FeeType["TX_FEE"] = "txFee";
 })(FeeType || (exports.FeeType = FeeType = {}));
-var FeatureId;
-(function (FeatureId) {
-    FeatureId["PERPS"] = "perps";
-})(FeatureId || (exports.FeatureId = FeatureId = {}));
 var ActionTypes;
 (function (ActionTypes) {
     ActionTypes["BRIDGE"] = "bridge";
@@ -69,18 +65,11 @@ exports.PriceImpactThresholdSchema = (0, superstruct_1.type)({
     gasless: (0, superstruct_1.number)(),
     normal: (0, superstruct_1.number)(),
 });
-const GenericQuoteRequestSchema = (0, superstruct_1.type)({
-    aggIds: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.string)())),
-    bridgeIds: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.string)())),
-    noFee: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
-});
-const FeatureIdSchema = (0, superstruct_1.enums)(Object.values(FeatureId));
 /**
  * This is the schema for the feature flags response from the RemoteFeatureFlagController
  */
 exports.PlatformConfigSchema = (0, superstruct_1.type)({
     priceImpactThreshold: (0, superstruct_1.optional)(exports.PriceImpactThresholdSchema),
-    quoteRequestOverrides: (0, superstruct_1.optional)((0, superstruct_1.record)(FeatureIdSchema, (0, superstruct_1.optional)(GenericQuoteRequestSchema))),
     minimumVersion: (0, superstruct_1.string)(),
     refreshRate: (0, superstruct_1.number)(),
     maxRefreshCount: (0, superstruct_1.number)(),
@@ -162,6 +151,7 @@ exports.TxDataSchema = (0, superstruct_1.type)({
     value: HexStringSchema,
     data: HexStringSchema,
     gasLimit: (0, superstruct_1.nullable)((0, superstruct_1.number)()),
+    effectiveGas: (0, superstruct_1.optional)((0, superstruct_1.number)()),
 });
 exports.QuoteResponseSchema = (0, superstruct_1.type)({
     quote: exports.QuoteSchema,
diff --git a/dist/utils/validators.cjs.map b/dist/utils/validators.cjs.map
index 77d6f3b26d62f0e764674b0fe76e7a31ab582379..4e65d38a33e372f4d53bcdceda665474667665e6 100644
--- a/dist/utils/validators.cjs.map
+++ b/dist/utils/validators.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"validators.cjs","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import { isValidHexAddress } from '@metamask/controller-utils';\nimport type { Infer } from '@metamask/superstruct';\nimport {\n  string,\n  boolean,\n  number,\n  type,\n  is,\n  record,\n  array,\n  nullable,\n  optional,\n  enums,\n  define,\n  union,\n  assert,\n  pattern,\n  intersection,\n} from '@metamask/superstruct';\nimport { CaipAssetTypeStruct, isStrictHexString } from '@metamask/utils';\n\nexport enum FeeType {\n  METABRIDGE = 'metabridge',\n  REFUEL = 'refuel',\n  TX_FEE = 'txFee',\n}\n\nexport enum FeatureId {\n  PERPS = 'perps',\n}\n\nexport enum ActionTypes {\n  BRIDGE = 'bridge',\n  SWAP = 'swap',\n  REFUEL = 'refuel',\n}\n\nconst HexAddressSchema = define<string>('HexAddress', (v: unknown) =>\n  isValidHexAddress(v as string, { allowNonPrefixed: false }),\n);\n\nconst HexStringSchema = define<string>('HexString', (v: unknown) =>\n  isStrictHexString(v as string),\n);\n\nexport const truthyString = (s: string) => Boolean(s?.length);\nconst TruthyDigitStringSchema = pattern(string(), /^\\d+$/u);\n\nconst ChainIdSchema = number();\n\nexport const BridgeAssetSchema = type({\n  /**\n   * The chainId of the token\n   */\n  chainId: ChainIdSchema,\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string(),\n  /**\n   * The assetId of the token\n   */\n  assetId: CaipAssetTypeStruct,\n  /**\n   * The symbol of token object\n   */\n  symbol: string(),\n  /**\n   * The name for the network\n   */\n  name: string(),\n  decimals: number(),\n  /**\n   * URL for token icon\n   */\n  icon: optional(nullable(string())),\n  /**\n   * URL for token icon\n   */\n  iconUrl: optional(nullable(string())),\n});\n\nexport const ChainConfigurationSchema = type({\n  isActiveSrc: boolean(),\n  isActiveDest: boolean(),\n  refreshRate: optional(number()),\n  topAssets: optional(array(string())),\n  isUnifiedUIEnabled: optional(boolean()),\n  isSingleSwapBridgeButtonEnabled: optional(boolean()),\n});\n\nexport const PriceImpactThresholdSchema = type({\n  gasless: number(),\n  normal: number(),\n});\n\nconst GenericQuoteRequestSchema = type({\n  aggIds: optional(array(string())),\n  bridgeIds: optional(array(string())),\n  noFee: optional(boolean()),\n});\n\nconst FeatureIdSchema = enums(Object.values(FeatureId));\n\n/**\n * This is the schema for the feature flags response from the RemoteFeatureFlagController\n */\nexport const PlatformConfigSchema = type({\n  priceImpactThreshold: optional(PriceImpactThresholdSchema),\n  quoteRequestOverrides: optional(\n    record(FeatureIdSchema, optional(GenericQuoteRequestSchema)),\n  ),\n  minimumVersion: string(),\n  refreshRate: number(),\n  maxRefreshCount: number(),\n  support: boolean(),\n  chains: record(string(), ChainConfigurationSchema),\n});\n\nexport const validateFeatureFlagsResponse = (\n  data: unknown,\n): data is Infer<typeof PlatformConfigSchema> => {\n  return is(data, PlatformConfigSchema);\n};\n\nexport const validateSwapsTokenObject = (\n  data: unknown,\n): data is Infer<typeof BridgeAssetSchema> => {\n  return is(data, BridgeAssetSchema);\n};\n\nexport const FeeDataSchema = type({\n  amount: TruthyDigitStringSchema,\n  asset: BridgeAssetSchema,\n});\n\nexport const ProtocolSchema = type({\n  name: string(),\n  displayName: optional(string()),\n  icon: optional(string()),\n});\n\nexport const StepSchema = type({\n  action: enums(Object.values(ActionTypes)),\n  srcChainId: ChainIdSchema,\n  destChainId: optional(ChainIdSchema),\n  srcAsset: BridgeAssetSchema,\n  destAsset: BridgeAssetSchema,\n  srcAmount: string(),\n  destAmount: string(),\n  protocol: ProtocolSchema,\n});\n\nconst RefuelDataSchema = StepSchema;\n\nexport const QuoteSchema = type({\n  requestId: string(),\n  srcChainId: ChainIdSchema,\n  srcAsset: BridgeAssetSchema,\n  /**\n   * The amount sent, in atomic amount: amount sent - fees\n   * Some tokens have a fee of 0, so sometimes it's equal to amount sent\n   */\n  srcTokenAmount: string(),\n  destChainId: ChainIdSchema,\n  destAsset: BridgeAssetSchema,\n  /**\n   * The amount received, in atomic amount\n   */\n  destTokenAmount: string(),\n  feeData: type({\n    [FeeType.METABRIDGE]: FeeDataSchema,\n    /**\n     * This is the fee for the swap transaction taken from either the\n     * src or dest token if the quote has gas fees included or \"gasless\"\n     */\n    [FeeType.TX_FEE]: optional(\n      intersection([\n        FeeDataSchema,\n        type({\n          maxFeePerGas: string(),\n          maxPriorityFeePerGas: string(),\n        }),\n      ]),\n    ),\n  }),\n  gasIncluded: optional(boolean()),\n  bridgeId: string(),\n  bridges: array(string()),\n  steps: array(StepSchema),\n  refuel: optional(RefuelDataSchema),\n  priceData: optional(\n    type({\n      totalFromAmountUsd: optional(string()),\n      totalToAmountUsd: optional(string()),\n      priceImpact: optional(string()),\n    }),\n  ),\n});\n\nexport const TxDataSchema = type({\n  chainId: number(),\n  to: HexAddressSchema,\n  from: HexAddressSchema,\n  value: HexStringSchema,\n  data: HexStringSchema,\n  gasLimit: nullable(number()),\n});\n\nexport const QuoteResponseSchema = type({\n  quote: QuoteSchema,\n  estimatedProcessingTimeInSeconds: number(),\n  approval: optional(TxDataSchema),\n  trade: union([TxDataSchema, string()]),\n});\n\nexport const validateQuoteResponse = (\n  data: unknown,\n): data is Infer<typeof QuoteResponseSchema> => {\n  assert(data, QuoteResponseSchema);\n  return true;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"validators.cjs","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import { isValidHexAddress } from '@metamask/controller-utils';\nimport type { Infer } from '@metamask/superstruct';\nimport {\n  string,\n  boolean,\n  number,\n  type,\n  is,\n  record,\n  array,\n  nullable,\n  optional,\n  enums,\n  define,\n  union,\n  assert,\n  pattern,\n  intersection,\n} from '@metamask/superstruct';\nimport { CaipAssetTypeStruct, isStrictHexString } from '@metamask/utils';\n\nexport enum FeeType {\n  METABRIDGE = 'metabridge',\n  REFUEL = 'refuel',\n  TX_FEE = 'txFee',\n}\n\nexport enum ActionTypes {\n  BRIDGE = 'bridge',\n  SWAP = 'swap',\n  REFUEL = 'refuel',\n}\n\nconst HexAddressSchema = define<string>('HexAddress', (v: unknown) =>\n  isValidHexAddress(v as string, { allowNonPrefixed: false }),\n);\n\nconst HexStringSchema = define<string>('HexString', (v: unknown) =>\n  isStrictHexString(v as string),\n);\n\nexport const truthyString = (s: string) => Boolean(s?.length);\nconst TruthyDigitStringSchema = pattern(string(), /^\\d+$/u);\n\nconst ChainIdSchema = number();\n\nexport const BridgeAssetSchema = type({\n  /**\n   * The chainId of the token\n   */\n  chainId: ChainIdSchema,\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string(),\n  /**\n   * The assetId of the token\n   */\n  assetId: CaipAssetTypeStruct,\n  /**\n   * The symbol of token object\n   */\n  symbol: string(),\n  /**\n   * The name for the network\n   */\n  name: string(),\n  decimals: number(),\n  /**\n   * URL for token icon\n   */\n  icon: optional(nullable(string())),\n  /**\n   * URL for token icon\n   */\n  iconUrl: optional(nullable(string())),\n});\n\nexport const ChainConfigurationSchema = type({\n  isActiveSrc: boolean(),\n  isActiveDest: boolean(),\n  refreshRate: optional(number()),\n  topAssets: optional(array(string())),\n  isUnifiedUIEnabled: optional(boolean()),\n  isSingleSwapBridgeButtonEnabled: optional(boolean()),\n});\n\nexport const PriceImpactThresholdSchema = type({\n  gasless: number(),\n  normal: number(),\n});\n\n/**\n * This is the schema for the feature flags response from the RemoteFeatureFlagController\n */\nexport const PlatformConfigSchema = type({\n  priceImpactThreshold: optional(PriceImpactThresholdSchema),\n  minimumVersion: string(),\n  refreshRate: number(),\n  maxRefreshCount: number(),\n  support: boolean(),\n  chains: record(string(), ChainConfigurationSchema),\n});\n\nexport const validateFeatureFlagsResponse = (\n  data: unknown,\n): data is Infer<typeof PlatformConfigSchema> => {\n  return is(data, PlatformConfigSchema);\n};\n\nexport const validateSwapsTokenObject = (\n  data: unknown,\n): data is Infer<typeof BridgeAssetSchema> => {\n  return is(data, BridgeAssetSchema);\n};\n\nexport const FeeDataSchema = type({\n  amount: TruthyDigitStringSchema,\n  asset: BridgeAssetSchema,\n});\n\nexport const ProtocolSchema = type({\n  name: string(),\n  displayName: optional(string()),\n  icon: optional(string()),\n});\n\nexport const StepSchema = type({\n  action: enums(Object.values(ActionTypes)),\n  srcChainId: ChainIdSchema,\n  destChainId: optional(ChainIdSchema),\n  srcAsset: BridgeAssetSchema,\n  destAsset: BridgeAssetSchema,\n  srcAmount: string(),\n  destAmount: string(),\n  protocol: ProtocolSchema,\n});\n\nconst RefuelDataSchema = StepSchema;\n\nexport const QuoteSchema = type({\n  requestId: string(),\n  srcChainId: ChainIdSchema,\n  srcAsset: BridgeAssetSchema,\n  /**\n   * The amount sent, in atomic amount: amount sent - fees\n   * Some tokens have a fee of 0, so sometimes it's equal to amount sent\n   */\n  srcTokenAmount: string(),\n  destChainId: ChainIdSchema,\n  destAsset: BridgeAssetSchema,\n  /**\n   * The amount received, in atomic amount\n   */\n  destTokenAmount: string(),\n  feeData: type({\n    [FeeType.METABRIDGE]: FeeDataSchema,\n    /**\n     * This is the fee for the swap transaction taken from either the\n     * src or dest token if the quote has gas fees included or \"gasless\"\n     */\n    [FeeType.TX_FEE]: optional(\n      intersection([\n        FeeDataSchema,\n        type({\n          maxFeePerGas: string(),\n          maxPriorityFeePerGas: string(),\n        }),\n      ]),\n    ),\n  }),\n  gasIncluded: optional(boolean()),\n  bridgeId: string(),\n  bridges: array(string()),\n  steps: array(StepSchema),\n  refuel: optional(RefuelDataSchema),\n  priceData: optional(\n    type({\n      totalFromAmountUsd: optional(string()),\n      totalToAmountUsd: optional(string()),\n      priceImpact: optional(string()),\n    }),\n  ),\n});\n\nexport const TxDataSchema = type({\n  chainId: number(),\n  to: HexAddressSchema,\n  from: HexAddressSchema,\n  value: HexStringSchema,\n  data: HexStringSchema,\n  gasLimit: nullable(number()),\n  effectiveGas: optional(number()),\n});\n\nexport const QuoteResponseSchema = type({\n  quote: QuoteSchema,\n  estimatedProcessingTimeInSeconds: number(),\n  approval: optional(TxDataSchema),\n  trade: union([TxDataSchema, string()]),\n});\n\nexport const validateQuoteResponse = (\n  data: unknown,\n): data is Infer<typeof QuoteResponseSchema> => {\n  assert(data, QuoteResponseSchema);\n  return true;\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/validators.d.cts b/dist/utils/validators.d.cts
index 912d53c3be51ecbf38262d5390f8d8290bffdcf2..182275a102b6c6e216c0c011537c75bd08a2d9af 100644
--- a/dist/utils/validators.d.cts
+++ b/dist/utils/validators.d.cts
@@ -3,9 +3,6 @@ export declare enum FeeType {
     REFUEL = "refuel",
     TX_FEE = "txFee"
 }
-export declare enum FeatureId {
-    PERPS = "perps"
-}
 export declare enum ActionTypes {
     BRIDGE = "bridge",
     SWAP = "swap",
@@ -94,11 +91,6 @@ export declare const PlatformConfigSchema: import("@metamask/superstruct").Struc
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 }, {
     priceImpactThreshold: import("@metamask/superstruct").Struct<{
         normal: number;
@@ -107,11 +99,6 @@ export declare const PlatformConfigSchema: import("@metamask/superstruct").Struc
         gasless: import("@metamask/superstruct").Struct<number, null>;
         normal: import("@metamask/superstruct").Struct<number, null>;
     }>;
-    quoteRequestOverrides: import("@metamask/superstruct").Struct<Record<FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined, null>;
     minimumVersion: import("@metamask/superstruct").Struct<string, null>;
     refreshRate: import("@metamask/superstruct").Struct<number, null>;
     maxRefreshCount: import("@metamask/superstruct").Struct<number, null>;
@@ -142,11 +129,6 @@ export declare const validateFeatureFlagsResponse: (data: unknown) => data is {
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 };
 export declare const validateSwapsTokenObject: (data: unknown) => data is {
     symbol: string;
@@ -995,6 +977,7 @@ export declare const TxDataSchema: import("@metamask/superstruct").Struct<{
     from: string;
     gasLimit: number | null;
     chainId: number;
+    effectiveGas?: number | undefined;
 }, {
     chainId: import("@metamask/superstruct").Struct<number, null>;
     to: import("@metamask/superstruct").Struct<string, null>;
@@ -1002,6 +985,7 @@ export declare const TxDataSchema: import("@metamask/superstruct").Struct<{
     value: import("@metamask/superstruct").Struct<string, null>;
     data: import("@metamask/superstruct").Struct<string, null>;
     gasLimit: import("@metamask/superstruct").Struct<number | null, null>;
+    effectiveGas: import("@metamask/superstruct").Struct<number | undefined, null>;
 }>;
 export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct<{
     quote: {
@@ -1142,6 +1126,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     };
     approval?: {
         data: string;
@@ -1150,6 +1135,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
 }, {
     quote: import("@metamask/superstruct").Struct<{
@@ -1795,6 +1781,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined, {
         chainId: import("@metamask/superstruct").Struct<number, null>;
         to: import("@metamask/superstruct").Struct<string, null>;
@@ -1802,6 +1789,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         value: import("@metamask/superstruct").Struct<string, null>;
         data: import("@metamask/superstruct").Struct<string, null>;
         gasLimit: import("@metamask/superstruct").Struct<number | null, null>;
+        effectiveGas: import("@metamask/superstruct").Struct<number | undefined, null>;
     }>;
     trade: import("@metamask/superstruct").Struct<string | {
         data: string;
@@ -1810,6 +1798,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     }, null>;
 }>;
 export declare const validateQuoteResponse: (data: unknown) => data is {
@@ -1951,6 +1940,7 @@ export declare const validateQuoteResponse: (data: unknown) => data is {
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     };
     approval?: {
         data: string;
@@ -1959,6 +1949,7 @@ export declare const validateQuoteResponse: (data: unknown) => data is {
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
 };
 //# sourceMappingURL=validators.d.cts.map
\ No newline at end of file
diff --git a/dist/utils/validators.d.cts.map b/dist/utils/validators.d.cts.map
index bf4ae957ea3be6cab7a8b00cb28cbc57ae322477..bbf6c3b87cb062155f68241e0cb9411be733d623 100644
--- a/dist/utils/validators.d.cts.map
+++ b/dist/utils/validators.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"validators.d.cts","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"validators.d.cts","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/utils/validators.d.mts b/dist/utils/validators.d.mts
index d32e0893eac60ca601a015077eeeebe3d5c8ffac..d81214cc2114a1f21fb523be3ee3d76a3de7defa 100644
--- a/dist/utils/validators.d.mts
+++ b/dist/utils/validators.d.mts
@@ -3,9 +3,6 @@ export declare enum FeeType {
     REFUEL = "refuel",
     TX_FEE = "txFee"
 }
-export declare enum FeatureId {
-    PERPS = "perps"
-}
 export declare enum ActionTypes {
     BRIDGE = "bridge",
     SWAP = "swap",
@@ -94,11 +91,6 @@ export declare const PlatformConfigSchema: import("@metamask/superstruct").Struc
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 }, {
     priceImpactThreshold: import("@metamask/superstruct").Struct<{
         normal: number;
@@ -107,11 +99,6 @@ export declare const PlatformConfigSchema: import("@metamask/superstruct").Struc
         gasless: import("@metamask/superstruct").Struct<number, null>;
         normal: import("@metamask/superstruct").Struct<number, null>;
     }>;
-    quoteRequestOverrides: import("@metamask/superstruct").Struct<Record<FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined, null>;
     minimumVersion: import("@metamask/superstruct").Struct<string, null>;
     refreshRate: import("@metamask/superstruct").Struct<number, null>;
     maxRefreshCount: import("@metamask/superstruct").Struct<number, null>;
@@ -142,11 +129,6 @@ export declare const validateFeatureFlagsResponse: (data: unknown) => data is {
         normal: number;
         gasless: number;
     } | undefined;
-    quoteRequestOverrides?: Record<FeatureId, {
-        aggIds?: string[] | undefined;
-        bridgeIds?: string[] | undefined;
-        noFee?: boolean | undefined;
-    } | undefined> | undefined;
 };
 export declare const validateSwapsTokenObject: (data: unknown) => data is {
     symbol: string;
@@ -995,6 +977,7 @@ export declare const TxDataSchema: import("@metamask/superstruct").Struct<{
     from: string;
     gasLimit: number | null;
     chainId: number;
+    effectiveGas?: number | undefined;
 }, {
     chainId: import("@metamask/superstruct").Struct<number, null>;
     to: import("@metamask/superstruct").Struct<string, null>;
@@ -1002,6 +985,7 @@ export declare const TxDataSchema: import("@metamask/superstruct").Struct<{
     value: import("@metamask/superstruct").Struct<string, null>;
     data: import("@metamask/superstruct").Struct<string, null>;
     gasLimit: import("@metamask/superstruct").Struct<number | null, null>;
+    effectiveGas: import("@metamask/superstruct").Struct<number | undefined, null>;
 }>;
 export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct<{
     quote: {
@@ -1142,6 +1126,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     };
     approval?: {
         data: string;
@@ -1150,6 +1135,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
 }, {
     quote: import("@metamask/superstruct").Struct<{
@@ -1795,6 +1781,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined, {
         chainId: import("@metamask/superstruct").Struct<number, null>;
         to: import("@metamask/superstruct").Struct<string, null>;
@@ -1802,6 +1789,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         value: import("@metamask/superstruct").Struct<string, null>;
         data: import("@metamask/superstruct").Struct<string, null>;
         gasLimit: import("@metamask/superstruct").Struct<number | null, null>;
+        effectiveGas: import("@metamask/superstruct").Struct<number | undefined, null>;
     }>;
     trade: import("@metamask/superstruct").Struct<string | {
         data: string;
@@ -1810,6 +1798,7 @@ export declare const QuoteResponseSchema: import("@metamask/superstruct").Struct
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     }, null>;
 }>;
 export declare const validateQuoteResponse: (data: unknown) => data is {
@@ -1951,6 +1940,7 @@ export declare const validateQuoteResponse: (data: unknown) => data is {
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     };
     approval?: {
         data: string;
@@ -1959,6 +1949,7 @@ export declare const validateQuoteResponse: (data: unknown) => data is {
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
 };
 //# sourceMappingURL=validators.d.mts.map
\ No newline at end of file
diff --git a/dist/utils/validators.d.mts.map b/dist/utils/validators.d.mts.map
index e91482f50d3cb02df508b4d2cb11eb477e6ce65d..bbd3d5f28c4c10f95caba8df4995858c1d0f91ed 100644
--- a/dist/utils/validators.d.mts.map
+++ b/dist/utils/validators.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"validators.d.mts","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"AAqBA,oBAAY,OAAO;IACjB,UAAU,eAAe;IACzB,MAAM,WAAW;IACjB,MAAM,UAAU;CACjB;AAED,oBAAY,SAAS;IACnB,KAAK,UAAU;CAChB;AAED,oBAAY,WAAW;IACrB,MAAM,WAAW;IACjB,IAAI,SAAS;IACb,MAAM,WAAW;CAClB;AAUD,eAAO,MAAM,YAAY,MAAO,MAAM,YAAuB,CAAC;AAK9D,eAAO,MAAM,iBAAiB;;;;;;;;;;IAC5B;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;;IAGH;;OAEG;;IAEH;;OAEG;;EAEH,CAAC;AAEH,eAAO,MAAM,wBAAwB;;;;;;;;;;;;;;EAOnC,CAAC;AAEH,eAAO,MAAM,0BAA0B;;;;;;EAGrC,CAAC;AAUH;;GAEG;AACH,eAAO,MAAM,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAU/B,CAAC;AAEH,eAAO,MAAM,4BAA4B,SACjC,OAAO;;;;;;;;;;;;;;;;;;;;;;CAGd,CAAC;AAEF,eAAO,MAAM,wBAAwB,SAC7B,OAAO;;;;;;;;;CAGd,CAAC;AAEF,eAAO,MAAM,aAAa;;;;;;;;;;;;;;;;;;;;;;;;QAhFxB;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;;QAGH;;WAEG;;QAEH;;WAEG;;;EAwDH,CAAC;AAEH,eAAO,MAAM,cAAc;;;;;;;;EAIzB,CAAC;AAEH,eAAO,MAAM,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA3FrB;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;;QAGH;;WAEG;;QAEH;;WAEG;;;;;;;;;;;;;QA3BH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;;QAGH;;WAEG;;QAEH;;WAEG;;;;;;;;;;;;;;EAyEH,CAAC;AAIH,eAAO,MAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAxGtB;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;;QAGH;;WAEG;;QAEH;;WAEG;;;IAiFH;;;OAGG;;;;;;;;;;;;;QA/GH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;QAEH;;WAEG;;;QAGH;;WAEG;;QAEH;;WAEG;;;IAwFH;;OAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBArHH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;;gBAGH;;mBAEG;;gBAEH;;mBAEG;;;;QA8FD;;;WAGG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA5HL;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;;YAGH;;eAEG;;YAEH;;eAEG;;;;;;;;;;;;;YA3BH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;;YAGH;;eAEG;;YAEH;;eAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA3BH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;;YAGH;;eAEG;;YAEH;;eAEG;;;;;;;;;;;;;YA3BH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;;YAGH;;eAEG;;YAEH;;eAEG;;;;;;;;;;;;;;;;;;;;;;;;EAwHH,CAAC;AAEH,eAAO,MAAM,YAAY;;;;;;;;;;;;;;EAOvB,CAAC;AAEH,eAAO,MAAM,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA9J9B;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;;YAGH;;eAEG;;YAEH;;eAEG;;;QAiFH;;;WAGG;;;;;;;;;;;;;YA/GH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;YAEH;;eAEG;;;YAGH;;eAEG;;YAEH;;eAEG;;;QAwFH;;WAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBArHH;;uBAEG;;oBAEH;;uBAEG;;oBAEH;;uBAEG;;oBAEH;;uBAEG;;oBAEH;;uBAEG;;;oBAGH;;uBAEG;;oBAEH;;uBAEG;;;;YA8FD;;;eAGG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA5HL;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;;gBAGH;;mBAEG;;gBAEH;;mBAEG;;;;;;;;;;;;;gBA3BH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;;gBAGH;;mBAEG;;gBAEH;;mBAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA3BH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;;gBAGH;;mBAEG;;gBAEH;;mBAEG;;;;;;;;;;;;;gBA3BH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;gBAEH;;mBAEG;;;gBAGH;;mBAEG;;gBAEH;;mBAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwIH,CAAC;AAEH,eAAO,MAAM,qBAAqB,SAC1B,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAId,CAAC"}
\ No newline at end of file
+{"version":3,"file":"validators.d.mts","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/utils/validators.mjs b/dist/utils/validators.mjs
index d282e3f9ad88c325ff627e72178978e4a7423b02..3cee27ba66094ccbfab73c4ff2934af701f32da4 100644
--- a/dist/utils/validators.mjs
+++ b/dist/utils/validators.mjs
@@ -7,10 +7,6 @@ export var FeeType;
     FeeType["REFUEL"] = "refuel";
     FeeType["TX_FEE"] = "txFee";
 })(FeeType || (FeeType = {}));
-export var FeatureId;
-(function (FeatureId) {
-    FeatureId["PERPS"] = "perps";
-})(FeatureId || (FeatureId = {}));
 export var ActionTypes;
 (function (ActionTypes) {
     ActionTypes["BRIDGE"] = "bridge";
@@ -65,18 +61,11 @@ export const PriceImpactThresholdSchema = type({
     gasless: number(),
     normal: number(),
 });
-const GenericQuoteRequestSchema = type({
-    aggIds: optional(array(string())),
-    bridgeIds: optional(array(string())),
-    noFee: optional(boolean()),
-});
-const FeatureIdSchema = enums(Object.values(FeatureId));
 /**
  * This is the schema for the feature flags response from the RemoteFeatureFlagController
  */
 export const PlatformConfigSchema = type({
     priceImpactThreshold: optional(PriceImpactThresholdSchema),
-    quoteRequestOverrides: optional(record(FeatureIdSchema, optional(GenericQuoteRequestSchema))),
     minimumVersion: string(),
     refreshRate: number(),
     maxRefreshCount: number(),
@@ -156,6 +145,7 @@ export const TxDataSchema = type({
     value: HexStringSchema,
     data: HexStringSchema,
     gasLimit: nullable(number()),
+    effectiveGas: optional(number()),
 });
 export const QuoteResponseSchema = type({
     quote: QuoteSchema,
diff --git a/dist/utils/validators.mjs.map b/dist/utils/validators.mjs.map
index 3fa1eb0274c23dfedf901c231d6f651067cb4f71..fbc1ab6621d83c84cd3e65b45f3340ecb07428a0 100644
--- a/dist/utils/validators.mjs.map
+++ b/dist/utils/validators.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"validators.mjs","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import { isValidHexAddress } from '@metamask/controller-utils';\nimport type { Infer } from '@metamask/superstruct';\nimport {\n  string,\n  boolean,\n  number,\n  type,\n  is,\n  record,\n  array,\n  nullable,\n  optional,\n  enums,\n  define,\n  union,\n  assert,\n  pattern,\n  intersection,\n} from '@metamask/superstruct';\nimport { CaipAssetTypeStruct, isStrictHexString } from '@metamask/utils';\n\nexport enum FeeType {\n  METABRIDGE = 'metabridge',\n  REFUEL = 'refuel',\n  TX_FEE = 'txFee',\n}\n\nexport enum FeatureId {\n  PERPS = 'perps',\n}\n\nexport enum ActionTypes {\n  BRIDGE = 'bridge',\n  SWAP = 'swap',\n  REFUEL = 'refuel',\n}\n\nconst HexAddressSchema = define<string>('HexAddress', (v: unknown) =>\n  isValidHexAddress(v as string, { allowNonPrefixed: false }),\n);\n\nconst HexStringSchema = define<string>('HexString', (v: unknown) =>\n  isStrictHexString(v as string),\n);\n\nexport const truthyString = (s: string) => Boolean(s?.length);\nconst TruthyDigitStringSchema = pattern(string(), /^\\d+$/u);\n\nconst ChainIdSchema = number();\n\nexport const BridgeAssetSchema = type({\n  /**\n   * The chainId of the token\n   */\n  chainId: ChainIdSchema,\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string(),\n  /**\n   * The assetId of the token\n   */\n  assetId: CaipAssetTypeStruct,\n  /**\n   * The symbol of token object\n   */\n  symbol: string(),\n  /**\n   * The name for the network\n   */\n  name: string(),\n  decimals: number(),\n  /**\n   * URL for token icon\n   */\n  icon: optional(nullable(string())),\n  /**\n   * URL for token icon\n   */\n  iconUrl: optional(nullable(string())),\n});\n\nexport const ChainConfigurationSchema = type({\n  isActiveSrc: boolean(),\n  isActiveDest: boolean(),\n  refreshRate: optional(number()),\n  topAssets: optional(array(string())),\n  isUnifiedUIEnabled: optional(boolean()),\n  isSingleSwapBridgeButtonEnabled: optional(boolean()),\n});\n\nexport const PriceImpactThresholdSchema = type({\n  gasless: number(),\n  normal: number(),\n});\n\nconst GenericQuoteRequestSchema = type({\n  aggIds: optional(array(string())),\n  bridgeIds: optional(array(string())),\n  noFee: optional(boolean()),\n});\n\nconst FeatureIdSchema = enums(Object.values(FeatureId));\n\n/**\n * This is the schema for the feature flags response from the RemoteFeatureFlagController\n */\nexport const PlatformConfigSchema = type({\n  priceImpactThreshold: optional(PriceImpactThresholdSchema),\n  quoteRequestOverrides: optional(\n    record(FeatureIdSchema, optional(GenericQuoteRequestSchema)),\n  ),\n  minimumVersion: string(),\n  refreshRate: number(),\n  maxRefreshCount: number(),\n  support: boolean(),\n  chains: record(string(), ChainConfigurationSchema),\n});\n\nexport const validateFeatureFlagsResponse = (\n  data: unknown,\n): data is Infer<typeof PlatformConfigSchema> => {\n  return is(data, PlatformConfigSchema);\n};\n\nexport const validateSwapsTokenObject = (\n  data: unknown,\n): data is Infer<typeof BridgeAssetSchema> => {\n  return is(data, BridgeAssetSchema);\n};\n\nexport const FeeDataSchema = type({\n  amount: TruthyDigitStringSchema,\n  asset: BridgeAssetSchema,\n});\n\nexport const ProtocolSchema = type({\n  name: string(),\n  displayName: optional(string()),\n  icon: optional(string()),\n});\n\nexport const StepSchema = type({\n  action: enums(Object.values(ActionTypes)),\n  srcChainId: ChainIdSchema,\n  destChainId: optional(ChainIdSchema),\n  srcAsset: BridgeAssetSchema,\n  destAsset: BridgeAssetSchema,\n  srcAmount: string(),\n  destAmount: string(),\n  protocol: ProtocolSchema,\n});\n\nconst RefuelDataSchema = StepSchema;\n\nexport const QuoteSchema = type({\n  requestId: string(),\n  srcChainId: ChainIdSchema,\n  srcAsset: BridgeAssetSchema,\n  /**\n   * The amount sent, in atomic amount: amount sent - fees\n   * Some tokens have a fee of 0, so sometimes it's equal to amount sent\n   */\n  srcTokenAmount: string(),\n  destChainId: ChainIdSchema,\n  destAsset: BridgeAssetSchema,\n  /**\n   * The amount received, in atomic amount\n   */\n  destTokenAmount: string(),\n  feeData: type({\n    [FeeType.METABRIDGE]: FeeDataSchema,\n    /**\n     * This is the fee for the swap transaction taken from either the\n     * src or dest token if the quote has gas fees included or \"gasless\"\n     */\n    [FeeType.TX_FEE]: optional(\n      intersection([\n        FeeDataSchema,\n        type({\n          maxFeePerGas: string(),\n          maxPriorityFeePerGas: string(),\n        }),\n      ]),\n    ),\n  }),\n  gasIncluded: optional(boolean()),\n  bridgeId: string(),\n  bridges: array(string()),\n  steps: array(StepSchema),\n  refuel: optional(RefuelDataSchema),\n  priceData: optional(\n    type({\n      totalFromAmountUsd: optional(string()),\n      totalToAmountUsd: optional(string()),\n      priceImpact: optional(string()),\n    }),\n  ),\n});\n\nexport const TxDataSchema = type({\n  chainId: number(),\n  to: HexAddressSchema,\n  from: HexAddressSchema,\n  value: HexStringSchema,\n  data: HexStringSchema,\n  gasLimit: nullable(number()),\n});\n\nexport const QuoteResponseSchema = type({\n  quote: QuoteSchema,\n  estimatedProcessingTimeInSeconds: number(),\n  approval: optional(TxDataSchema),\n  trade: union([TxDataSchema, string()]),\n});\n\nexport const validateQuoteResponse = (\n  data: unknown,\n): data is Infer<typeof QuoteResponseSchema> => {\n  assert(data, QuoteResponseSchema);\n  return true;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"validators.mjs","sourceRoot":"","sources":["../../src/utils/validators.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,mCAAmC;AAE/D,OAAO,EACL,MAAM,EACN,OAAO,EACP,MAAM,EACN,IAAI,EACJ,EAAE,EACF,MAAM,EACN,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,EACP,YAAY,EACb,8BAA8B;AAC/B,OAAO,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,wBAAwB;AAEzE,MAAM,CAAN,IAAY,OAIX;AAJD,WAAY,OAAO;IACjB,oCAAyB,CAAA;IACzB,4BAAiB,CAAA;IACjB,2BAAgB,CAAA;AAClB,CAAC,EAJW,OAAO,KAAP,OAAO,QAIlB;AAED,MAAM,CAAN,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,gCAAiB,CAAA;IACjB,4BAAa,CAAA;IACb,gCAAiB,CAAA;AACnB,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAED,MAAM,gBAAgB,GAAG,MAAM,CAAS,YAAY,EAAE,CAAC,CAAU,EAAE,EAAE,CACnE,iBAAiB,CAAC,CAAW,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAC5D,CAAC;AAEF,MAAM,eAAe,GAAG,MAAM,CAAS,WAAW,EAAE,CAAC,CAAU,EAAE,EAAE,CACjE,iBAAiB,CAAC,CAAW,CAAC,CAC/B,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC9D,MAAM,uBAAuB,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;AAE5D,MAAM,aAAa,GAAG,MAAM,EAAE,CAAC;AAE/B,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,CAAC;IACpC;;OAEG;IACH,OAAO,EAAE,aAAa;IACtB;;OAEG;IACH,OAAO,EAAE,MAAM,EAAE;IACjB;;OAEG;IACH,OAAO,EAAE,mBAAmB;IAC5B;;OAEG;IACH,MAAM,EAAE,MAAM,EAAE;IAChB;;OAEG;IACH,IAAI,EAAE,MAAM,EAAE;IACd,QAAQ,EAAE,MAAM,EAAE;IAClB;;OAEG;IACH,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IAClC;;OAEG;IACH,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;CACtC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,wBAAwB,GAAG,IAAI,CAAC;IAC3C,WAAW,EAAE,OAAO,EAAE;IACtB,YAAY,EAAE,OAAO,EAAE;IACvB,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC/B,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IACpC,kBAAkB,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC;IACvC,+BAA+B,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC;CACrD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,0BAA0B,GAAG,IAAI,CAAC;IAC7C,OAAO,EAAE,MAAM,EAAE;IACjB,MAAM,EAAE,MAAM,EAAE;CACjB,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,IAAI,CAAC;IACvC,oBAAoB,EAAE,QAAQ,CAAC,0BAA0B,CAAC;IAC1D,cAAc,EAAE,MAAM,EAAE;IACxB,WAAW,EAAE,MAAM,EAAE;IACrB,eAAe,EAAE,MAAM,EAAE;IACzB,OAAO,EAAE,OAAO,EAAE;IAClB,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,wBAAwB,CAAC;CACnD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAC1C,IAAa,EAC+B,EAAE;IAC9C,OAAO,EAAE,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,IAAa,EAC4B,EAAE;IAC3C,OAAO,EAAE,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,CAAC;IAChC,MAAM,EAAE,uBAAuB;IAC/B,KAAK,EAAE,iBAAiB;CACzB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,CAAC;IACjC,IAAI,EAAE,MAAM,EAAE;IACd,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC/B,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;CACzB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,CAAC;IAC7B,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACzC,UAAU,EAAE,aAAa;IACzB,WAAW,EAAE,QAAQ,CAAC,aAAa,CAAC;IACpC,QAAQ,EAAE,iBAAiB;IAC3B,SAAS,EAAE,iBAAiB;IAC5B,SAAS,EAAE,MAAM,EAAE;IACnB,UAAU,EAAE,MAAM,EAAE;IACpB,QAAQ,EAAE,cAAc;CACzB,CAAC,CAAC;AAEH,MAAM,gBAAgB,GAAG,UAAU,CAAC;AAEpC,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,CAAC;IAC9B,SAAS,EAAE,MAAM,EAAE;IACnB,UAAU,EAAE,aAAa;IACzB,QAAQ,EAAE,iBAAiB;IAC3B;;;OAGG;IACH,cAAc,EAAE,MAAM,EAAE;IACxB,WAAW,EAAE,aAAa;IAC1B,SAAS,EAAE,iBAAiB;IAC5B;;OAEG;IACH,eAAe,EAAE,MAAM,EAAE;IACzB,OAAO,EAAE,IAAI,CAAC;QACZ,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,aAAa;QACnC;;;WAGG;QACH,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,CACxB,YAAY,CAAC;YACX,aAAa;YACb,IAAI,CAAC;gBACH,YAAY,EAAE,MAAM,EAAE;gBACtB,oBAAoB,EAAE,MAAM,EAAE;aAC/B,CAAC;SACH,CAAC,CACH;KACF,CAAC;IACF,WAAW,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC;IAChC,QAAQ,EAAE,MAAM,EAAE;IAClB,OAAO,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;IACxB,KAAK,EAAE,KAAK,CAAC,UAAU,CAAC;IACxB,MAAM,EAAE,QAAQ,CAAC,gBAAgB,CAAC;IAClC,SAAS,EAAE,QAAQ,CACjB,IAAI,CAAC;QACH,kBAAkB,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;QACtC,gBAAgB,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpC,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;KAChC,CAAC,CACH;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,CAAC;IAC/B,OAAO,EAAE,MAAM,EAAE;IACjB,EAAE,EAAE,gBAAgB;IACpB,IAAI,EAAE,gBAAgB;IACtB,KAAK,EAAE,eAAe;IACtB,IAAI,EAAE,eAAe;IACrB,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC5B,YAAY,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;CACjC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,CAAC;IACtC,KAAK,EAAE,WAAW;IAClB,gCAAgC,EAAE,MAAM,EAAE;IAC1C,QAAQ,EAAE,QAAQ,CAAC,YAAY,CAAC;IAChC,KAAK,EAAE,KAAK,CAAC,CAAC,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;CACvC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,IAAa,EAC8B,EAAE;IAC7C,MAAM,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IAClC,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import { isValidHexAddress } from '@metamask/controller-utils';\nimport type { Infer } from '@metamask/superstruct';\nimport {\n  string,\n  boolean,\n  number,\n  type,\n  is,\n  record,\n  array,\n  nullable,\n  optional,\n  enums,\n  define,\n  union,\n  assert,\n  pattern,\n  intersection,\n} from '@metamask/superstruct';\nimport { CaipAssetTypeStruct, isStrictHexString } from '@metamask/utils';\n\nexport enum FeeType {\n  METABRIDGE = 'metabridge',\n  REFUEL = 'refuel',\n  TX_FEE = 'txFee',\n}\n\nexport enum ActionTypes {\n  BRIDGE = 'bridge',\n  SWAP = 'swap',\n  REFUEL = 'refuel',\n}\n\nconst HexAddressSchema = define<string>('HexAddress', (v: unknown) =>\n  isValidHexAddress(v as string, { allowNonPrefixed: false }),\n);\n\nconst HexStringSchema = define<string>('HexString', (v: unknown) =>\n  isStrictHexString(v as string),\n);\n\nexport const truthyString = (s: string) => Boolean(s?.length);\nconst TruthyDigitStringSchema = pattern(string(), /^\\d+$/u);\n\nconst ChainIdSchema = number();\n\nexport const BridgeAssetSchema = type({\n  /**\n   * The chainId of the token\n   */\n  chainId: ChainIdSchema,\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string(),\n  /**\n   * The assetId of the token\n   */\n  assetId: CaipAssetTypeStruct,\n  /**\n   * The symbol of token object\n   */\n  symbol: string(),\n  /**\n   * The name for the network\n   */\n  name: string(),\n  decimals: number(),\n  /**\n   * URL for token icon\n   */\n  icon: optional(nullable(string())),\n  /**\n   * URL for token icon\n   */\n  iconUrl: optional(nullable(string())),\n});\n\nexport const ChainConfigurationSchema = type({\n  isActiveSrc: boolean(),\n  isActiveDest: boolean(),\n  refreshRate: optional(number()),\n  topAssets: optional(array(string())),\n  isUnifiedUIEnabled: optional(boolean()),\n  isSingleSwapBridgeButtonEnabled: optional(boolean()),\n});\n\nexport const PriceImpactThresholdSchema = type({\n  gasless: number(),\n  normal: number(),\n});\n\n/**\n * This is the schema for the feature flags response from the RemoteFeatureFlagController\n */\nexport const PlatformConfigSchema = type({\n  priceImpactThreshold: optional(PriceImpactThresholdSchema),\n  minimumVersion: string(),\n  refreshRate: number(),\n  maxRefreshCount: number(),\n  support: boolean(),\n  chains: record(string(), ChainConfigurationSchema),\n});\n\nexport const validateFeatureFlagsResponse = (\n  data: unknown,\n): data is Infer<typeof PlatformConfigSchema> => {\n  return is(data, PlatformConfigSchema);\n};\n\nexport const validateSwapsTokenObject = (\n  data: unknown,\n): data is Infer<typeof BridgeAssetSchema> => {\n  return is(data, BridgeAssetSchema);\n};\n\nexport const FeeDataSchema = type({\n  amount: TruthyDigitStringSchema,\n  asset: BridgeAssetSchema,\n});\n\nexport const ProtocolSchema = type({\n  name: string(),\n  displayName: optional(string()),\n  icon: optional(string()),\n});\n\nexport const StepSchema = type({\n  action: enums(Object.values(ActionTypes)),\n  srcChainId: ChainIdSchema,\n  destChainId: optional(ChainIdSchema),\n  srcAsset: BridgeAssetSchema,\n  destAsset: BridgeAssetSchema,\n  srcAmount: string(),\n  destAmount: string(),\n  protocol: ProtocolSchema,\n});\n\nconst RefuelDataSchema = StepSchema;\n\nexport const QuoteSchema = type({\n  requestId: string(),\n  srcChainId: ChainIdSchema,\n  srcAsset: BridgeAssetSchema,\n  /**\n   * The amount sent, in atomic amount: amount sent - fees\n   * Some tokens have a fee of 0, so sometimes it's equal to amount sent\n   */\n  srcTokenAmount: string(),\n  destChainId: ChainIdSchema,\n  destAsset: BridgeAssetSchema,\n  /**\n   * The amount received, in atomic amount\n   */\n  destTokenAmount: string(),\n  feeData: type({\n    [FeeType.METABRIDGE]: FeeDataSchema,\n    /**\n     * This is the fee for the swap transaction taken from either the\n     * src or dest token if the quote has gas fees included or \"gasless\"\n     */\n    [FeeType.TX_FEE]: optional(\n      intersection([\n        FeeDataSchema,\n        type({\n          maxFeePerGas: string(),\n          maxPriorityFeePerGas: string(),\n        }),\n      ]),\n    ),\n  }),\n  gasIncluded: optional(boolean()),\n  bridgeId: string(),\n  bridges: array(string()),\n  steps: array(StepSchema),\n  refuel: optional(RefuelDataSchema),\n  priceData: optional(\n    type({\n      totalFromAmountUsd: optional(string()),\n      totalToAmountUsd: optional(string()),\n      priceImpact: optional(string()),\n    }),\n  ),\n});\n\nexport const TxDataSchema = type({\n  chainId: number(),\n  to: HexAddressSchema,\n  from: HexAddressSchema,\n  value: HexStringSchema,\n  data: HexStringSchema,\n  gasLimit: nullable(number()),\n  effectiveGas: optional(number()),\n});\n\nexport const QuoteResponseSchema = type({\n  quote: QuoteSchema,\n  estimatedProcessingTimeInSeconds: number(),\n  approval: optional(TxDataSchema),\n  trade: union([TxDataSchema, string()]),\n});\n\nexport const validateQuoteResponse = (\n  data: unknown,\n): data is Infer<typeof QuoteResponseSchema> => {\n  assert(data, QuoteResponseSchema);\n  return true;\n};\n"]}
\ No newline at end of file
