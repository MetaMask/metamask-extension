diff --git a/dist/bridge-status-controller.cjs b/dist/bridge-status-controller.cjs
index fa0a83b34578dd3b88054195cea87b491156c5e7..07e1d516b75a84ecd962cb0e371281d088e7199c 100644
--- a/dist/bridge-status-controller.cjs
+++ b/dist/bridge-status-controller.cjs
@@ -179,7 +179,7 @@ class BridgeStatusController extends (0, polling_controller_1.StaticIntervalPoll
                 pricingData: {
                     amountSent: quoteResponse.sentAmount.amount,
                     amountSentInUsd: quoteResponse.sentAmount.usd ?? undefined,
-                    quotedGasInUsd: quoteResponse.gasFee.usd ?? undefined,
+                    quotedGasInUsd: quoteResponse.gasFee.effective?.usd ?? undefined,
                     quotedReturnInUsd: quoteResponse.toTokenAmount.usd ?? undefined,
                 },
                 initialDestAssetBalance,
diff --git a/dist/bridge-status-controller.cjs.map b/dist/bridge-status-controller.cjs.map
index b775570ad8779ac992084596e4006986e223dbe3..85cb3495348b7421250a40c56f9fd503cb0e1759 100644
--- a/dist/bridge-status-controller.cjs.map
+++ b/dist/bridge-status-controller.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"bridge-status-controller.cjs","sourceRoot":"","sources":["../src/bridge-status-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StateMetadata } from '@metamask/base-controller';\nimport type {\n  QuoteMetadata,\n  RequiredEventContextFromClient,\n  TxData,\n  QuoteResponse,\n} from '@metamask/bridge-controller';\nimport {\n  formatChainIdToHex,\n  isSolanaChainId,\n  StatusTypes,\n  UnifiedSwapBridgeEventName,\n  getActionType,\n  formatChainIdToCaip,\n  isCrossChain,\n  isHardwareWallet,\n} from '@metamask/bridge-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { toHex } from '@metamask/controller-utils';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  TransactionController,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  BRIDGE_PROD_API_BASE_URL,\n  BRIDGE_STATUS_CONTROLLER_NAME,\n  DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n  MAX_ATTEMPTS,\n  REFRESH_INTERVAL_MS,\n  TraceName,\n} from './constants';\nimport type {\n  BridgeStatusControllerState,\n  StartPollingForBridgeTxStatusArgsSerialized,\n  FetchFunction,\n  SolanaTransactionMeta,\n  BridgeHistoryItem,\n} from './types';\nimport { type BridgeStatusControllerMessenger } from './types';\nimport { BridgeClientId } from './types';\nimport {\n  fetchBridgeTxStatus,\n  getStatusRequestWithSrcTxHash,\n  shouldSkipFetchDueToFetchFailures,\n} from './utils/bridge-status';\nimport { getTxGasEstimates } from './utils/gas';\nimport {\n  getFinalizedTxProperties,\n  getPriceImpactFromQuote,\n  getRequestMetadataFromHistory,\n  getRequestParamFromHistory,\n  getTradeDataFromHistory,\n  getTradeDataFromQuote,\n  getEVMTxPropertiesFromTransactionMeta,\n  getTxStatusesFromHistory,\n} from './utils/metrics';\nimport {\n  findAndUpdateTransactionsInBatch,\n  getAddTransactionBatchParams,\n  getClientRequest,\n  getStatusRequestParams,\n  getUSDTAllowanceResetTx,\n  handleLineaDelay,\n  handleSolanaTxResponse,\n} from './utils/transaction';\nimport { generateActionId } from './utils/transaction';\n\nconst metadata: StateMetadata<BridgeStatusControllerState> = {\n  // We want to persist the bridge status state so that we can show the proper data for the Activity list\n  // basically match the behavior of TransactionController\n  txHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/** The input to start polling for the {@link BridgeStatusController} */\ntype BridgeStatusPollingInput = FetchBridgeTxStatusArgs;\n\ntype SrcTxMetaId = string;\nexport type FetchBridgeTxStatusArgs = {\n  bridgeTxMetaId: string;\n};\nexport class BridgeStatusController extends StaticIntervalPollingController<BridgeStatusPollingInput>()<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState,\n  BridgeStatusControllerMessenger\n> {\n  #pollingTokensByTxMetaId: Record<SrcTxMetaId, string> = {};\n\n  readonly #clientId: BridgeClientId;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #config: {\n    customBridgeApiBaseUrl: string;\n  };\n\n  readonly #addTransactionFn: typeof TransactionController.prototype.addTransaction;\n\n  readonly #addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n\n  readonly #updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n\n  readonly #estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n\n  readonly #trace: TraceCallback;\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    fetchFn,\n    addTransactionFn,\n    addTransactionBatchFn,\n    updateTransactionFn,\n    estimateGasFeeFn,\n    config,\n    traceFn,\n  }: {\n    messenger: BridgeStatusControllerMessenger;\n    state?: Partial<BridgeStatusControllerState>;\n    clientId: BridgeClientId;\n    fetchFn: FetchFunction;\n    addTransactionFn: typeof TransactionController.prototype.addTransaction;\n    addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n    updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n    estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_STATUS_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      // Restore the persisted state\n      state: {\n        ...DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n        ...state,\n      },\n    });\n\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#addTransactionFn = addTransactionFn;\n    this.#addTransactionBatchFn = addTransactionBatchFn;\n    this.#updateTransactionFn = updateTransactionFn;\n    this.#estimateGasFeeFn = estimateGasFeeFn;\n    this.#config = {\n      customBridgeApiBaseUrl:\n        config?.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n    };\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:startPollingForBridgeTxStatus`,\n      this.startPollingForBridgeTxStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:wipeBridgeStatus`,\n      this.wipeBridgeStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:submitTx`,\n      this.submitTx.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:restartPollingForFailedAttempts`,\n      this.restartPollingForFailedAttempts.bind(this),\n    );\n\n    // Set interval\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionFailed',\n      ({ transactionMeta }) => {\n        const { type, status, id } = transactionMeta;\n        if (\n          type &&\n          [\n            TransactionType.bridge,\n            TransactionType.swap,\n            TransactionType.bridgeApproval,\n            TransactionType.swapApproval,\n          ].includes(type) &&\n          [\n            TransactionStatus.failed,\n            TransactionStatus.dropped,\n            TransactionStatus.rejected,\n          ].includes(status)\n        ) {\n          // Mark tx as failed in txHistory\n          this.#markTxAsFailed(transactionMeta);\n          // Track failed event\n          if (status !== TransactionStatus.rejected) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              id,\n              getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n            );\n          }\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionConfirmed',\n      (transactionMeta) => {\n        const { type, id, chainId } = transactionMeta;\n        if (type === TransactionType.swap) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            id,\n            getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n          );\n        }\n        if (type === TransactionType.bridge && !isSolanaChainId(chainId)) {\n          this.#startPollingForTxId(id);\n        }\n      },\n    );\n\n    // If you close the extension, but keep the browser open, the polling continues\n    // If you close the browser, the polling stops\n    // Check for historyItems that do not have a status of complete and restart polling\n    this.#restartPollingForIncompleteHistoryItems();\n  }\n\n  // Mark tx as failed in txHistory if either the approval or trade fails\n  readonly #markTxAsFailed = ({ id }: TransactionMeta) => {\n    const txHistoryKey = this.state.txHistory[id]\n      ? id\n      : Object.keys(this.state.txHistory).find(\n          (key) => this.state.txHistory[key].approvalTxId === id,\n        );\n    if (!txHistoryKey) {\n      return;\n    }\n    this.update((statusState) => {\n      statusState.txHistory[txHistoryKey].status.status = StatusTypes.FAILED;\n    });\n  };\n\n  resetState = () => {\n    this.update((state) => {\n      state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n    });\n  };\n\n  wipeBridgeStatus = ({\n    address,\n    ignoreNetwork,\n  }: {\n    address: string;\n    ignoreNetwork: boolean;\n  }) => {\n    // Wipe all networks for this address\n    if (ignoreNetwork) {\n      this.update((state) => {\n        state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      const selectedNetworkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      );\n      const selectedChainId = selectedNetworkClient.configuration.chainId;\n\n      this.#wipeBridgeStatusByChainId(address, selectedChainId);\n    }\n  };\n\n  /**\n   * Resets the attempts counter for a bridge transaction history item\n   * and restarts polling if it was previously stopped due to max attempts\n   *\n   * @param identifier - Object containing either txMetaId or txHash to identify the history item\n   * @param identifier.txMetaId - The transaction meta ID\n   * @param identifier.txHash - The transaction hash\n   */\n  restartPollingForFailedAttempts = (identifier: {\n    txMetaId?: string;\n    txHash?: string;\n  }) => {\n    const { txMetaId, txHash } = identifier;\n\n    if (!txMetaId && !txHash) {\n      throw new Error('Either txMetaId or txHash must be provided');\n    }\n\n    // Find the history item by txMetaId or txHash\n    let targetTxMetaId: string | undefined;\n\n    if (txMetaId) {\n      // Direct lookup by txMetaId\n      if (this.state.txHistory[txMetaId]) {\n        targetTxMetaId = txMetaId;\n      }\n    } else if (txHash) {\n      // Search by txHash in status.srcChain.txHash\n      targetTxMetaId = Object.keys(this.state.txHistory).find(\n        (id) => this.state.txHistory[id].status.srcChain.txHash === txHash,\n      );\n    }\n\n    if (!targetTxMetaId) {\n      throw new Error(\n        `No bridge transaction history found for ${\n          txMetaId ? `txMetaId: ${txMetaId}` : `txHash: ${txHash}`\n        }`,\n      );\n    }\n\n    const historyItem = this.state.txHistory[targetTxMetaId];\n\n    // Reset the attempts counter\n    this.update((state) => {\n      if (targetTxMetaId) {\n        state.txHistory[targetTxMetaId].attempts = undefined;\n      }\n    });\n\n    // Restart polling if it was stopped and this is a bridge transaction\n    const isBridgeTx = isCrossChain(\n      historyItem.quote.srcChainId,\n      historyItem.quote.destChainId,\n    );\n\n    if (isBridgeTx) {\n      // Check if polling was stopped (no active polling token)\n      const existingPollingToken =\n        this.#pollingTokensByTxMetaId[targetTxMetaId];\n\n      if (!existingPollingToken) {\n        // Restart polling\n        this.#startPollingForTxId(targetTxMetaId);\n      }\n    }\n  };\n\n  /**\n   * Restart polling for txs that are not in a final state\n   * This is called during initialization\n   */\n  readonly #restartPollingForIncompleteHistoryItems = () => {\n    // Check for historyItems that do not have a status of complete and restart polling\n    const { txHistory } = this.state;\n    const historyItems = Object.values(txHistory);\n    const incompleteHistoryItems = historyItems\n      .filter(\n        (historyItem) =>\n          historyItem.status.status === StatusTypes.PENDING ||\n          historyItem.status.status === StatusTypes.UNKNOWN,\n      )\n      .filter((historyItem) => {\n        // Check if we are already polling this tx, if so, skip restarting polling for that\n        const pollingToken =\n          this.#pollingTokensByTxMetaId[historyItem.txMetaId];\n        return !pollingToken;\n      })\n      // Swap txs don't need to have their statuses polled\n      .filter((historyItem) => {\n        const isBridgeTx = isCrossChain(\n          historyItem.quote.srcChainId,\n          historyItem.quote.destChainId,\n        );\n        return isBridgeTx;\n      });\n\n    incompleteHistoryItems.forEach((historyItem) => {\n      const bridgeTxMetaId = historyItem.txMetaId;\n      const shouldSkipFetch = shouldSkipFetchDueToFetchFailures(\n        historyItem.attempts,\n      );\n      if (shouldSkipFetch) {\n        return;\n      }\n\n      // We manually call startPolling() here rather than go through startPollingForBridgeTxStatus()\n      // because we don't want to overwrite the existing historyItem in state\n      this.#startPollingForTxId(bridgeTxMetaId);\n    });\n  };\n\n  readonly #addTxToHistory = (\n    startPollingForBridgeTxStatusArgs: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const {\n      bridgeTxMeta,\n      statusRequest,\n      quoteResponse,\n      startTime,\n      slippagePercentage,\n      initialDestAssetBalance,\n      targetContractAddress,\n      approvalTxId,\n      isStxEnabled,\n    } = startPollingForBridgeTxStatusArgs;\n\n    const accountAddress = this.#getMultichainSelectedAccountAddress();\n    // Write all non-status fields to state so we can reference the quote in Activity list without the Bridge API\n    // We know it's in progress but not the exact status yet\n    const txHistoryItem = {\n      txMetaId: bridgeTxMeta.id,\n      batchId: bridgeTxMeta.batchId,\n      quote: quoteResponse.quote,\n      startTime,\n      estimatedProcessingTimeInSeconds:\n        quoteResponse.estimatedProcessingTimeInSeconds,\n      slippagePercentage,\n      pricingData: {\n        amountSent: quoteResponse.sentAmount.amount,\n        amountSentInUsd: quoteResponse.sentAmount.usd ?? undefined,\n        quotedGasInUsd: quoteResponse.gasFee.usd ?? undefined,\n        quotedReturnInUsd: quoteResponse.toTokenAmount.usd ?? undefined,\n      },\n      initialDestAssetBalance,\n      targetContractAddress,\n      account: accountAddress,\n      status: {\n        // We always have a PENDING status when we start polling for a tx, don't need the Bridge API for that\n        // Also we know the bare minimum fields for status at this point in time\n        status: StatusTypes.PENDING,\n        srcChain: {\n          chainId: statusRequest.srcChainId,\n          txHash: statusRequest.srcTxHash,\n        },\n      },\n      hasApprovalTx: Boolean(quoteResponse.approval),\n      approvalTxId,\n      isStxEnabled: isStxEnabled ?? false,\n    };\n    this.update((state) => {\n      // Use the txMeta.id as the key so we can reference the txMeta in TransactionController\n      state.txHistory[bridgeTxMeta.id] = txHistoryItem;\n    });\n  };\n\n  readonly #startPollingForTxId = (txId: string) => {\n    // If we are already polling for this tx, stop polling for it before restarting\n    const existingPollingToken = this.#pollingTokensByTxMetaId[txId];\n    if (existingPollingToken) {\n      this.stopPollingByPollingToken(existingPollingToken);\n    }\n\n    const txHistoryItem = this.state.txHistory[txId];\n    if (!txHistoryItem) {\n      return;\n    }\n    const { quote } = txHistoryItem;\n\n    const isBridgeTx = isCrossChain(quote.srcChainId, quote.destChainId);\n    if (isBridgeTx) {\n      this.#pollingTokensByTxMetaId[txId] = this.startPolling({\n        bridgeTxMetaId: txId,\n      });\n    }\n  };\n\n  /**\n   * @deprecated For EVM/Solana swap/bridge txs we add tx to history in submitTx()\n   * For Solana swap/bridge we start polling in submitTx()\n   * For EVM bridge we listen for 'TransactionController:transactionConfirmed' and start polling there\n   * No clients currently call this, safe to remove in future versions\n   *\n   * Adds tx to history and starts polling for the bridge tx status\n   *\n   * @param txHistoryMeta - The parameters for creating the history item\n   */\n  startPollingForBridgeTxStatus = (\n    txHistoryMeta: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const { bridgeTxMeta } = txHistoryMeta;\n\n    this.#addTxToHistory(txHistoryMeta);\n    this.#startPollingForTxId(bridgeTxMeta.id);\n  };\n\n  // This will be called after you call this.startPolling()\n  // The args passed in are the args you passed in to startPolling()\n  _executePoll = async (pollingInput: BridgeStatusPollingInput) => {\n    await this.#fetchBridgeTxStatus(pollingInput);\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getMultichainSelectedAccountAddress() {\n    return this.#getMultichainSelectedAccount()?.address ?? '';\n  }\n\n  /**\n   * Handles the failure to fetch the bridge tx status\n   * We eventually stop polling for the tx if we fail too many times\n   * Failures (500 errors) can be due to:\n   * - The srcTxHash not being available immediately for STX\n   * - The srcTxHash being invalid for the chain. This case will never resolve so we stop polling for it to avoid hammering the Bridge API forever.\n   *\n   * @param bridgeTxMetaId - The txMetaId of the bridge tx\n   */\n  readonly #handleFetchFailure = (bridgeTxMetaId: string) => {\n    const { attempts } = this.state.txHistory[bridgeTxMetaId];\n\n    const newAttempts = attempts\n      ? {\n          counter: attempts.counter + 1,\n          lastAttemptTime: Date.now(),\n        }\n      : {\n          counter: 1,\n          lastAttemptTime: Date.now(),\n        };\n\n    // If we've failed too many times, stop polling for the tx\n    const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    if (newAttempts.counter >= MAX_ATTEMPTS && pollingToken) {\n      this.stopPollingByPollingToken(pollingToken);\n      delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    }\n\n    // Update the attempts counter\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].attempts = newAttempts;\n    });\n  };\n\n  readonly #fetchBridgeTxStatus = async ({\n    bridgeTxMetaId,\n  }: FetchBridgeTxStatusArgs) => {\n    const { txHistory } = this.state;\n\n    if (\n      shouldSkipFetchDueToFetchFailures(txHistory[bridgeTxMetaId]?.attempts)\n    ) {\n      return;\n    }\n\n    try {\n      // We try here because we receive 500 errors from Bridge API if we try to fetch immediately after submitting the source tx\n      // Oddly mostly happens on Optimism, never on Arbitrum. By the 2nd fetch, the Bridge API responds properly.\n      // Also srcTxHash may not be available immediately for STX, so we don't want to fetch in those cases\n      const historyItem = txHistory[bridgeTxMetaId];\n      const srcTxHash = this.#getSrcTxHash(bridgeTxMetaId);\n      if (!srcTxHash) {\n        return;\n      }\n\n      this.#updateSrcTxHash(bridgeTxMetaId, srcTxHash);\n\n      const statusRequest = getStatusRequestWithSrcTxHash(\n        historyItem.quote,\n        srcTxHash,\n      );\n      const status = await fetchBridgeTxStatus(\n        statusRequest,\n        this.#clientId,\n        this.#fetchFn,\n        this.#config.customBridgeApiBaseUrl,\n      );\n      const newBridgeHistoryItem = {\n        ...historyItem,\n        status,\n        completionTime:\n          status.status === StatusTypes.COMPLETE ||\n          status.status === StatusTypes.FAILED\n            ? Date.now()\n            : undefined, // TODO make this more accurate by looking up dest txHash block time\n        attempts: undefined,\n      };\n\n      // No need to purge these on network change or account change, TransactionController does not purge either.\n      // TODO In theory we can skip checking status if it's not the current account/network\n      // we need to keep track of the account that this is associated with as well so that we don't show it in Activity list for other accounts\n      // First stab at this will not stop polling when you are on a different account\n      this.update((state) => {\n        state.txHistory[bridgeTxMetaId] = newBridgeHistoryItem;\n      });\n\n      const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n      const isFinalStatus =\n        status.status === StatusTypes.COMPLETE ||\n        status.status === StatusTypes.FAILED;\n\n      if (isFinalStatus && pollingToken) {\n        this.stopPollingByPollingToken(pollingToken);\n        delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n        if (status.status === StatusTypes.COMPLETE) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            bridgeTxMetaId,\n          );\n        }\n        if (status.status === StatusTypes.FAILED) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Failed,\n            bridgeTxMetaId,\n          );\n        }\n      }\n    } catch (e) {\n      console.log('Failed to fetch bridge tx status', e);\n      this.#handleFetchFailure(bridgeTxMetaId);\n    }\n  };\n\n  readonly #getSrcTxHash = (bridgeTxMetaId: string): string | undefined => {\n    const { txHistory } = this.state;\n    // Prefer the srcTxHash from bridgeStatusState so we don't have to l ook up in TransactionController\n    // But it is possible to have bridgeHistoryItem in state without the srcTxHash yet when it is an STX\n    const srcTxHash = txHistory[bridgeTxMetaId].status.srcChain.txHash;\n\n    if (srcTxHash) {\n      return srcTxHash;\n    }\n\n    // Look up in TransactionController if txMeta has been updated with the srcTxHash\n    const txControllerState = this.messagingSystem.call(\n      'TransactionController:getState',\n    );\n    const txMeta = txControllerState.transactions.find(\n      (tx: TransactionMeta) => tx.id === bridgeTxMetaId,\n    );\n    return txMeta?.hash;\n  };\n\n  readonly #updateSrcTxHash = (bridgeTxMetaId: string, srcTxHash: string) => {\n    const { txHistory } = this.state;\n    if (txHistory[bridgeTxMetaId].status.srcChain.txHash) {\n      return;\n    }\n\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].status.srcChain.txHash = srcTxHash;\n    });\n  };\n\n  // Wipes the bridge status for the given address and chainId\n  // Will match only source chainId to the selectedChainId\n  readonly #wipeBridgeStatusByChainId = (\n    address: string,\n    selectedChainId: Hex,\n  ) => {\n    const sourceTxMetaIdsToDelete = Object.keys(this.state.txHistory).filter(\n      (txMetaId) => {\n        const bridgeHistoryItem = this.state.txHistory[txMetaId];\n\n        const hexSourceChainId = numberToHex(\n          bridgeHistoryItem.quote.srcChainId,\n        );\n\n        return (\n          bridgeHistoryItem.account === address &&\n          hexSourceChainId === selectedChainId\n        );\n      },\n    );\n\n    sourceTxMetaIdsToDelete.forEach((sourceTxMetaId) => {\n      const pollingToken = this.#pollingTokensByTxMetaId[sourceTxMetaId];\n\n      if (pollingToken) {\n        this.stopPollingByPollingToken(\n          this.#pollingTokensByTxMetaId[sourceTxMetaId],\n        );\n      }\n    });\n\n    this.update((state) => {\n      state.txHistory = sourceTxMetaIdsToDelete.reduce(\n        (acc, sourceTxMetaId) => {\n          delete acc[sourceTxMetaId];\n          return acc;\n        },\n        state.txHistory,\n      );\n    });\n  };\n\n  /**\n   * ******************************************************\n   * TX SUBMISSION HANDLING\n   *******************************************************\n   */\n\n  /**\n   * Submits the transaction to the snap using the keyring rpc method\n   * This adds an approval tx to the ApprovalsController in the background\n   * The client needs to handle the approval tx by redirecting to the confirmation page with the approvalTxId in the URL\n   *\n   * @param quoteResponse - The quote response\n   * @param quoteResponse.quote - The quote\n   * @returns The transaction meta\n   */\n  readonly #handleSolanaTx = async (\n    quoteResponse: QuoteResponse<string> & QuoteMetadata,\n  ) => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined multichain account',\n      );\n    }\n    if (!selectedAccount?.metadata?.snap?.id) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined snap id',\n      );\n    }\n\n    const request = getClientRequest(quoteResponse, selectedAccount);\n    const requestResponse = (await this.messagingSystem.call(\n      'SnapController:handleRequest',\n      request,\n    )) as string | { result: Record<string, string> } | { signature: string };\n\n    // The extension client actually redirects before it can do anytyhing with this meta\n    const txMeta = handleSolanaTxResponse(\n      requestResponse,\n      quoteResponse,\n      selectedAccount,\n    );\n\n    // TODO remove this eventually, just returning it now to match extension behavior\n    // OR if the snap can propagate the snapRequestId or keyringReqId to the ApprovalsController, this can return the approvalTxId instead and clients won't need to subscribe to the ApprovalsController state to redirect\n    return txMeta;\n  };\n\n  readonly #waitForHashAndReturnFinalTxMeta = async (\n    hashPromise?: Awaited<\n      ReturnType<TransactionController['addTransaction']>\n    >['result'],\n  ): Promise<TransactionMeta> => {\n    const transactionHash = await hashPromise;\n    const finalTransactionMeta: TransactionMeta | undefined =\n      this.messagingSystem\n        .call('TransactionController:getState')\n        .transactions.find(\n          (tx: TransactionMeta) => tx.hash === transactionHash,\n        );\n    if (!finalTransactionMeta) {\n      throw new Error(\n        'Failed to submit cross-chain swap tx: txMeta for txHash was not found',\n      );\n    }\n    return finalTransactionMeta;\n  };\n\n  readonly #handleApprovalTx = async (\n    isBridgeTx: boolean,\n    quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata,\n    requireApproval?: boolean,\n  ): Promise<TransactionMeta | undefined> => {\n    const { approval } = quoteResponse;\n\n    if (approval) {\n      const approveTx = async () => {\n        await this.#handleUSDTAllowanceReset(quoteResponse);\n\n        const approvalTxMeta = await this.#handleEvmTransaction({\n          transactionType: isBridgeTx\n            ? TransactionType.bridgeApproval\n            : TransactionType.swapApproval,\n          trade: approval,\n          requireApproval,\n        });\n\n        await handleLineaDelay(quoteResponse);\n        return approvalTxMeta;\n      };\n\n      return await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionApprovalCompleted\n            : TraceName.SwapTransactionApprovalCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        approveTx,\n      );\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Submits an EVM transaction to the TransactionController\n   *\n   * @param params - The parameters for the transaction\n   * @param params.transactionType - The type of transaction to submit\n   * @param params.trade - The trade data to confirm\n   * @param params.requireApproval - Whether to require approval for the transaction\n   * @returns The transaction meta\n   */\n  readonly #handleEvmTransaction = async ({\n    transactionType,\n    trade,\n    requireApproval = false,\n  }: {\n    transactionType: TransactionType;\n    trade: TxData;\n    requireApproval?: boolean;\n  }): Promise<TransactionMeta> => {\n    const actionId = generateActionId().toString();\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      trade.from,\n    );\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: unknown account in trade data',\n      );\n    }\n    const hexChainId = formatChainIdToHex(trade.chainId);\n    const networkClientId = this.messagingSystem.call(\n      'NetworkController:findNetworkClientIdByChainId',\n      hexChainId,\n    );\n\n    const requestOptions = {\n      actionId,\n      networkClientId,\n      requireApproval,\n      type: transactionType,\n      origin: 'metamask',\n    };\n    const transactionParams: Parameters<\n      TransactionController['addTransaction']\n    >[0] = {\n      ...trade,\n      chainId: hexChainId,\n      gasLimit: trade.gasLimit?.toString(),\n      gas: trade.gasLimit?.toString(),\n    };\n    const transactionParamsWithMaxGas: TransactionParams = {\n      ...transactionParams,\n      ...(await this.#calculateGasFees(\n        transactionParams,\n        networkClientId,\n        hexChainId,\n      )),\n    };\n\n    const { result } = await this.#addTransactionFn(\n      transactionParamsWithMaxGas,\n      requestOptions,\n    );\n\n    return await this.#waitForHashAndReturnFinalTxMeta(result);\n  };\n\n  readonly #handleUSDTAllowanceReset = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n  ) => {\n    const resetApproval = await getUSDTAllowanceResetTx(\n      this.messagingSystem,\n      quoteResponse,\n    );\n    if (resetApproval) {\n      await this.#handleEvmTransaction({\n        transactionType: TransactionType.bridgeApproval,\n        trade: resetApproval,\n      });\n    }\n  };\n\n  readonly #calculateGasFees = async (\n    transactionParams: TransactionParams,\n    networkClientId: string,\n    chainId: Hex,\n  ) => {\n    const { gasFeeEstimates } = this.messagingSystem.call(\n      'GasFeeController:getState',\n    );\n    const { estimates: txGasFeeEstimates } = await this.#estimateGasFeeFn({\n      transactionParams,\n      chainId,\n      networkClientId,\n    });\n    const { maxFeePerGas, maxPriorityFeePerGas } = getTxGasEstimates({\n      networkGasFeeEstimates: gasFeeEstimates,\n      txGasFeeEstimates,\n    });\n    const maxGasLimit = toHex(transactionParams.gas ?? 0);\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gas: maxGasLimit,\n    };\n  };\n\n  /**\n   * Submits batched EVM transactions to the TransactionController\n   *\n   * @param args - The parameters for the transaction\n   * @param args.isBridgeTx - Whether the transaction is a bridge transaction\n   * @param args.trade - The trade data to confirm\n   * @param args.approval - The approval data to confirm\n   * @param args.resetApproval - The ethereum:USDT reset approval data to confirm\n   * @param args.quoteResponse - The quote response\n   * @param args.requireApproval - Whether to require approval for the transaction\n   * @returns The approvalMeta and tradeMeta for the batched transaction\n   */\n  readonly #handleEvmTransactionBatch = async (\n    args: Omit<\n      Parameters<typeof getAddTransactionBatchParams>[0],\n      'messagingSystem' | 'estimateGasFeeFn'\n    >,\n  ) => {\n    const transactionParams = await getAddTransactionBatchParams({\n      messagingSystem: this.messagingSystem,\n      estimateGasFeeFn: this.#estimateGasFeeFn,\n      ...args,\n    });\n    const txDataByType = {\n      [TransactionType.bridgeApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridgeApproval,\n      )?.params.data,\n      [TransactionType.swapApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swapApproval,\n      )?.params.data,\n      [TransactionType.bridge]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridge,\n      )?.params.data,\n      [TransactionType.swap]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swap,\n      )?.params.data,\n    };\n\n    const { batchId } = await this.#addTransactionBatchFn(transactionParams);\n    const { approvalMeta, tradeMeta } = findAndUpdateTransactionsInBatch({\n      messagingSystem: this.messagingSystem,\n      updateTransactionFn: this.#updateTransactionFn,\n      batchId,\n      txDataByType,\n    });\n\n    if (!tradeMeta) {\n      throw new Error(\n        'Failed to update cross-chain swap transaction batch: tradeMeta not found',\n      );\n    }\n\n    return { approvalMeta, tradeMeta };\n  };\n\n  /**\n   * Submits a cross-chain swap transaction\n   *\n   * @param quoteResponse - The quote response\n   * @param isStxEnabledOnClient - Whether smart transactions are enabled on the client, for example the getSmartTransactionsEnabled selector value from the extension\n   * @returns The transaction meta\n   */\n  submitTx = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n    isStxEnabledOnClient: boolean,\n  ): Promise<TransactionMeta & Partial<SolanaTransactionMeta>> => {\n    this.messagingSystem.call('BridgeController:stopPollingForQuotes');\n\n    // Before the tx is confirmed, its data is not available in txHistory\n    // The quote is used to populate event properties before confirmation\n    const preConfirmationProperties = {\n      ...getPriceImpactFromQuote(quoteResponse.quote),\n      ...getTradeDataFromQuote(quoteResponse),\n      token_symbol_source: quoteResponse.quote.srcAsset.symbol,\n      token_symbol_destination: quoteResponse.quote.destAsset.symbol,\n      usd_amount_source: Number(quoteResponse.sentAmount?.usd ?? 0),\n      stx_enabled: isStxEnabledOnClient,\n    };\n    // Emit Submitted event after submit button is clicked\n    this.#trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.Submitted,\n      undefined,\n      preConfirmationProperties,\n    );\n\n    let txMeta: TransactionMeta & Partial<SolanaTransactionMeta>;\n    let approvalTxId: string | undefined;\n    const startTime = Date.now();\n\n    const isBridgeTx = isCrossChain(\n      quoteResponse.quote.srcChainId,\n      quoteResponse.quote.destChainId,\n    );\n\n    // Submit SOLANA tx\n    if (\n      isSolanaChainId(quoteResponse.quote.srcChainId) &&\n      typeof quoteResponse.trade === 'string'\n    ) {\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        async () => {\n          try {\n            return await this.#handleSolanaTx(\n              quoteResponse as QuoteResponse<string> & QuoteMetadata,\n            );\n          } catch (error) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              txMeta?.id,\n              {\n                error_message: (error as Error)?.message,\n                ...preConfirmationProperties,\n              },\n            );\n            throw error;\n          }\n        },\n      );\n    } else {\n      // Submit EVM tx\n      // For hardware wallets on Mobile, this is fixes an issue where the Ledger does not get prompted for the 2nd approval\n      // Extension does not have this issue\n      const requireApproval =\n        this.#clientId === BridgeClientId.MOBILE &&\n        isHardwareWallet(this.#getMultichainSelectedAccount());\n\n      // Handle smart transactions if enabled\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: isStxEnabledOnClient,\n          },\n        },\n        async () => {\n          if (isStxEnabledOnClient) {\n            const { tradeMeta, approvalMeta } =\n              await this.#handleEvmTransactionBatch({\n                isBridgeTx,\n                resetApproval: await getUSDTAllowanceResetTx(\n                  this.messagingSystem,\n                  quoteResponse,\n                ),\n                approval: quoteResponse.approval,\n                trade: quoteResponse.trade as TxData,\n                quoteResponse,\n                requireApproval,\n              });\n            approvalTxId = approvalMeta?.id;\n            return tradeMeta;\n          }\n          // Set approval time and id if an approval tx is needed\n          const approvalTxMeta = await this.#handleApprovalTx(\n            isBridgeTx,\n            quoteResponse,\n            requireApproval,\n          );\n          approvalTxId = approvalTxMeta?.id;\n          return await this.#handleEvmTransaction({\n            transactionType: isBridgeTx\n              ? TransactionType.bridge\n              : TransactionType.swap,\n            trade: quoteResponse.trade as TxData,\n            requireApproval,\n          });\n        },\n      );\n    }\n\n    try {\n      // Add swap or bridge tx to history\n      this.#addTxToHistory({\n        bridgeTxMeta: txMeta, // Only the id field is used by the BridgeStatusController\n        statusRequest: {\n          ...getStatusRequestParams(quoteResponse),\n          srcTxHash: txMeta.hash,\n        },\n        quoteResponse,\n        slippagePercentage: 0, // TODO include slippage provided by quote if using dynamic slippage, or slippage from quote request\n        isStxEnabled: isStxEnabledOnClient,\n        startTime,\n        approvalTxId,\n      });\n\n      if (isSolanaChainId(quoteResponse.quote.srcChainId)) {\n        // Start polling for bridge tx status\n        this.#startPollingForTxId(txMeta.id);\n        // Track Solana Swap completed event\n        if (!isBridgeTx) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            txMeta.id,\n          );\n        }\n      }\n    } catch {\n      // Ignore errors here, we don't want to crash the app if this fails and tx submission succeeds\n    }\n    return txMeta;\n  };\n\n  /**\n   * Tracks post-submission events for a cross-chain swap based on the history item\n   *\n   * @param eventName - The name of the event to track\n   * @param txMetaId - The txMetaId of the history item to track the event for\n   * @param eventProperties - The properties for the event\n   */\n  readonly #trackUnifiedSwapBridgeEvent = <\n    T extends\n      | typeof UnifiedSwapBridgeEventName.Submitted\n      | typeof UnifiedSwapBridgeEventName.Failed\n      | typeof UnifiedSwapBridgeEventName.SnapConfirmationViewed\n      | typeof UnifiedSwapBridgeEventName.Completed,\n  >(\n    eventName: T,\n    txMetaId?: string,\n    eventProperties?: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    if (!txMetaId) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const historyItem: BridgeHistoryItem | undefined =\n      this.state.txHistory[txMetaId];\n    if (!historyItem) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      historyItem.account,\n    );\n\n    const requiredEventProperties = {\n      action_type: getActionType(\n        historyItem.quote.srcChainId,\n        historyItem.quote.destChainId,\n      ),\n      ...(eventProperties ?? {}),\n      ...getRequestParamFromHistory(historyItem),\n      ...getRequestMetadataFromHistory(historyItem, selectedAccount),\n      ...getTradeDataFromHistory(historyItem),\n      ...getTxStatusesFromHistory(historyItem),\n      ...getFinalizedTxProperties(historyItem),\n      ...getPriceImpactFromQuote(historyItem.quote),\n    };\n\n    this.messagingSystem.call(\n      'BridgeController:trackUnifiedSwapBridgeEvent',\n      eventName,\n      requiredEventProperties,\n    );\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"bridge-status-controller.cjs","sourceRoot":"","sources":["../src/bridge-status-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StateMetadata } from '@metamask/base-controller';\nimport type {\n  QuoteMetadata,\n  RequiredEventContextFromClient,\n  TxData,\n  QuoteResponse,\n} from '@metamask/bridge-controller';\nimport {\n  formatChainIdToHex,\n  isSolanaChainId,\n  StatusTypes,\n  UnifiedSwapBridgeEventName,\n  getActionType,\n  formatChainIdToCaip,\n  isCrossChain,\n  isHardwareWallet,\n} from '@metamask/bridge-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { toHex } from '@metamask/controller-utils';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  TransactionController,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  BRIDGE_PROD_API_BASE_URL,\n  BRIDGE_STATUS_CONTROLLER_NAME,\n  DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n  MAX_ATTEMPTS,\n  REFRESH_INTERVAL_MS,\n  TraceName,\n} from './constants';\nimport type {\n  BridgeStatusControllerState,\n  StartPollingForBridgeTxStatusArgsSerialized,\n  FetchFunction,\n  SolanaTransactionMeta,\n  BridgeHistoryItem,\n} from './types';\nimport { type BridgeStatusControllerMessenger } from './types';\nimport { BridgeClientId } from './types';\nimport {\n  fetchBridgeTxStatus,\n  getStatusRequestWithSrcTxHash,\n  shouldSkipFetchDueToFetchFailures,\n} from './utils/bridge-status';\nimport { getTxGasEstimates } from './utils/gas';\nimport {\n  getFinalizedTxProperties,\n  getPriceImpactFromQuote,\n  getRequestMetadataFromHistory,\n  getRequestParamFromHistory,\n  getTradeDataFromHistory,\n  getTradeDataFromQuote,\n  getEVMTxPropertiesFromTransactionMeta,\n  getTxStatusesFromHistory,\n} from './utils/metrics';\nimport {\n  findAndUpdateTransactionsInBatch,\n  getAddTransactionBatchParams,\n  getClientRequest,\n  getStatusRequestParams,\n  getUSDTAllowanceResetTx,\n  handleLineaDelay,\n  handleSolanaTxResponse,\n} from './utils/transaction';\nimport { generateActionId } from './utils/transaction';\n\nconst metadata: StateMetadata<BridgeStatusControllerState> = {\n  // We want to persist the bridge status state so that we can show the proper data for the Activity list\n  // basically match the behavior of TransactionController\n  txHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/** The input to start polling for the {@link BridgeStatusController} */\ntype BridgeStatusPollingInput = FetchBridgeTxStatusArgs;\n\ntype SrcTxMetaId = string;\nexport type FetchBridgeTxStatusArgs = {\n  bridgeTxMetaId: string;\n};\nexport class BridgeStatusController extends StaticIntervalPollingController<BridgeStatusPollingInput>()<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState,\n  BridgeStatusControllerMessenger\n> {\n  #pollingTokensByTxMetaId: Record<SrcTxMetaId, string> = {};\n\n  readonly #clientId: BridgeClientId;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #config: {\n    customBridgeApiBaseUrl: string;\n  };\n\n  readonly #addTransactionFn: typeof TransactionController.prototype.addTransaction;\n\n  readonly #addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n\n  readonly #updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n\n  readonly #estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n\n  readonly #trace: TraceCallback;\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    fetchFn,\n    addTransactionFn,\n    addTransactionBatchFn,\n    updateTransactionFn,\n    estimateGasFeeFn,\n    config,\n    traceFn,\n  }: {\n    messenger: BridgeStatusControllerMessenger;\n    state?: Partial<BridgeStatusControllerState>;\n    clientId: BridgeClientId;\n    fetchFn: FetchFunction;\n    addTransactionFn: typeof TransactionController.prototype.addTransaction;\n    addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n    updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n    estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_STATUS_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      // Restore the persisted state\n      state: {\n        ...DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n        ...state,\n      },\n    });\n\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#addTransactionFn = addTransactionFn;\n    this.#addTransactionBatchFn = addTransactionBatchFn;\n    this.#updateTransactionFn = updateTransactionFn;\n    this.#estimateGasFeeFn = estimateGasFeeFn;\n    this.#config = {\n      customBridgeApiBaseUrl:\n        config?.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n    };\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:startPollingForBridgeTxStatus`,\n      this.startPollingForBridgeTxStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:wipeBridgeStatus`,\n      this.wipeBridgeStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:submitTx`,\n      this.submitTx.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:restartPollingForFailedAttempts`,\n      this.restartPollingForFailedAttempts.bind(this),\n    );\n\n    // Set interval\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionFailed',\n      ({ transactionMeta }) => {\n        const { type, status, id } = transactionMeta;\n        if (\n          type &&\n          [\n            TransactionType.bridge,\n            TransactionType.swap,\n            TransactionType.bridgeApproval,\n            TransactionType.swapApproval,\n          ].includes(type) &&\n          [\n            TransactionStatus.failed,\n            TransactionStatus.dropped,\n            TransactionStatus.rejected,\n          ].includes(status)\n        ) {\n          // Mark tx as failed in txHistory\n          this.#markTxAsFailed(transactionMeta);\n          // Track failed event\n          if (status !== TransactionStatus.rejected) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              id,\n              getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n            );\n          }\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionConfirmed',\n      (transactionMeta) => {\n        const { type, id, chainId } = transactionMeta;\n        if (type === TransactionType.swap) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            id,\n            getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n          );\n        }\n        if (type === TransactionType.bridge && !isSolanaChainId(chainId)) {\n          this.#startPollingForTxId(id);\n        }\n      },\n    );\n\n    // If you close the extension, but keep the browser open, the polling continues\n    // If you close the browser, the polling stops\n    // Check for historyItems that do not have a status of complete and restart polling\n    this.#restartPollingForIncompleteHistoryItems();\n  }\n\n  // Mark tx as failed in txHistory if either the approval or trade fails\n  readonly #markTxAsFailed = ({ id }: TransactionMeta) => {\n    const txHistoryKey = this.state.txHistory[id]\n      ? id\n      : Object.keys(this.state.txHistory).find(\n          (key) => this.state.txHistory[key].approvalTxId === id,\n        );\n    if (!txHistoryKey) {\n      return;\n    }\n    this.update((statusState) => {\n      statusState.txHistory[txHistoryKey].status.status = StatusTypes.FAILED;\n    });\n  };\n\n  resetState = () => {\n    this.update((state) => {\n      state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n    });\n  };\n\n  wipeBridgeStatus = ({\n    address,\n    ignoreNetwork,\n  }: {\n    address: string;\n    ignoreNetwork: boolean;\n  }) => {\n    // Wipe all networks for this address\n    if (ignoreNetwork) {\n      this.update((state) => {\n        state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      const selectedNetworkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      );\n      const selectedChainId = selectedNetworkClient.configuration.chainId;\n\n      this.#wipeBridgeStatusByChainId(address, selectedChainId);\n    }\n  };\n\n  /**\n   * Resets the attempts counter for a bridge transaction history item\n   * and restarts polling if it was previously stopped due to max attempts\n   *\n   * @param identifier - Object containing either txMetaId or txHash to identify the history item\n   * @param identifier.txMetaId - The transaction meta ID\n   * @param identifier.txHash - The transaction hash\n   */\n  restartPollingForFailedAttempts = (identifier: {\n    txMetaId?: string;\n    txHash?: string;\n  }) => {\n    const { txMetaId, txHash } = identifier;\n\n    if (!txMetaId && !txHash) {\n      throw new Error('Either txMetaId or txHash must be provided');\n    }\n\n    // Find the history item by txMetaId or txHash\n    let targetTxMetaId: string | undefined;\n\n    if (txMetaId) {\n      // Direct lookup by txMetaId\n      if (this.state.txHistory[txMetaId]) {\n        targetTxMetaId = txMetaId;\n      }\n    } else if (txHash) {\n      // Search by txHash in status.srcChain.txHash\n      targetTxMetaId = Object.keys(this.state.txHistory).find(\n        (id) => this.state.txHistory[id].status.srcChain.txHash === txHash,\n      );\n    }\n\n    if (!targetTxMetaId) {\n      throw new Error(\n        `No bridge transaction history found for ${\n          txMetaId ? `txMetaId: ${txMetaId}` : `txHash: ${txHash}`\n        }`,\n      );\n    }\n\n    const historyItem = this.state.txHistory[targetTxMetaId];\n\n    // Reset the attempts counter\n    this.update((state) => {\n      if (targetTxMetaId) {\n        state.txHistory[targetTxMetaId].attempts = undefined;\n      }\n    });\n\n    // Restart polling if it was stopped and this is a bridge transaction\n    const isBridgeTx = isCrossChain(\n      historyItem.quote.srcChainId,\n      historyItem.quote.destChainId,\n    );\n\n    if (isBridgeTx) {\n      // Check if polling was stopped (no active polling token)\n      const existingPollingToken =\n        this.#pollingTokensByTxMetaId[targetTxMetaId];\n\n      if (!existingPollingToken) {\n        // Restart polling\n        this.#startPollingForTxId(targetTxMetaId);\n      }\n    }\n  };\n\n  /**\n   * Restart polling for txs that are not in a final state\n   * This is called during initialization\n   */\n  readonly #restartPollingForIncompleteHistoryItems = () => {\n    // Check for historyItems that do not have a status of complete and restart polling\n    const { txHistory } = this.state;\n    const historyItems = Object.values(txHistory);\n    const incompleteHistoryItems = historyItems\n      .filter(\n        (historyItem) =>\n          historyItem.status.status === StatusTypes.PENDING ||\n          historyItem.status.status === StatusTypes.UNKNOWN,\n      )\n      .filter((historyItem) => {\n        // Check if we are already polling this tx, if so, skip restarting polling for that\n        const pollingToken =\n          this.#pollingTokensByTxMetaId[historyItem.txMetaId];\n        return !pollingToken;\n      })\n      // Swap txs don't need to have their statuses polled\n      .filter((historyItem) => {\n        const isBridgeTx = isCrossChain(\n          historyItem.quote.srcChainId,\n          historyItem.quote.destChainId,\n        );\n        return isBridgeTx;\n      });\n\n    incompleteHistoryItems.forEach((historyItem) => {\n      const bridgeTxMetaId = historyItem.txMetaId;\n      const shouldSkipFetch = shouldSkipFetchDueToFetchFailures(\n        historyItem.attempts,\n      );\n      if (shouldSkipFetch) {\n        return;\n      }\n\n      // We manually call startPolling() here rather than go through startPollingForBridgeTxStatus()\n      // because we don't want to overwrite the existing historyItem in state\n      this.#startPollingForTxId(bridgeTxMetaId);\n    });\n  };\n\n  readonly #addTxToHistory = (\n    startPollingForBridgeTxStatusArgs: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const {\n      bridgeTxMeta,\n      statusRequest,\n      quoteResponse,\n      startTime,\n      slippagePercentage,\n      initialDestAssetBalance,\n      targetContractAddress,\n      approvalTxId,\n      isStxEnabled,\n    } = startPollingForBridgeTxStatusArgs;\n\n    const accountAddress = this.#getMultichainSelectedAccountAddress();\n    // Write all non-status fields to state so we can reference the quote in Activity list without the Bridge API\n    // We know it's in progress but not the exact status yet\n    const txHistoryItem = {\n      txMetaId: bridgeTxMeta.id,\n      batchId: bridgeTxMeta.batchId,\n      quote: quoteResponse.quote,\n      startTime,\n      estimatedProcessingTimeInSeconds:\n        quoteResponse.estimatedProcessingTimeInSeconds,\n      slippagePercentage,\n      pricingData: {\n        amountSent: quoteResponse.sentAmount.amount,\n        amountSentInUsd: quoteResponse.sentAmount.usd ?? undefined,\n        quotedGasInUsd: quoteResponse.gasFee.effective?.usd ?? undefined,\n        quotedReturnInUsd: quoteResponse.toTokenAmount.usd ?? undefined,\n      },\n      initialDestAssetBalance,\n      targetContractAddress,\n      account: accountAddress,\n      status: {\n        // We always have a PENDING status when we start polling for a tx, don't need the Bridge API for that\n        // Also we know the bare minimum fields for status at this point in time\n        status: StatusTypes.PENDING,\n        srcChain: {\n          chainId: statusRequest.srcChainId,\n          txHash: statusRequest.srcTxHash,\n        },\n      },\n      hasApprovalTx: Boolean(quoteResponse.approval),\n      approvalTxId,\n      isStxEnabled: isStxEnabled ?? false,\n    };\n    this.update((state) => {\n      // Use the txMeta.id as the key so we can reference the txMeta in TransactionController\n      state.txHistory[bridgeTxMeta.id] = txHistoryItem;\n    });\n  };\n\n  readonly #startPollingForTxId = (txId: string) => {\n    // If we are already polling for this tx, stop polling for it before restarting\n    const existingPollingToken = this.#pollingTokensByTxMetaId[txId];\n    if (existingPollingToken) {\n      this.stopPollingByPollingToken(existingPollingToken);\n    }\n\n    const txHistoryItem = this.state.txHistory[txId];\n    if (!txHistoryItem) {\n      return;\n    }\n    const { quote } = txHistoryItem;\n\n    const isBridgeTx = isCrossChain(quote.srcChainId, quote.destChainId);\n    if (isBridgeTx) {\n      this.#pollingTokensByTxMetaId[txId] = this.startPolling({\n        bridgeTxMetaId: txId,\n      });\n    }\n  };\n\n  /**\n   * @deprecated For EVM/Solana swap/bridge txs we add tx to history in submitTx()\n   * For Solana swap/bridge we start polling in submitTx()\n   * For EVM bridge we listen for 'TransactionController:transactionConfirmed' and start polling there\n   * No clients currently call this, safe to remove in future versions\n   *\n   * Adds tx to history and starts polling for the bridge tx status\n   *\n   * @param txHistoryMeta - The parameters for creating the history item\n   */\n  startPollingForBridgeTxStatus = (\n    txHistoryMeta: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const { bridgeTxMeta } = txHistoryMeta;\n\n    this.#addTxToHistory(txHistoryMeta);\n    this.#startPollingForTxId(bridgeTxMeta.id);\n  };\n\n  // This will be called after you call this.startPolling()\n  // The args passed in are the args you passed in to startPolling()\n  _executePoll = async (pollingInput: BridgeStatusPollingInput) => {\n    await this.#fetchBridgeTxStatus(pollingInput);\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getMultichainSelectedAccountAddress() {\n    return this.#getMultichainSelectedAccount()?.address ?? '';\n  }\n\n  /**\n   * Handles the failure to fetch the bridge tx status\n   * We eventually stop polling for the tx if we fail too many times\n   * Failures (500 errors) can be due to:\n   * - The srcTxHash not being available immediately for STX\n   * - The srcTxHash being invalid for the chain. This case will never resolve so we stop polling for it to avoid hammering the Bridge API forever.\n   *\n   * @param bridgeTxMetaId - The txMetaId of the bridge tx\n   */\n  readonly #handleFetchFailure = (bridgeTxMetaId: string) => {\n    const { attempts } = this.state.txHistory[bridgeTxMetaId];\n\n    const newAttempts = attempts\n      ? {\n          counter: attempts.counter + 1,\n          lastAttemptTime: Date.now(),\n        }\n      : {\n          counter: 1,\n          lastAttemptTime: Date.now(),\n        };\n\n    // If we've failed too many times, stop polling for the tx\n    const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    if (newAttempts.counter >= MAX_ATTEMPTS && pollingToken) {\n      this.stopPollingByPollingToken(pollingToken);\n      delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    }\n\n    // Update the attempts counter\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].attempts = newAttempts;\n    });\n  };\n\n  readonly #fetchBridgeTxStatus = async ({\n    bridgeTxMetaId,\n  }: FetchBridgeTxStatusArgs) => {\n    const { txHistory } = this.state;\n\n    if (\n      shouldSkipFetchDueToFetchFailures(txHistory[bridgeTxMetaId]?.attempts)\n    ) {\n      return;\n    }\n\n    try {\n      // We try here because we receive 500 errors from Bridge API if we try to fetch immediately after submitting the source tx\n      // Oddly mostly happens on Optimism, never on Arbitrum. By the 2nd fetch, the Bridge API responds properly.\n      // Also srcTxHash may not be available immediately for STX, so we don't want to fetch in those cases\n      const historyItem = txHistory[bridgeTxMetaId];\n      const srcTxHash = this.#getSrcTxHash(bridgeTxMetaId);\n      if (!srcTxHash) {\n        return;\n      }\n\n      this.#updateSrcTxHash(bridgeTxMetaId, srcTxHash);\n\n      const statusRequest = getStatusRequestWithSrcTxHash(\n        historyItem.quote,\n        srcTxHash,\n      );\n      const status = await fetchBridgeTxStatus(\n        statusRequest,\n        this.#clientId,\n        this.#fetchFn,\n        this.#config.customBridgeApiBaseUrl,\n      );\n      const newBridgeHistoryItem = {\n        ...historyItem,\n        status,\n        completionTime:\n          status.status === StatusTypes.COMPLETE ||\n          status.status === StatusTypes.FAILED\n            ? Date.now()\n            : undefined, // TODO make this more accurate by looking up dest txHash block time\n        attempts: undefined,\n      };\n\n      // No need to purge these on network change or account change, TransactionController does not purge either.\n      // TODO In theory we can skip checking status if it's not the current account/network\n      // we need to keep track of the account that this is associated with as well so that we don't show it in Activity list for other accounts\n      // First stab at this will not stop polling when you are on a different account\n      this.update((state) => {\n        state.txHistory[bridgeTxMetaId] = newBridgeHistoryItem;\n      });\n\n      const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n      const isFinalStatus =\n        status.status === StatusTypes.COMPLETE ||\n        status.status === StatusTypes.FAILED;\n\n      if (isFinalStatus && pollingToken) {\n        this.stopPollingByPollingToken(pollingToken);\n        delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n        if (status.status === StatusTypes.COMPLETE) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            bridgeTxMetaId,\n          );\n        }\n        if (status.status === StatusTypes.FAILED) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Failed,\n            bridgeTxMetaId,\n          );\n        }\n      }\n    } catch (e) {\n      console.log('Failed to fetch bridge tx status', e);\n      this.#handleFetchFailure(bridgeTxMetaId);\n    }\n  };\n\n  readonly #getSrcTxHash = (bridgeTxMetaId: string): string | undefined => {\n    const { txHistory } = this.state;\n    // Prefer the srcTxHash from bridgeStatusState so we don't have to l ook up in TransactionController\n    // But it is possible to have bridgeHistoryItem in state without the srcTxHash yet when it is an STX\n    const srcTxHash = txHistory[bridgeTxMetaId].status.srcChain.txHash;\n\n    if (srcTxHash) {\n      return srcTxHash;\n    }\n\n    // Look up in TransactionController if txMeta has been updated with the srcTxHash\n    const txControllerState = this.messagingSystem.call(\n      'TransactionController:getState',\n    );\n    const txMeta = txControllerState.transactions.find(\n      (tx: TransactionMeta) => tx.id === bridgeTxMetaId,\n    );\n    return txMeta?.hash;\n  };\n\n  readonly #updateSrcTxHash = (bridgeTxMetaId: string, srcTxHash: string) => {\n    const { txHistory } = this.state;\n    if (txHistory[bridgeTxMetaId].status.srcChain.txHash) {\n      return;\n    }\n\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].status.srcChain.txHash = srcTxHash;\n    });\n  };\n\n  // Wipes the bridge status for the given address and chainId\n  // Will match only source chainId to the selectedChainId\n  readonly #wipeBridgeStatusByChainId = (\n    address: string,\n    selectedChainId: Hex,\n  ) => {\n    const sourceTxMetaIdsToDelete = Object.keys(this.state.txHistory).filter(\n      (txMetaId) => {\n        const bridgeHistoryItem = this.state.txHistory[txMetaId];\n\n        const hexSourceChainId = numberToHex(\n          bridgeHistoryItem.quote.srcChainId,\n        );\n\n        return (\n          bridgeHistoryItem.account === address &&\n          hexSourceChainId === selectedChainId\n        );\n      },\n    );\n\n    sourceTxMetaIdsToDelete.forEach((sourceTxMetaId) => {\n      const pollingToken = this.#pollingTokensByTxMetaId[sourceTxMetaId];\n\n      if (pollingToken) {\n        this.stopPollingByPollingToken(\n          this.#pollingTokensByTxMetaId[sourceTxMetaId],\n        );\n      }\n    });\n\n    this.update((state) => {\n      state.txHistory = sourceTxMetaIdsToDelete.reduce(\n        (acc, sourceTxMetaId) => {\n          delete acc[sourceTxMetaId];\n          return acc;\n        },\n        state.txHistory,\n      );\n    });\n  };\n\n  /**\n   * ******************************************************\n   * TX SUBMISSION HANDLING\n   *******************************************************\n   */\n\n  /**\n   * Submits the transaction to the snap using the keyring rpc method\n   * This adds an approval tx to the ApprovalsController in the background\n   * The client needs to handle the approval tx by redirecting to the confirmation page with the approvalTxId in the URL\n   *\n   * @param quoteResponse - The quote response\n   * @param quoteResponse.quote - The quote\n   * @returns The transaction meta\n   */\n  readonly #handleSolanaTx = async (\n    quoteResponse: QuoteResponse<string> & QuoteMetadata,\n  ) => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined multichain account',\n      );\n    }\n    if (!selectedAccount?.metadata?.snap?.id) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined snap id',\n      );\n    }\n\n    const request = getClientRequest(quoteResponse, selectedAccount);\n    const requestResponse = (await this.messagingSystem.call(\n      'SnapController:handleRequest',\n      request,\n    )) as string | { result: Record<string, string> } | { signature: string };\n\n    // The extension client actually redirects before it can do anytyhing with this meta\n    const txMeta = handleSolanaTxResponse(\n      requestResponse,\n      quoteResponse,\n      selectedAccount,\n    );\n\n    // TODO remove this eventually, just returning it now to match extension behavior\n    // OR if the snap can propagate the snapRequestId or keyringReqId to the ApprovalsController, this can return the approvalTxId instead and clients won't need to subscribe to the ApprovalsController state to redirect\n    return txMeta;\n  };\n\n  readonly #waitForHashAndReturnFinalTxMeta = async (\n    hashPromise?: Awaited<\n      ReturnType<TransactionController['addTransaction']>\n    >['result'],\n  ): Promise<TransactionMeta> => {\n    const transactionHash = await hashPromise;\n    const finalTransactionMeta: TransactionMeta | undefined =\n      this.messagingSystem\n        .call('TransactionController:getState')\n        .transactions.find(\n          (tx: TransactionMeta) => tx.hash === transactionHash,\n        );\n    if (!finalTransactionMeta) {\n      throw new Error(\n        'Failed to submit cross-chain swap tx: txMeta for txHash was not found',\n      );\n    }\n    return finalTransactionMeta;\n  };\n\n  readonly #handleApprovalTx = async (\n    isBridgeTx: boolean,\n    quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata,\n    requireApproval?: boolean,\n  ): Promise<TransactionMeta | undefined> => {\n    const { approval } = quoteResponse;\n\n    if (approval) {\n      const approveTx = async () => {\n        await this.#handleUSDTAllowanceReset(quoteResponse);\n\n        const approvalTxMeta = await this.#handleEvmTransaction({\n          transactionType: isBridgeTx\n            ? TransactionType.bridgeApproval\n            : TransactionType.swapApproval,\n          trade: approval,\n          requireApproval,\n        });\n\n        await handleLineaDelay(quoteResponse);\n        return approvalTxMeta;\n      };\n\n      return await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionApprovalCompleted\n            : TraceName.SwapTransactionApprovalCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        approveTx,\n      );\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Submits an EVM transaction to the TransactionController\n   *\n   * @param params - The parameters for the transaction\n   * @param params.transactionType - The type of transaction to submit\n   * @param params.trade - The trade data to confirm\n   * @param params.requireApproval - Whether to require approval for the transaction\n   * @returns The transaction meta\n   */\n  readonly #handleEvmTransaction = async ({\n    transactionType,\n    trade,\n    requireApproval = false,\n  }: {\n    transactionType: TransactionType;\n    trade: TxData;\n    requireApproval?: boolean;\n  }): Promise<TransactionMeta> => {\n    const actionId = generateActionId().toString();\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      trade.from,\n    );\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: unknown account in trade data',\n      );\n    }\n    const hexChainId = formatChainIdToHex(trade.chainId);\n    const networkClientId = this.messagingSystem.call(\n      'NetworkController:findNetworkClientIdByChainId',\n      hexChainId,\n    );\n\n    const requestOptions = {\n      actionId,\n      networkClientId,\n      requireApproval,\n      type: transactionType,\n      origin: 'metamask',\n    };\n    const transactionParams: Parameters<\n      TransactionController['addTransaction']\n    >[0] = {\n      ...trade,\n      chainId: hexChainId,\n      gasLimit: trade.gasLimit?.toString(),\n      gas: trade.gasLimit?.toString(),\n    };\n    const transactionParamsWithMaxGas: TransactionParams = {\n      ...transactionParams,\n      ...(await this.#calculateGasFees(\n        transactionParams,\n        networkClientId,\n        hexChainId,\n      )),\n    };\n\n    const { result } = await this.#addTransactionFn(\n      transactionParamsWithMaxGas,\n      requestOptions,\n    );\n\n    return await this.#waitForHashAndReturnFinalTxMeta(result);\n  };\n\n  readonly #handleUSDTAllowanceReset = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n  ) => {\n    const resetApproval = await getUSDTAllowanceResetTx(\n      this.messagingSystem,\n      quoteResponse,\n    );\n    if (resetApproval) {\n      await this.#handleEvmTransaction({\n        transactionType: TransactionType.bridgeApproval,\n        trade: resetApproval,\n      });\n    }\n  };\n\n  readonly #calculateGasFees = async (\n    transactionParams: TransactionParams,\n    networkClientId: string,\n    chainId: Hex,\n  ) => {\n    const { gasFeeEstimates } = this.messagingSystem.call(\n      'GasFeeController:getState',\n    );\n    const { estimates: txGasFeeEstimates } = await this.#estimateGasFeeFn({\n      transactionParams,\n      chainId,\n      networkClientId,\n    });\n    const { maxFeePerGas, maxPriorityFeePerGas } = getTxGasEstimates({\n      networkGasFeeEstimates: gasFeeEstimates,\n      txGasFeeEstimates,\n    });\n    const maxGasLimit = toHex(transactionParams.gas ?? 0);\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gas: maxGasLimit,\n    };\n  };\n\n  /**\n   * Submits batched EVM transactions to the TransactionController\n   *\n   * @param args - The parameters for the transaction\n   * @param args.isBridgeTx - Whether the transaction is a bridge transaction\n   * @param args.trade - The trade data to confirm\n   * @param args.approval - The approval data to confirm\n   * @param args.resetApproval - The ethereum:USDT reset approval data to confirm\n   * @param args.quoteResponse - The quote response\n   * @param args.requireApproval - Whether to require approval for the transaction\n   * @returns The approvalMeta and tradeMeta for the batched transaction\n   */\n  readonly #handleEvmTransactionBatch = async (\n    args: Omit<\n      Parameters<typeof getAddTransactionBatchParams>[0],\n      'messagingSystem' | 'estimateGasFeeFn'\n    >,\n  ) => {\n    const transactionParams = await getAddTransactionBatchParams({\n      messagingSystem: this.messagingSystem,\n      estimateGasFeeFn: this.#estimateGasFeeFn,\n      ...args,\n    });\n    const txDataByType = {\n      [TransactionType.bridgeApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridgeApproval,\n      )?.params.data,\n      [TransactionType.swapApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swapApproval,\n      )?.params.data,\n      [TransactionType.bridge]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridge,\n      )?.params.data,\n      [TransactionType.swap]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swap,\n      )?.params.data,\n    };\n\n    const { batchId } = await this.#addTransactionBatchFn(transactionParams);\n    const { approvalMeta, tradeMeta } = findAndUpdateTransactionsInBatch({\n      messagingSystem: this.messagingSystem,\n      updateTransactionFn: this.#updateTransactionFn,\n      batchId,\n      txDataByType,\n    });\n\n    if (!tradeMeta) {\n      throw new Error(\n        'Failed to update cross-chain swap transaction batch: tradeMeta not found',\n      );\n    }\n\n    return { approvalMeta, tradeMeta };\n  };\n\n  /**\n   * Submits a cross-chain swap transaction\n   *\n   * @param quoteResponse - The quote response\n   * @param isStxEnabledOnClient - Whether smart transactions are enabled on the client, for example the getSmartTransactionsEnabled selector value from the extension\n   * @returns The transaction meta\n   */\n  submitTx = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n    isStxEnabledOnClient: boolean,\n  ): Promise<TransactionMeta & Partial<SolanaTransactionMeta>> => {\n    this.messagingSystem.call('BridgeController:stopPollingForQuotes');\n\n    // Before the tx is confirmed, its data is not available in txHistory\n    // The quote is used to populate event properties before confirmation\n    const preConfirmationProperties = {\n      ...getPriceImpactFromQuote(quoteResponse.quote),\n      ...getTradeDataFromQuote(quoteResponse),\n      token_symbol_source: quoteResponse.quote.srcAsset.symbol,\n      token_symbol_destination: quoteResponse.quote.destAsset.symbol,\n      usd_amount_source: Number(quoteResponse.sentAmount?.usd ?? 0),\n      stx_enabled: isStxEnabledOnClient,\n    };\n    // Emit Submitted event after submit button is clicked\n    this.#trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.Submitted,\n      undefined,\n      preConfirmationProperties,\n    );\n\n    let txMeta: TransactionMeta & Partial<SolanaTransactionMeta>;\n    let approvalTxId: string | undefined;\n    const startTime = Date.now();\n\n    const isBridgeTx = isCrossChain(\n      quoteResponse.quote.srcChainId,\n      quoteResponse.quote.destChainId,\n    );\n\n    // Submit SOLANA tx\n    if (\n      isSolanaChainId(quoteResponse.quote.srcChainId) &&\n      typeof quoteResponse.trade === 'string'\n    ) {\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        async () => {\n          try {\n            return await this.#handleSolanaTx(\n              quoteResponse as QuoteResponse<string> & QuoteMetadata,\n            );\n          } catch (error) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              txMeta?.id,\n              {\n                error_message: (error as Error)?.message,\n                ...preConfirmationProperties,\n              },\n            );\n            throw error;\n          }\n        },\n      );\n    } else {\n      // Submit EVM tx\n      // For hardware wallets on Mobile, this is fixes an issue where the Ledger does not get prompted for the 2nd approval\n      // Extension does not have this issue\n      const requireApproval =\n        this.#clientId === BridgeClientId.MOBILE &&\n        isHardwareWallet(this.#getMultichainSelectedAccount());\n\n      // Handle smart transactions if enabled\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: isStxEnabledOnClient,\n          },\n        },\n        async () => {\n          if (isStxEnabledOnClient) {\n            const { tradeMeta, approvalMeta } =\n              await this.#handleEvmTransactionBatch({\n                isBridgeTx,\n                resetApproval: await getUSDTAllowanceResetTx(\n                  this.messagingSystem,\n                  quoteResponse,\n                ),\n                approval: quoteResponse.approval,\n                trade: quoteResponse.trade as TxData,\n                quoteResponse,\n                requireApproval,\n              });\n            approvalTxId = approvalMeta?.id;\n            return tradeMeta;\n          }\n          // Set approval time and id if an approval tx is needed\n          const approvalTxMeta = await this.#handleApprovalTx(\n            isBridgeTx,\n            quoteResponse,\n            requireApproval,\n          );\n          approvalTxId = approvalTxMeta?.id;\n          return await this.#handleEvmTransaction({\n            transactionType: isBridgeTx\n              ? TransactionType.bridge\n              : TransactionType.swap,\n            trade: quoteResponse.trade as TxData,\n            requireApproval,\n          });\n        },\n      );\n    }\n\n    try {\n      // Add swap or bridge tx to history\n      this.#addTxToHistory({\n        bridgeTxMeta: txMeta, // Only the id field is used by the BridgeStatusController\n        statusRequest: {\n          ...getStatusRequestParams(quoteResponse),\n          srcTxHash: txMeta.hash,\n        },\n        quoteResponse,\n        slippagePercentage: 0, // TODO include slippage provided by quote if using dynamic slippage, or slippage from quote request\n        isStxEnabled: isStxEnabledOnClient,\n        startTime,\n        approvalTxId,\n      });\n\n      if (isSolanaChainId(quoteResponse.quote.srcChainId)) {\n        // Start polling for bridge tx status\n        this.#startPollingForTxId(txMeta.id);\n        // Track Solana Swap completed event\n        if (!isBridgeTx) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            txMeta.id,\n          );\n        }\n      }\n    } catch {\n      // Ignore errors here, we don't want to crash the app if this fails and tx submission succeeds\n    }\n    return txMeta;\n  };\n\n  /**\n   * Tracks post-submission events for a cross-chain swap based on the history item\n   *\n   * @param eventName - The name of the event to track\n   * @param txMetaId - The txMetaId of the history item to track the event for\n   * @param eventProperties - The properties for the event\n   */\n  readonly #trackUnifiedSwapBridgeEvent = <\n    T extends\n      | typeof UnifiedSwapBridgeEventName.Submitted\n      | typeof UnifiedSwapBridgeEventName.Failed\n      | typeof UnifiedSwapBridgeEventName.SnapConfirmationViewed\n      | typeof UnifiedSwapBridgeEventName.Completed,\n  >(\n    eventName: T,\n    txMetaId?: string,\n    eventProperties?: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    if (!txMetaId) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const historyItem: BridgeHistoryItem | undefined =\n      this.state.txHistory[txMetaId];\n    if (!historyItem) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      historyItem.account,\n    );\n\n    const requiredEventProperties = {\n      action_type: getActionType(\n        historyItem.quote.srcChainId,\n        historyItem.quote.destChainId,\n      ),\n      ...(eventProperties ?? {}),\n      ...getRequestParamFromHistory(historyItem),\n      ...getRequestMetadataFromHistory(historyItem, selectedAccount),\n      ...getTradeDataFromHistory(historyItem),\n      ...getTxStatusesFromHistory(historyItem),\n      ...getFinalizedTxProperties(historyItem),\n      ...getPriceImpactFromQuote(historyItem.quote),\n    };\n\n    this.messagingSystem.call(\n      'BridgeController:trackUnifiedSwapBridgeEvent',\n      eventName,\n      requiredEventProperties,\n    );\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/bridge-status-controller.mjs b/dist/bridge-status-controller.mjs
index d413874f7129501444d695a4dc62367ee22aae8f..46605d7e5a0ca634807d14d3533e8c5b28fc5e77 100644
--- a/dist/bridge-status-controller.mjs
+++ b/dist/bridge-status-controller.mjs
@@ -176,7 +176,7 @@ export class BridgeStatusController extends StaticIntervalPollingController() {
                 pricingData: {
                     amountSent: quoteResponse.sentAmount.amount,
                     amountSentInUsd: quoteResponse.sentAmount.usd ?? undefined,
-                    quotedGasInUsd: quoteResponse.gasFee.usd ?? undefined,
+                    quotedGasInUsd: quoteResponse.gasFee.effective?.usd ?? undefined,
                     quotedReturnInUsd: quoteResponse.toTokenAmount.usd ?? undefined,
                 },
                 initialDestAssetBalance,
diff --git a/dist/bridge-status-controller.mjs.map b/dist/bridge-status-controller.mjs.map
index 681f68b525a03f83cfe6f2cdf200114864cacdae..bacabff571f2b9b7f9cf779b224345dff1a86dfa 100644
--- a/dist/bridge-status-controller.mjs.map
+++ b/dist/bridge-status-controller.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"bridge-status-controller.mjs","sourceRoot":"","sources":["../src/bridge-status-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StateMetadata } from '@metamask/base-controller';\nimport type {\n  QuoteMetadata,\n  RequiredEventContextFromClient,\n  TxData,\n  QuoteResponse,\n} from '@metamask/bridge-controller';\nimport {\n  formatChainIdToHex,\n  isSolanaChainId,\n  StatusTypes,\n  UnifiedSwapBridgeEventName,\n  getActionType,\n  formatChainIdToCaip,\n  isCrossChain,\n  isHardwareWallet,\n} from '@metamask/bridge-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { toHex } from '@metamask/controller-utils';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  TransactionController,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  BRIDGE_PROD_API_BASE_URL,\n  BRIDGE_STATUS_CONTROLLER_NAME,\n  DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n  MAX_ATTEMPTS,\n  REFRESH_INTERVAL_MS,\n  TraceName,\n} from './constants';\nimport type {\n  BridgeStatusControllerState,\n  StartPollingForBridgeTxStatusArgsSerialized,\n  FetchFunction,\n  SolanaTransactionMeta,\n  BridgeHistoryItem,\n} from './types';\nimport { type BridgeStatusControllerMessenger } from './types';\nimport { BridgeClientId } from './types';\nimport {\n  fetchBridgeTxStatus,\n  getStatusRequestWithSrcTxHash,\n  shouldSkipFetchDueToFetchFailures,\n} from './utils/bridge-status';\nimport { getTxGasEstimates } from './utils/gas';\nimport {\n  getFinalizedTxProperties,\n  getPriceImpactFromQuote,\n  getRequestMetadataFromHistory,\n  getRequestParamFromHistory,\n  getTradeDataFromHistory,\n  getTradeDataFromQuote,\n  getEVMTxPropertiesFromTransactionMeta,\n  getTxStatusesFromHistory,\n} from './utils/metrics';\nimport {\n  findAndUpdateTransactionsInBatch,\n  getAddTransactionBatchParams,\n  getClientRequest,\n  getStatusRequestParams,\n  getUSDTAllowanceResetTx,\n  handleLineaDelay,\n  handleSolanaTxResponse,\n} from './utils/transaction';\nimport { generateActionId } from './utils/transaction';\n\nconst metadata: StateMetadata<BridgeStatusControllerState> = {\n  // We want to persist the bridge status state so that we can show the proper data for the Activity list\n  // basically match the behavior of TransactionController\n  txHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/** The input to start polling for the {@link BridgeStatusController} */\ntype BridgeStatusPollingInput = FetchBridgeTxStatusArgs;\n\ntype SrcTxMetaId = string;\nexport type FetchBridgeTxStatusArgs = {\n  bridgeTxMetaId: string;\n};\nexport class BridgeStatusController extends StaticIntervalPollingController<BridgeStatusPollingInput>()<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState,\n  BridgeStatusControllerMessenger\n> {\n  #pollingTokensByTxMetaId: Record<SrcTxMetaId, string> = {};\n\n  readonly #clientId: BridgeClientId;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #config: {\n    customBridgeApiBaseUrl: string;\n  };\n\n  readonly #addTransactionFn: typeof TransactionController.prototype.addTransaction;\n\n  readonly #addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n\n  readonly #updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n\n  readonly #estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n\n  readonly #trace: TraceCallback;\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    fetchFn,\n    addTransactionFn,\n    addTransactionBatchFn,\n    updateTransactionFn,\n    estimateGasFeeFn,\n    config,\n    traceFn,\n  }: {\n    messenger: BridgeStatusControllerMessenger;\n    state?: Partial<BridgeStatusControllerState>;\n    clientId: BridgeClientId;\n    fetchFn: FetchFunction;\n    addTransactionFn: typeof TransactionController.prototype.addTransaction;\n    addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n    updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n    estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_STATUS_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      // Restore the persisted state\n      state: {\n        ...DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n        ...state,\n      },\n    });\n\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#addTransactionFn = addTransactionFn;\n    this.#addTransactionBatchFn = addTransactionBatchFn;\n    this.#updateTransactionFn = updateTransactionFn;\n    this.#estimateGasFeeFn = estimateGasFeeFn;\n    this.#config = {\n      customBridgeApiBaseUrl:\n        config?.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n    };\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:startPollingForBridgeTxStatus`,\n      this.startPollingForBridgeTxStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:wipeBridgeStatus`,\n      this.wipeBridgeStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:submitTx`,\n      this.submitTx.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:restartPollingForFailedAttempts`,\n      this.restartPollingForFailedAttempts.bind(this),\n    );\n\n    // Set interval\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionFailed',\n      ({ transactionMeta }) => {\n        const { type, status, id } = transactionMeta;\n        if (\n          type &&\n          [\n            TransactionType.bridge,\n            TransactionType.swap,\n            TransactionType.bridgeApproval,\n            TransactionType.swapApproval,\n          ].includes(type) &&\n          [\n            TransactionStatus.failed,\n            TransactionStatus.dropped,\n            TransactionStatus.rejected,\n          ].includes(status)\n        ) {\n          // Mark tx as failed in txHistory\n          this.#markTxAsFailed(transactionMeta);\n          // Track failed event\n          if (status !== TransactionStatus.rejected) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              id,\n              getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n            );\n          }\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionConfirmed',\n      (transactionMeta) => {\n        const { type, id, chainId } = transactionMeta;\n        if (type === TransactionType.swap) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            id,\n            getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n          );\n        }\n        if (type === TransactionType.bridge && !isSolanaChainId(chainId)) {\n          this.#startPollingForTxId(id);\n        }\n      },\n    );\n\n    // If you close the extension, but keep the browser open, the polling continues\n    // If you close the browser, the polling stops\n    // Check for historyItems that do not have a status of complete and restart polling\n    this.#restartPollingForIncompleteHistoryItems();\n  }\n\n  // Mark tx as failed in txHistory if either the approval or trade fails\n  readonly #markTxAsFailed = ({ id }: TransactionMeta) => {\n    const txHistoryKey = this.state.txHistory[id]\n      ? id\n      : Object.keys(this.state.txHistory).find(\n          (key) => this.state.txHistory[key].approvalTxId === id,\n        );\n    if (!txHistoryKey) {\n      return;\n    }\n    this.update((statusState) => {\n      statusState.txHistory[txHistoryKey].status.status = StatusTypes.FAILED;\n    });\n  };\n\n  resetState = () => {\n    this.update((state) => {\n      state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n    });\n  };\n\n  wipeBridgeStatus = ({\n    address,\n    ignoreNetwork,\n  }: {\n    address: string;\n    ignoreNetwork: boolean;\n  }) => {\n    // Wipe all networks for this address\n    if (ignoreNetwork) {\n      this.update((state) => {\n        state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      const selectedNetworkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      );\n      const selectedChainId = selectedNetworkClient.configuration.chainId;\n\n      this.#wipeBridgeStatusByChainId(address, selectedChainId);\n    }\n  };\n\n  /**\n   * Resets the attempts counter for a bridge transaction history item\n   * and restarts polling if it was previously stopped due to max attempts\n   *\n   * @param identifier - Object containing either txMetaId or txHash to identify the history item\n   * @param identifier.txMetaId - The transaction meta ID\n   * @param identifier.txHash - The transaction hash\n   */\n  restartPollingForFailedAttempts = (identifier: {\n    txMetaId?: string;\n    txHash?: string;\n  }) => {\n    const { txMetaId, txHash } = identifier;\n\n    if (!txMetaId && !txHash) {\n      throw new Error('Either txMetaId or txHash must be provided');\n    }\n\n    // Find the history item by txMetaId or txHash\n    let targetTxMetaId: string | undefined;\n\n    if (txMetaId) {\n      // Direct lookup by txMetaId\n      if (this.state.txHistory[txMetaId]) {\n        targetTxMetaId = txMetaId;\n      }\n    } else if (txHash) {\n      // Search by txHash in status.srcChain.txHash\n      targetTxMetaId = Object.keys(this.state.txHistory).find(\n        (id) => this.state.txHistory[id].status.srcChain.txHash === txHash,\n      );\n    }\n\n    if (!targetTxMetaId) {\n      throw new Error(\n        `No bridge transaction history found for ${\n          txMetaId ? `txMetaId: ${txMetaId}` : `txHash: ${txHash}`\n        }`,\n      );\n    }\n\n    const historyItem = this.state.txHistory[targetTxMetaId];\n\n    // Reset the attempts counter\n    this.update((state) => {\n      if (targetTxMetaId) {\n        state.txHistory[targetTxMetaId].attempts = undefined;\n      }\n    });\n\n    // Restart polling if it was stopped and this is a bridge transaction\n    const isBridgeTx = isCrossChain(\n      historyItem.quote.srcChainId,\n      historyItem.quote.destChainId,\n    );\n\n    if (isBridgeTx) {\n      // Check if polling was stopped (no active polling token)\n      const existingPollingToken =\n        this.#pollingTokensByTxMetaId[targetTxMetaId];\n\n      if (!existingPollingToken) {\n        // Restart polling\n        this.#startPollingForTxId(targetTxMetaId);\n      }\n    }\n  };\n\n  /**\n   * Restart polling for txs that are not in a final state\n   * This is called during initialization\n   */\n  readonly #restartPollingForIncompleteHistoryItems = () => {\n    // Check for historyItems that do not have a status of complete and restart polling\n    const { txHistory } = this.state;\n    const historyItems = Object.values(txHistory);\n    const incompleteHistoryItems = historyItems\n      .filter(\n        (historyItem) =>\n          historyItem.status.status === StatusTypes.PENDING ||\n          historyItem.status.status === StatusTypes.UNKNOWN,\n      )\n      .filter((historyItem) => {\n        // Check if we are already polling this tx, if so, skip restarting polling for that\n        const pollingToken =\n          this.#pollingTokensByTxMetaId[historyItem.txMetaId];\n        return !pollingToken;\n      })\n      // Swap txs don't need to have their statuses polled\n      .filter((historyItem) => {\n        const isBridgeTx = isCrossChain(\n          historyItem.quote.srcChainId,\n          historyItem.quote.destChainId,\n        );\n        return isBridgeTx;\n      });\n\n    incompleteHistoryItems.forEach((historyItem) => {\n      const bridgeTxMetaId = historyItem.txMetaId;\n      const shouldSkipFetch = shouldSkipFetchDueToFetchFailures(\n        historyItem.attempts,\n      );\n      if (shouldSkipFetch) {\n        return;\n      }\n\n      // We manually call startPolling() here rather than go through startPollingForBridgeTxStatus()\n      // because we don't want to overwrite the existing historyItem in state\n      this.#startPollingForTxId(bridgeTxMetaId);\n    });\n  };\n\n  readonly #addTxToHistory = (\n    startPollingForBridgeTxStatusArgs: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const {\n      bridgeTxMeta,\n      statusRequest,\n      quoteResponse,\n      startTime,\n      slippagePercentage,\n      initialDestAssetBalance,\n      targetContractAddress,\n      approvalTxId,\n      isStxEnabled,\n    } = startPollingForBridgeTxStatusArgs;\n\n    const accountAddress = this.#getMultichainSelectedAccountAddress();\n    // Write all non-status fields to state so we can reference the quote in Activity list without the Bridge API\n    // We know it's in progress but not the exact status yet\n    const txHistoryItem = {\n      txMetaId: bridgeTxMeta.id,\n      batchId: bridgeTxMeta.batchId,\n      quote: quoteResponse.quote,\n      startTime,\n      estimatedProcessingTimeInSeconds:\n        quoteResponse.estimatedProcessingTimeInSeconds,\n      slippagePercentage,\n      pricingData: {\n        amountSent: quoteResponse.sentAmount.amount,\n        amountSentInUsd: quoteResponse.sentAmount.usd ?? undefined,\n        quotedGasInUsd: quoteResponse.gasFee.usd ?? undefined,\n        quotedReturnInUsd: quoteResponse.toTokenAmount.usd ?? undefined,\n      },\n      initialDestAssetBalance,\n      targetContractAddress,\n      account: accountAddress,\n      status: {\n        // We always have a PENDING status when we start polling for a tx, don't need the Bridge API for that\n        // Also we know the bare minimum fields for status at this point in time\n        status: StatusTypes.PENDING,\n        srcChain: {\n          chainId: statusRequest.srcChainId,\n          txHash: statusRequest.srcTxHash,\n        },\n      },\n      hasApprovalTx: Boolean(quoteResponse.approval),\n      approvalTxId,\n      isStxEnabled: isStxEnabled ?? false,\n    };\n    this.update((state) => {\n      // Use the txMeta.id as the key so we can reference the txMeta in TransactionController\n      state.txHistory[bridgeTxMeta.id] = txHistoryItem;\n    });\n  };\n\n  readonly #startPollingForTxId = (txId: string) => {\n    // If we are already polling for this tx, stop polling for it before restarting\n    const existingPollingToken = this.#pollingTokensByTxMetaId[txId];\n    if (existingPollingToken) {\n      this.stopPollingByPollingToken(existingPollingToken);\n    }\n\n    const txHistoryItem = this.state.txHistory[txId];\n    if (!txHistoryItem) {\n      return;\n    }\n    const { quote } = txHistoryItem;\n\n    const isBridgeTx = isCrossChain(quote.srcChainId, quote.destChainId);\n    if (isBridgeTx) {\n      this.#pollingTokensByTxMetaId[txId] = this.startPolling({\n        bridgeTxMetaId: txId,\n      });\n    }\n  };\n\n  /**\n   * @deprecated For EVM/Solana swap/bridge txs we add tx to history in submitTx()\n   * For Solana swap/bridge we start polling in submitTx()\n   * For EVM bridge we listen for 'TransactionController:transactionConfirmed' and start polling there\n   * No clients currently call this, safe to remove in future versions\n   *\n   * Adds tx to history and starts polling for the bridge tx status\n   *\n   * @param txHistoryMeta - The parameters for creating the history item\n   */\n  startPollingForBridgeTxStatus = (\n    txHistoryMeta: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const { bridgeTxMeta } = txHistoryMeta;\n\n    this.#addTxToHistory(txHistoryMeta);\n    this.#startPollingForTxId(bridgeTxMeta.id);\n  };\n\n  // This will be called after you call this.startPolling()\n  // The args passed in are the args you passed in to startPolling()\n  _executePoll = async (pollingInput: BridgeStatusPollingInput) => {\n    await this.#fetchBridgeTxStatus(pollingInput);\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getMultichainSelectedAccountAddress() {\n    return this.#getMultichainSelectedAccount()?.address ?? '';\n  }\n\n  /**\n   * Handles the failure to fetch the bridge tx status\n   * We eventually stop polling for the tx if we fail too many times\n   * Failures (500 errors) can be due to:\n   * - The srcTxHash not being available immediately for STX\n   * - The srcTxHash being invalid for the chain. This case will never resolve so we stop polling for it to avoid hammering the Bridge API forever.\n   *\n   * @param bridgeTxMetaId - The txMetaId of the bridge tx\n   */\n  readonly #handleFetchFailure = (bridgeTxMetaId: string) => {\n    const { attempts } = this.state.txHistory[bridgeTxMetaId];\n\n    const newAttempts = attempts\n      ? {\n          counter: attempts.counter + 1,\n          lastAttemptTime: Date.now(),\n        }\n      : {\n          counter: 1,\n          lastAttemptTime: Date.now(),\n        };\n\n    // If we've failed too many times, stop polling for the tx\n    const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    if (newAttempts.counter >= MAX_ATTEMPTS && pollingToken) {\n      this.stopPollingByPollingToken(pollingToken);\n      delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    }\n\n    // Update the attempts counter\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].attempts = newAttempts;\n    });\n  };\n\n  readonly #fetchBridgeTxStatus = async ({\n    bridgeTxMetaId,\n  }: FetchBridgeTxStatusArgs) => {\n    const { txHistory } = this.state;\n\n    if (\n      shouldSkipFetchDueToFetchFailures(txHistory[bridgeTxMetaId]?.attempts)\n    ) {\n      return;\n    }\n\n    try {\n      // We try here because we receive 500 errors from Bridge API if we try to fetch immediately after submitting the source tx\n      // Oddly mostly happens on Optimism, never on Arbitrum. By the 2nd fetch, the Bridge API responds properly.\n      // Also srcTxHash may not be available immediately for STX, so we don't want to fetch in those cases\n      const historyItem = txHistory[bridgeTxMetaId];\n      const srcTxHash = this.#getSrcTxHash(bridgeTxMetaId);\n      if (!srcTxHash) {\n        return;\n      }\n\n      this.#updateSrcTxHash(bridgeTxMetaId, srcTxHash);\n\n      const statusRequest = getStatusRequestWithSrcTxHash(\n        historyItem.quote,\n        srcTxHash,\n      );\n      const status = await fetchBridgeTxStatus(\n        statusRequest,\n        this.#clientId,\n        this.#fetchFn,\n        this.#config.customBridgeApiBaseUrl,\n      );\n      const newBridgeHistoryItem = {\n        ...historyItem,\n        status,\n        completionTime:\n          status.status === StatusTypes.COMPLETE ||\n          status.status === StatusTypes.FAILED\n            ? Date.now()\n            : undefined, // TODO make this more accurate by looking up dest txHash block time\n        attempts: undefined,\n      };\n\n      // No need to purge these on network change or account change, TransactionController does not purge either.\n      // TODO In theory we can skip checking status if it's not the current account/network\n      // we need to keep track of the account that this is associated with as well so that we don't show it in Activity list for other accounts\n      // First stab at this will not stop polling when you are on a different account\n      this.update((state) => {\n        state.txHistory[bridgeTxMetaId] = newBridgeHistoryItem;\n      });\n\n      const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n      const isFinalStatus =\n        status.status === StatusTypes.COMPLETE ||\n        status.status === StatusTypes.FAILED;\n\n      if (isFinalStatus && pollingToken) {\n        this.stopPollingByPollingToken(pollingToken);\n        delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n        if (status.status === StatusTypes.COMPLETE) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            bridgeTxMetaId,\n          );\n        }\n        if (status.status === StatusTypes.FAILED) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Failed,\n            bridgeTxMetaId,\n          );\n        }\n      }\n    } catch (e) {\n      console.log('Failed to fetch bridge tx status', e);\n      this.#handleFetchFailure(bridgeTxMetaId);\n    }\n  };\n\n  readonly #getSrcTxHash = (bridgeTxMetaId: string): string | undefined => {\n    const { txHistory } = this.state;\n    // Prefer the srcTxHash from bridgeStatusState so we don't have to l ook up in TransactionController\n    // But it is possible to have bridgeHistoryItem in state without the srcTxHash yet when it is an STX\n    const srcTxHash = txHistory[bridgeTxMetaId].status.srcChain.txHash;\n\n    if (srcTxHash) {\n      return srcTxHash;\n    }\n\n    // Look up in TransactionController if txMeta has been updated with the srcTxHash\n    const txControllerState = this.messagingSystem.call(\n      'TransactionController:getState',\n    );\n    const txMeta = txControllerState.transactions.find(\n      (tx: TransactionMeta) => tx.id === bridgeTxMetaId,\n    );\n    return txMeta?.hash;\n  };\n\n  readonly #updateSrcTxHash = (bridgeTxMetaId: string, srcTxHash: string) => {\n    const { txHistory } = this.state;\n    if (txHistory[bridgeTxMetaId].status.srcChain.txHash) {\n      return;\n    }\n\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].status.srcChain.txHash = srcTxHash;\n    });\n  };\n\n  // Wipes the bridge status for the given address and chainId\n  // Will match only source chainId to the selectedChainId\n  readonly #wipeBridgeStatusByChainId = (\n    address: string,\n    selectedChainId: Hex,\n  ) => {\n    const sourceTxMetaIdsToDelete = Object.keys(this.state.txHistory).filter(\n      (txMetaId) => {\n        const bridgeHistoryItem = this.state.txHistory[txMetaId];\n\n        const hexSourceChainId = numberToHex(\n          bridgeHistoryItem.quote.srcChainId,\n        );\n\n        return (\n          bridgeHistoryItem.account === address &&\n          hexSourceChainId === selectedChainId\n        );\n      },\n    );\n\n    sourceTxMetaIdsToDelete.forEach((sourceTxMetaId) => {\n      const pollingToken = this.#pollingTokensByTxMetaId[sourceTxMetaId];\n\n      if (pollingToken) {\n        this.stopPollingByPollingToken(\n          this.#pollingTokensByTxMetaId[sourceTxMetaId],\n        );\n      }\n    });\n\n    this.update((state) => {\n      state.txHistory = sourceTxMetaIdsToDelete.reduce(\n        (acc, sourceTxMetaId) => {\n          delete acc[sourceTxMetaId];\n          return acc;\n        },\n        state.txHistory,\n      );\n    });\n  };\n\n  /**\n   * ******************************************************\n   * TX SUBMISSION HANDLING\n   *******************************************************\n   */\n\n  /**\n   * Submits the transaction to the snap using the keyring rpc method\n   * This adds an approval tx to the ApprovalsController in the background\n   * The client needs to handle the approval tx by redirecting to the confirmation page with the approvalTxId in the URL\n   *\n   * @param quoteResponse - The quote response\n   * @param quoteResponse.quote - The quote\n   * @returns The transaction meta\n   */\n  readonly #handleSolanaTx = async (\n    quoteResponse: QuoteResponse<string> & QuoteMetadata,\n  ) => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined multichain account',\n      );\n    }\n    if (!selectedAccount?.metadata?.snap?.id) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined snap id',\n      );\n    }\n\n    const request = getClientRequest(quoteResponse, selectedAccount);\n    const requestResponse = (await this.messagingSystem.call(\n      'SnapController:handleRequest',\n      request,\n    )) as string | { result: Record<string, string> } | { signature: string };\n\n    // The extension client actually redirects before it can do anytyhing with this meta\n    const txMeta = handleSolanaTxResponse(\n      requestResponse,\n      quoteResponse,\n      selectedAccount,\n    );\n\n    // TODO remove this eventually, just returning it now to match extension behavior\n    // OR if the snap can propagate the snapRequestId or keyringReqId to the ApprovalsController, this can return the approvalTxId instead and clients won't need to subscribe to the ApprovalsController state to redirect\n    return txMeta;\n  };\n\n  readonly #waitForHashAndReturnFinalTxMeta = async (\n    hashPromise?: Awaited<\n      ReturnType<TransactionController['addTransaction']>\n    >['result'],\n  ): Promise<TransactionMeta> => {\n    const transactionHash = await hashPromise;\n    const finalTransactionMeta: TransactionMeta | undefined =\n      this.messagingSystem\n        .call('TransactionController:getState')\n        .transactions.find(\n          (tx: TransactionMeta) => tx.hash === transactionHash,\n        );\n    if (!finalTransactionMeta) {\n      throw new Error(\n        'Failed to submit cross-chain swap tx: txMeta for txHash was not found',\n      );\n    }\n    return finalTransactionMeta;\n  };\n\n  readonly #handleApprovalTx = async (\n    isBridgeTx: boolean,\n    quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata,\n    requireApproval?: boolean,\n  ): Promise<TransactionMeta | undefined> => {\n    const { approval } = quoteResponse;\n\n    if (approval) {\n      const approveTx = async () => {\n        await this.#handleUSDTAllowanceReset(quoteResponse);\n\n        const approvalTxMeta = await this.#handleEvmTransaction({\n          transactionType: isBridgeTx\n            ? TransactionType.bridgeApproval\n            : TransactionType.swapApproval,\n          trade: approval,\n          requireApproval,\n        });\n\n        await handleLineaDelay(quoteResponse);\n        return approvalTxMeta;\n      };\n\n      return await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionApprovalCompleted\n            : TraceName.SwapTransactionApprovalCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        approveTx,\n      );\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Submits an EVM transaction to the TransactionController\n   *\n   * @param params - The parameters for the transaction\n   * @param params.transactionType - The type of transaction to submit\n   * @param params.trade - The trade data to confirm\n   * @param params.requireApproval - Whether to require approval for the transaction\n   * @returns The transaction meta\n   */\n  readonly #handleEvmTransaction = async ({\n    transactionType,\n    trade,\n    requireApproval = false,\n  }: {\n    transactionType: TransactionType;\n    trade: TxData;\n    requireApproval?: boolean;\n  }): Promise<TransactionMeta> => {\n    const actionId = generateActionId().toString();\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      trade.from,\n    );\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: unknown account in trade data',\n      );\n    }\n    const hexChainId = formatChainIdToHex(trade.chainId);\n    const networkClientId = this.messagingSystem.call(\n      'NetworkController:findNetworkClientIdByChainId',\n      hexChainId,\n    );\n\n    const requestOptions = {\n      actionId,\n      networkClientId,\n      requireApproval,\n      type: transactionType,\n      origin: 'metamask',\n    };\n    const transactionParams: Parameters<\n      TransactionController['addTransaction']\n    >[0] = {\n      ...trade,\n      chainId: hexChainId,\n      gasLimit: trade.gasLimit?.toString(),\n      gas: trade.gasLimit?.toString(),\n    };\n    const transactionParamsWithMaxGas: TransactionParams = {\n      ...transactionParams,\n      ...(await this.#calculateGasFees(\n        transactionParams,\n        networkClientId,\n        hexChainId,\n      )),\n    };\n\n    const { result } = await this.#addTransactionFn(\n      transactionParamsWithMaxGas,\n      requestOptions,\n    );\n\n    return await this.#waitForHashAndReturnFinalTxMeta(result);\n  };\n\n  readonly #handleUSDTAllowanceReset = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n  ) => {\n    const resetApproval = await getUSDTAllowanceResetTx(\n      this.messagingSystem,\n      quoteResponse,\n    );\n    if (resetApproval) {\n      await this.#handleEvmTransaction({\n        transactionType: TransactionType.bridgeApproval,\n        trade: resetApproval,\n      });\n    }\n  };\n\n  readonly #calculateGasFees = async (\n    transactionParams: TransactionParams,\n    networkClientId: string,\n    chainId: Hex,\n  ) => {\n    const { gasFeeEstimates } = this.messagingSystem.call(\n      'GasFeeController:getState',\n    );\n    const { estimates: txGasFeeEstimates } = await this.#estimateGasFeeFn({\n      transactionParams,\n      chainId,\n      networkClientId,\n    });\n    const { maxFeePerGas, maxPriorityFeePerGas } = getTxGasEstimates({\n      networkGasFeeEstimates: gasFeeEstimates,\n      txGasFeeEstimates,\n    });\n    const maxGasLimit = toHex(transactionParams.gas ?? 0);\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gas: maxGasLimit,\n    };\n  };\n\n  /**\n   * Submits batched EVM transactions to the TransactionController\n   *\n   * @param args - The parameters for the transaction\n   * @param args.isBridgeTx - Whether the transaction is a bridge transaction\n   * @param args.trade - The trade data to confirm\n   * @param args.approval - The approval data to confirm\n   * @param args.resetApproval - The ethereum:USDT reset approval data to confirm\n   * @param args.quoteResponse - The quote response\n   * @param args.requireApproval - Whether to require approval for the transaction\n   * @returns The approvalMeta and tradeMeta for the batched transaction\n   */\n  readonly #handleEvmTransactionBatch = async (\n    args: Omit<\n      Parameters<typeof getAddTransactionBatchParams>[0],\n      'messagingSystem' | 'estimateGasFeeFn'\n    >,\n  ) => {\n    const transactionParams = await getAddTransactionBatchParams({\n      messagingSystem: this.messagingSystem,\n      estimateGasFeeFn: this.#estimateGasFeeFn,\n      ...args,\n    });\n    const txDataByType = {\n      [TransactionType.bridgeApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridgeApproval,\n      )?.params.data,\n      [TransactionType.swapApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swapApproval,\n      )?.params.data,\n      [TransactionType.bridge]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridge,\n      )?.params.data,\n      [TransactionType.swap]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swap,\n      )?.params.data,\n    };\n\n    const { batchId } = await this.#addTransactionBatchFn(transactionParams);\n    const { approvalMeta, tradeMeta } = findAndUpdateTransactionsInBatch({\n      messagingSystem: this.messagingSystem,\n      updateTransactionFn: this.#updateTransactionFn,\n      batchId,\n      txDataByType,\n    });\n\n    if (!tradeMeta) {\n      throw new Error(\n        'Failed to update cross-chain swap transaction batch: tradeMeta not found',\n      );\n    }\n\n    return { approvalMeta, tradeMeta };\n  };\n\n  /**\n   * Submits a cross-chain swap transaction\n   *\n   * @param quoteResponse - The quote response\n   * @param isStxEnabledOnClient - Whether smart transactions are enabled on the client, for example the getSmartTransactionsEnabled selector value from the extension\n   * @returns The transaction meta\n   */\n  submitTx = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n    isStxEnabledOnClient: boolean,\n  ): Promise<TransactionMeta & Partial<SolanaTransactionMeta>> => {\n    this.messagingSystem.call('BridgeController:stopPollingForQuotes');\n\n    // Before the tx is confirmed, its data is not available in txHistory\n    // The quote is used to populate event properties before confirmation\n    const preConfirmationProperties = {\n      ...getPriceImpactFromQuote(quoteResponse.quote),\n      ...getTradeDataFromQuote(quoteResponse),\n      token_symbol_source: quoteResponse.quote.srcAsset.symbol,\n      token_symbol_destination: quoteResponse.quote.destAsset.symbol,\n      usd_amount_source: Number(quoteResponse.sentAmount?.usd ?? 0),\n      stx_enabled: isStxEnabledOnClient,\n    };\n    // Emit Submitted event after submit button is clicked\n    this.#trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.Submitted,\n      undefined,\n      preConfirmationProperties,\n    );\n\n    let txMeta: TransactionMeta & Partial<SolanaTransactionMeta>;\n    let approvalTxId: string | undefined;\n    const startTime = Date.now();\n\n    const isBridgeTx = isCrossChain(\n      quoteResponse.quote.srcChainId,\n      quoteResponse.quote.destChainId,\n    );\n\n    // Submit SOLANA tx\n    if (\n      isSolanaChainId(quoteResponse.quote.srcChainId) &&\n      typeof quoteResponse.trade === 'string'\n    ) {\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        async () => {\n          try {\n            return await this.#handleSolanaTx(\n              quoteResponse as QuoteResponse<string> & QuoteMetadata,\n            );\n          } catch (error) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              txMeta?.id,\n              {\n                error_message: (error as Error)?.message,\n                ...preConfirmationProperties,\n              },\n            );\n            throw error;\n          }\n        },\n      );\n    } else {\n      // Submit EVM tx\n      // For hardware wallets on Mobile, this is fixes an issue where the Ledger does not get prompted for the 2nd approval\n      // Extension does not have this issue\n      const requireApproval =\n        this.#clientId === BridgeClientId.MOBILE &&\n        isHardwareWallet(this.#getMultichainSelectedAccount());\n\n      // Handle smart transactions if enabled\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: isStxEnabledOnClient,\n          },\n        },\n        async () => {\n          if (isStxEnabledOnClient) {\n            const { tradeMeta, approvalMeta } =\n              await this.#handleEvmTransactionBatch({\n                isBridgeTx,\n                resetApproval: await getUSDTAllowanceResetTx(\n                  this.messagingSystem,\n                  quoteResponse,\n                ),\n                approval: quoteResponse.approval,\n                trade: quoteResponse.trade as TxData,\n                quoteResponse,\n                requireApproval,\n              });\n            approvalTxId = approvalMeta?.id;\n            return tradeMeta;\n          }\n          // Set approval time and id if an approval tx is needed\n          const approvalTxMeta = await this.#handleApprovalTx(\n            isBridgeTx,\n            quoteResponse,\n            requireApproval,\n          );\n          approvalTxId = approvalTxMeta?.id;\n          return await this.#handleEvmTransaction({\n            transactionType: isBridgeTx\n              ? TransactionType.bridge\n              : TransactionType.swap,\n            trade: quoteResponse.trade as TxData,\n            requireApproval,\n          });\n        },\n      );\n    }\n\n    try {\n      // Add swap or bridge tx to history\n      this.#addTxToHistory({\n        bridgeTxMeta: txMeta, // Only the id field is used by the BridgeStatusController\n        statusRequest: {\n          ...getStatusRequestParams(quoteResponse),\n          srcTxHash: txMeta.hash,\n        },\n        quoteResponse,\n        slippagePercentage: 0, // TODO include slippage provided by quote if using dynamic slippage, or slippage from quote request\n        isStxEnabled: isStxEnabledOnClient,\n        startTime,\n        approvalTxId,\n      });\n\n      if (isSolanaChainId(quoteResponse.quote.srcChainId)) {\n        // Start polling for bridge tx status\n        this.#startPollingForTxId(txMeta.id);\n        // Track Solana Swap completed event\n        if (!isBridgeTx) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            txMeta.id,\n          );\n        }\n      }\n    } catch {\n      // Ignore errors here, we don't want to crash the app if this fails and tx submission succeeds\n    }\n    return txMeta;\n  };\n\n  /**\n   * Tracks post-submission events for a cross-chain swap based on the history item\n   *\n   * @param eventName - The name of the event to track\n   * @param txMetaId - The txMetaId of the history item to track the event for\n   * @param eventProperties - The properties for the event\n   */\n  readonly #trackUnifiedSwapBridgeEvent = <\n    T extends\n      | typeof UnifiedSwapBridgeEventName.Submitted\n      | typeof UnifiedSwapBridgeEventName.Failed\n      | typeof UnifiedSwapBridgeEventName.SnapConfirmationViewed\n      | typeof UnifiedSwapBridgeEventName.Completed,\n  >(\n    eventName: T,\n    txMetaId?: string,\n    eventProperties?: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    if (!txMetaId) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const historyItem: BridgeHistoryItem | undefined =\n      this.state.txHistory[txMetaId];\n    if (!historyItem) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      historyItem.account,\n    );\n\n    const requiredEventProperties = {\n      action_type: getActionType(\n        historyItem.quote.srcChainId,\n        historyItem.quote.destChainId,\n      ),\n      ...(eventProperties ?? {}),\n      ...getRequestParamFromHistory(historyItem),\n      ...getRequestMetadataFromHistory(historyItem, selectedAccount),\n      ...getTradeDataFromHistory(historyItem),\n      ...getTxStatusesFromHistory(historyItem),\n      ...getFinalizedTxProperties(historyItem),\n      ...getPriceImpactFromQuote(historyItem.quote),\n    };\n\n    this.messagingSystem.call(\n      'BridgeController:trackUnifiedSwapBridgeEvent',\n      eventName,\n      requiredEventProperties,\n    );\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"bridge-status-controller.mjs","sourceRoot":"","sources":["../src/bridge-status-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StateMetadata } from '@metamask/base-controller';\nimport type {\n  QuoteMetadata,\n  RequiredEventContextFromClient,\n  TxData,\n  QuoteResponse,\n} from '@metamask/bridge-controller';\nimport {\n  formatChainIdToHex,\n  isSolanaChainId,\n  StatusTypes,\n  UnifiedSwapBridgeEventName,\n  getActionType,\n  formatChainIdToCaip,\n  isCrossChain,\n  isHardwareWallet,\n} from '@metamask/bridge-controller';\nimport type { TraceCallback } from '@metamask/controller-utils';\nimport { toHex } from '@metamask/controller-utils';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  TransactionController,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport { numberToHex, type Hex } from '@metamask/utils';\n\nimport {\n  BRIDGE_PROD_API_BASE_URL,\n  BRIDGE_STATUS_CONTROLLER_NAME,\n  DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n  MAX_ATTEMPTS,\n  REFRESH_INTERVAL_MS,\n  TraceName,\n} from './constants';\nimport type {\n  BridgeStatusControllerState,\n  StartPollingForBridgeTxStatusArgsSerialized,\n  FetchFunction,\n  SolanaTransactionMeta,\n  BridgeHistoryItem,\n} from './types';\nimport { type BridgeStatusControllerMessenger } from './types';\nimport { BridgeClientId } from './types';\nimport {\n  fetchBridgeTxStatus,\n  getStatusRequestWithSrcTxHash,\n  shouldSkipFetchDueToFetchFailures,\n} from './utils/bridge-status';\nimport { getTxGasEstimates } from './utils/gas';\nimport {\n  getFinalizedTxProperties,\n  getPriceImpactFromQuote,\n  getRequestMetadataFromHistory,\n  getRequestParamFromHistory,\n  getTradeDataFromHistory,\n  getTradeDataFromQuote,\n  getEVMTxPropertiesFromTransactionMeta,\n  getTxStatusesFromHistory,\n} from './utils/metrics';\nimport {\n  findAndUpdateTransactionsInBatch,\n  getAddTransactionBatchParams,\n  getClientRequest,\n  getStatusRequestParams,\n  getUSDTAllowanceResetTx,\n  handleLineaDelay,\n  handleSolanaTxResponse,\n} from './utils/transaction';\nimport { generateActionId } from './utils/transaction';\n\nconst metadata: StateMetadata<BridgeStatusControllerState> = {\n  // We want to persist the bridge status state so that we can show the proper data for the Activity list\n  // basically match the behavior of TransactionController\n  txHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/** The input to start polling for the {@link BridgeStatusController} */\ntype BridgeStatusPollingInput = FetchBridgeTxStatusArgs;\n\ntype SrcTxMetaId = string;\nexport type FetchBridgeTxStatusArgs = {\n  bridgeTxMetaId: string;\n};\nexport class BridgeStatusController extends StaticIntervalPollingController<BridgeStatusPollingInput>()<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState,\n  BridgeStatusControllerMessenger\n> {\n  #pollingTokensByTxMetaId: Record<SrcTxMetaId, string> = {};\n\n  readonly #clientId: BridgeClientId;\n\n  readonly #fetchFn: FetchFunction;\n\n  readonly #config: {\n    customBridgeApiBaseUrl: string;\n  };\n\n  readonly #addTransactionFn: typeof TransactionController.prototype.addTransaction;\n\n  readonly #addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n\n  readonly #updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n\n  readonly #estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n\n  readonly #trace: TraceCallback;\n\n  constructor({\n    messenger,\n    state,\n    clientId,\n    fetchFn,\n    addTransactionFn,\n    addTransactionBatchFn,\n    updateTransactionFn,\n    estimateGasFeeFn,\n    config,\n    traceFn,\n  }: {\n    messenger: BridgeStatusControllerMessenger;\n    state?: Partial<BridgeStatusControllerState>;\n    clientId: BridgeClientId;\n    fetchFn: FetchFunction;\n    addTransactionFn: typeof TransactionController.prototype.addTransaction;\n    addTransactionBatchFn: typeof TransactionController.prototype.addTransactionBatch;\n    updateTransactionFn: typeof TransactionController.prototype.updateTransaction;\n    estimateGasFeeFn: typeof TransactionController.prototype.estimateGasFee;\n    config?: {\n      customBridgeApiBaseUrl?: string;\n    };\n    traceFn?: TraceCallback;\n  }) {\n    super({\n      name: BRIDGE_STATUS_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      // Restore the persisted state\n      state: {\n        ...DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,\n        ...state,\n      },\n    });\n\n    this.#clientId = clientId;\n    this.#fetchFn = fetchFn;\n    this.#addTransactionFn = addTransactionFn;\n    this.#addTransactionBatchFn = addTransactionBatchFn;\n    this.#updateTransactionFn = updateTransactionFn;\n    this.#estimateGasFeeFn = estimateGasFeeFn;\n    this.#config = {\n      customBridgeApiBaseUrl:\n        config?.customBridgeApiBaseUrl ?? BRIDGE_PROD_API_BASE_URL,\n    };\n    this.#trace = traceFn ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    // Register action handlers\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:startPollingForBridgeTxStatus`,\n      this.startPollingForBridgeTxStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:wipeBridgeStatus`,\n      this.wipeBridgeStatus.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:resetState`,\n      this.resetState.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:submitTx`,\n      this.submitTx.bind(this),\n    );\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_STATUS_CONTROLLER_NAME}:restartPollingForFailedAttempts`,\n      this.restartPollingForFailedAttempts.bind(this),\n    );\n\n    // Set interval\n    this.setIntervalLength(REFRESH_INTERVAL_MS);\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionFailed',\n      ({ transactionMeta }) => {\n        const { type, status, id } = transactionMeta;\n        if (\n          type &&\n          [\n            TransactionType.bridge,\n            TransactionType.swap,\n            TransactionType.bridgeApproval,\n            TransactionType.swapApproval,\n          ].includes(type) &&\n          [\n            TransactionStatus.failed,\n            TransactionStatus.dropped,\n            TransactionStatus.rejected,\n          ].includes(status)\n        ) {\n          // Mark tx as failed in txHistory\n          this.#markTxAsFailed(transactionMeta);\n          // Track failed event\n          if (status !== TransactionStatus.rejected) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              id,\n              getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n            );\n          }\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'TransactionController:transactionConfirmed',\n      (transactionMeta) => {\n        const { type, id, chainId } = transactionMeta;\n        if (type === TransactionType.swap) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            id,\n            getEVMTxPropertiesFromTransactionMeta(transactionMeta),\n          );\n        }\n        if (type === TransactionType.bridge && !isSolanaChainId(chainId)) {\n          this.#startPollingForTxId(id);\n        }\n      },\n    );\n\n    // If you close the extension, but keep the browser open, the polling continues\n    // If you close the browser, the polling stops\n    // Check for historyItems that do not have a status of complete and restart polling\n    this.#restartPollingForIncompleteHistoryItems();\n  }\n\n  // Mark tx as failed in txHistory if either the approval or trade fails\n  readonly #markTxAsFailed = ({ id }: TransactionMeta) => {\n    const txHistoryKey = this.state.txHistory[id]\n      ? id\n      : Object.keys(this.state.txHistory).find(\n          (key) => this.state.txHistory[key].approvalTxId === id,\n        );\n    if (!txHistoryKey) {\n      return;\n    }\n    this.update((statusState) => {\n      statusState.txHistory[txHistoryKey].status.status = StatusTypes.FAILED;\n    });\n  };\n\n  resetState = () => {\n    this.update((state) => {\n      state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n    });\n  };\n\n  wipeBridgeStatus = ({\n    address,\n    ignoreNetwork,\n  }: {\n    address: string;\n    ignoreNetwork: boolean;\n  }) => {\n    // Wipe all networks for this address\n    if (ignoreNetwork) {\n      this.update((state) => {\n        state.txHistory = DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE.txHistory;\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      const selectedNetworkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      );\n      const selectedChainId = selectedNetworkClient.configuration.chainId;\n\n      this.#wipeBridgeStatusByChainId(address, selectedChainId);\n    }\n  };\n\n  /**\n   * Resets the attempts counter for a bridge transaction history item\n   * and restarts polling if it was previously stopped due to max attempts\n   *\n   * @param identifier - Object containing either txMetaId or txHash to identify the history item\n   * @param identifier.txMetaId - The transaction meta ID\n   * @param identifier.txHash - The transaction hash\n   */\n  restartPollingForFailedAttempts = (identifier: {\n    txMetaId?: string;\n    txHash?: string;\n  }) => {\n    const { txMetaId, txHash } = identifier;\n\n    if (!txMetaId && !txHash) {\n      throw new Error('Either txMetaId or txHash must be provided');\n    }\n\n    // Find the history item by txMetaId or txHash\n    let targetTxMetaId: string | undefined;\n\n    if (txMetaId) {\n      // Direct lookup by txMetaId\n      if (this.state.txHistory[txMetaId]) {\n        targetTxMetaId = txMetaId;\n      }\n    } else if (txHash) {\n      // Search by txHash in status.srcChain.txHash\n      targetTxMetaId = Object.keys(this.state.txHistory).find(\n        (id) => this.state.txHistory[id].status.srcChain.txHash === txHash,\n      );\n    }\n\n    if (!targetTxMetaId) {\n      throw new Error(\n        `No bridge transaction history found for ${\n          txMetaId ? `txMetaId: ${txMetaId}` : `txHash: ${txHash}`\n        }`,\n      );\n    }\n\n    const historyItem = this.state.txHistory[targetTxMetaId];\n\n    // Reset the attempts counter\n    this.update((state) => {\n      if (targetTxMetaId) {\n        state.txHistory[targetTxMetaId].attempts = undefined;\n      }\n    });\n\n    // Restart polling if it was stopped and this is a bridge transaction\n    const isBridgeTx = isCrossChain(\n      historyItem.quote.srcChainId,\n      historyItem.quote.destChainId,\n    );\n\n    if (isBridgeTx) {\n      // Check if polling was stopped (no active polling token)\n      const existingPollingToken =\n        this.#pollingTokensByTxMetaId[targetTxMetaId];\n\n      if (!existingPollingToken) {\n        // Restart polling\n        this.#startPollingForTxId(targetTxMetaId);\n      }\n    }\n  };\n\n  /**\n   * Restart polling for txs that are not in a final state\n   * This is called during initialization\n   */\n  readonly #restartPollingForIncompleteHistoryItems = () => {\n    // Check for historyItems that do not have a status of complete and restart polling\n    const { txHistory } = this.state;\n    const historyItems = Object.values(txHistory);\n    const incompleteHistoryItems = historyItems\n      .filter(\n        (historyItem) =>\n          historyItem.status.status === StatusTypes.PENDING ||\n          historyItem.status.status === StatusTypes.UNKNOWN,\n      )\n      .filter((historyItem) => {\n        // Check if we are already polling this tx, if so, skip restarting polling for that\n        const pollingToken =\n          this.#pollingTokensByTxMetaId[historyItem.txMetaId];\n        return !pollingToken;\n      })\n      // Swap txs don't need to have their statuses polled\n      .filter((historyItem) => {\n        const isBridgeTx = isCrossChain(\n          historyItem.quote.srcChainId,\n          historyItem.quote.destChainId,\n        );\n        return isBridgeTx;\n      });\n\n    incompleteHistoryItems.forEach((historyItem) => {\n      const bridgeTxMetaId = historyItem.txMetaId;\n      const shouldSkipFetch = shouldSkipFetchDueToFetchFailures(\n        historyItem.attempts,\n      );\n      if (shouldSkipFetch) {\n        return;\n      }\n\n      // We manually call startPolling() here rather than go through startPollingForBridgeTxStatus()\n      // because we don't want to overwrite the existing historyItem in state\n      this.#startPollingForTxId(bridgeTxMetaId);\n    });\n  };\n\n  readonly #addTxToHistory = (\n    startPollingForBridgeTxStatusArgs: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const {\n      bridgeTxMeta,\n      statusRequest,\n      quoteResponse,\n      startTime,\n      slippagePercentage,\n      initialDestAssetBalance,\n      targetContractAddress,\n      approvalTxId,\n      isStxEnabled,\n    } = startPollingForBridgeTxStatusArgs;\n\n    const accountAddress = this.#getMultichainSelectedAccountAddress();\n    // Write all non-status fields to state so we can reference the quote in Activity list without the Bridge API\n    // We know it's in progress but not the exact status yet\n    const txHistoryItem = {\n      txMetaId: bridgeTxMeta.id,\n      batchId: bridgeTxMeta.batchId,\n      quote: quoteResponse.quote,\n      startTime,\n      estimatedProcessingTimeInSeconds:\n        quoteResponse.estimatedProcessingTimeInSeconds,\n      slippagePercentage,\n      pricingData: {\n        amountSent: quoteResponse.sentAmount.amount,\n        amountSentInUsd: quoteResponse.sentAmount.usd ?? undefined,\n        quotedGasInUsd: quoteResponse.gasFee.effective?.usd ?? undefined,\n        quotedReturnInUsd: quoteResponse.toTokenAmount.usd ?? undefined,\n      },\n      initialDestAssetBalance,\n      targetContractAddress,\n      account: accountAddress,\n      status: {\n        // We always have a PENDING status when we start polling for a tx, don't need the Bridge API for that\n        // Also we know the bare minimum fields for status at this point in time\n        status: StatusTypes.PENDING,\n        srcChain: {\n          chainId: statusRequest.srcChainId,\n          txHash: statusRequest.srcTxHash,\n        },\n      },\n      hasApprovalTx: Boolean(quoteResponse.approval),\n      approvalTxId,\n      isStxEnabled: isStxEnabled ?? false,\n    };\n    this.update((state) => {\n      // Use the txMeta.id as the key so we can reference the txMeta in TransactionController\n      state.txHistory[bridgeTxMeta.id] = txHistoryItem;\n    });\n  };\n\n  readonly #startPollingForTxId = (txId: string) => {\n    // If we are already polling for this tx, stop polling for it before restarting\n    const existingPollingToken = this.#pollingTokensByTxMetaId[txId];\n    if (existingPollingToken) {\n      this.stopPollingByPollingToken(existingPollingToken);\n    }\n\n    const txHistoryItem = this.state.txHistory[txId];\n    if (!txHistoryItem) {\n      return;\n    }\n    const { quote } = txHistoryItem;\n\n    const isBridgeTx = isCrossChain(quote.srcChainId, quote.destChainId);\n    if (isBridgeTx) {\n      this.#pollingTokensByTxMetaId[txId] = this.startPolling({\n        bridgeTxMetaId: txId,\n      });\n    }\n  };\n\n  /**\n   * @deprecated For EVM/Solana swap/bridge txs we add tx to history in submitTx()\n   * For Solana swap/bridge we start polling in submitTx()\n   * For EVM bridge we listen for 'TransactionController:transactionConfirmed' and start polling there\n   * No clients currently call this, safe to remove in future versions\n   *\n   * Adds tx to history and starts polling for the bridge tx status\n   *\n   * @param txHistoryMeta - The parameters for creating the history item\n   */\n  startPollingForBridgeTxStatus = (\n    txHistoryMeta: StartPollingForBridgeTxStatusArgsSerialized,\n  ) => {\n    const { bridgeTxMeta } = txHistoryMeta;\n\n    this.#addTxToHistory(txHistoryMeta);\n    this.#startPollingForTxId(bridgeTxMeta.id);\n  };\n\n  // This will be called after you call this.startPolling()\n  // The args passed in are the args you passed in to startPolling()\n  _executePoll = async (pollingInput: BridgeStatusPollingInput) => {\n    await this.#fetchBridgeTxStatus(pollingInput);\n  };\n\n  #getMultichainSelectedAccount() {\n    return this.messagingSystem.call(\n      'AccountsController:getSelectedMultichainAccount',\n    );\n  }\n\n  #getMultichainSelectedAccountAddress() {\n    return this.#getMultichainSelectedAccount()?.address ?? '';\n  }\n\n  /**\n   * Handles the failure to fetch the bridge tx status\n   * We eventually stop polling for the tx if we fail too many times\n   * Failures (500 errors) can be due to:\n   * - The srcTxHash not being available immediately for STX\n   * - The srcTxHash being invalid for the chain. This case will never resolve so we stop polling for it to avoid hammering the Bridge API forever.\n   *\n   * @param bridgeTxMetaId - The txMetaId of the bridge tx\n   */\n  readonly #handleFetchFailure = (bridgeTxMetaId: string) => {\n    const { attempts } = this.state.txHistory[bridgeTxMetaId];\n\n    const newAttempts = attempts\n      ? {\n          counter: attempts.counter + 1,\n          lastAttemptTime: Date.now(),\n        }\n      : {\n          counter: 1,\n          lastAttemptTime: Date.now(),\n        };\n\n    // If we've failed too many times, stop polling for the tx\n    const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    if (newAttempts.counter >= MAX_ATTEMPTS && pollingToken) {\n      this.stopPollingByPollingToken(pollingToken);\n      delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n    }\n\n    // Update the attempts counter\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].attempts = newAttempts;\n    });\n  };\n\n  readonly #fetchBridgeTxStatus = async ({\n    bridgeTxMetaId,\n  }: FetchBridgeTxStatusArgs) => {\n    const { txHistory } = this.state;\n\n    if (\n      shouldSkipFetchDueToFetchFailures(txHistory[bridgeTxMetaId]?.attempts)\n    ) {\n      return;\n    }\n\n    try {\n      // We try here because we receive 500 errors from Bridge API if we try to fetch immediately after submitting the source tx\n      // Oddly mostly happens on Optimism, never on Arbitrum. By the 2nd fetch, the Bridge API responds properly.\n      // Also srcTxHash may not be available immediately for STX, so we don't want to fetch in those cases\n      const historyItem = txHistory[bridgeTxMetaId];\n      const srcTxHash = this.#getSrcTxHash(bridgeTxMetaId);\n      if (!srcTxHash) {\n        return;\n      }\n\n      this.#updateSrcTxHash(bridgeTxMetaId, srcTxHash);\n\n      const statusRequest = getStatusRequestWithSrcTxHash(\n        historyItem.quote,\n        srcTxHash,\n      );\n      const status = await fetchBridgeTxStatus(\n        statusRequest,\n        this.#clientId,\n        this.#fetchFn,\n        this.#config.customBridgeApiBaseUrl,\n      );\n      const newBridgeHistoryItem = {\n        ...historyItem,\n        status,\n        completionTime:\n          status.status === StatusTypes.COMPLETE ||\n          status.status === StatusTypes.FAILED\n            ? Date.now()\n            : undefined, // TODO make this more accurate by looking up dest txHash block time\n        attempts: undefined,\n      };\n\n      // No need to purge these on network change or account change, TransactionController does not purge either.\n      // TODO In theory we can skip checking status if it's not the current account/network\n      // we need to keep track of the account that this is associated with as well so that we don't show it in Activity list for other accounts\n      // First stab at this will not stop polling when you are on a different account\n      this.update((state) => {\n        state.txHistory[bridgeTxMetaId] = newBridgeHistoryItem;\n      });\n\n      const pollingToken = this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n      const isFinalStatus =\n        status.status === StatusTypes.COMPLETE ||\n        status.status === StatusTypes.FAILED;\n\n      if (isFinalStatus && pollingToken) {\n        this.stopPollingByPollingToken(pollingToken);\n        delete this.#pollingTokensByTxMetaId[bridgeTxMetaId];\n\n        if (status.status === StatusTypes.COMPLETE) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            bridgeTxMetaId,\n          );\n        }\n        if (status.status === StatusTypes.FAILED) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Failed,\n            bridgeTxMetaId,\n          );\n        }\n      }\n    } catch (e) {\n      console.log('Failed to fetch bridge tx status', e);\n      this.#handleFetchFailure(bridgeTxMetaId);\n    }\n  };\n\n  readonly #getSrcTxHash = (bridgeTxMetaId: string): string | undefined => {\n    const { txHistory } = this.state;\n    // Prefer the srcTxHash from bridgeStatusState so we don't have to l ook up in TransactionController\n    // But it is possible to have bridgeHistoryItem in state without the srcTxHash yet when it is an STX\n    const srcTxHash = txHistory[bridgeTxMetaId].status.srcChain.txHash;\n\n    if (srcTxHash) {\n      return srcTxHash;\n    }\n\n    // Look up in TransactionController if txMeta has been updated with the srcTxHash\n    const txControllerState = this.messagingSystem.call(\n      'TransactionController:getState',\n    );\n    const txMeta = txControllerState.transactions.find(\n      (tx: TransactionMeta) => tx.id === bridgeTxMetaId,\n    );\n    return txMeta?.hash;\n  };\n\n  readonly #updateSrcTxHash = (bridgeTxMetaId: string, srcTxHash: string) => {\n    const { txHistory } = this.state;\n    if (txHistory[bridgeTxMetaId].status.srcChain.txHash) {\n      return;\n    }\n\n    this.update((state) => {\n      state.txHistory[bridgeTxMetaId].status.srcChain.txHash = srcTxHash;\n    });\n  };\n\n  // Wipes the bridge status for the given address and chainId\n  // Will match only source chainId to the selectedChainId\n  readonly #wipeBridgeStatusByChainId = (\n    address: string,\n    selectedChainId: Hex,\n  ) => {\n    const sourceTxMetaIdsToDelete = Object.keys(this.state.txHistory).filter(\n      (txMetaId) => {\n        const bridgeHistoryItem = this.state.txHistory[txMetaId];\n\n        const hexSourceChainId = numberToHex(\n          bridgeHistoryItem.quote.srcChainId,\n        );\n\n        return (\n          bridgeHistoryItem.account === address &&\n          hexSourceChainId === selectedChainId\n        );\n      },\n    );\n\n    sourceTxMetaIdsToDelete.forEach((sourceTxMetaId) => {\n      const pollingToken = this.#pollingTokensByTxMetaId[sourceTxMetaId];\n\n      if (pollingToken) {\n        this.stopPollingByPollingToken(\n          this.#pollingTokensByTxMetaId[sourceTxMetaId],\n        );\n      }\n    });\n\n    this.update((state) => {\n      state.txHistory = sourceTxMetaIdsToDelete.reduce(\n        (acc, sourceTxMetaId) => {\n          delete acc[sourceTxMetaId];\n          return acc;\n        },\n        state.txHistory,\n      );\n    });\n  };\n\n  /**\n   * ******************************************************\n   * TX SUBMISSION HANDLING\n   *******************************************************\n   */\n\n  /**\n   * Submits the transaction to the snap using the keyring rpc method\n   * This adds an approval tx to the ApprovalsController in the background\n   * The client needs to handle the approval tx by redirecting to the confirmation page with the approvalTxId in the URL\n   *\n   * @param quoteResponse - The quote response\n   * @param quoteResponse.quote - The quote\n   * @returns The transaction meta\n   */\n  readonly #handleSolanaTx = async (\n    quoteResponse: QuoteResponse<string> & QuoteMetadata,\n  ) => {\n    const selectedAccount = this.#getMultichainSelectedAccount();\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined multichain account',\n      );\n    }\n    if (!selectedAccount?.metadata?.snap?.id) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: undefined snap id',\n      );\n    }\n\n    const request = getClientRequest(quoteResponse, selectedAccount);\n    const requestResponse = (await this.messagingSystem.call(\n      'SnapController:handleRequest',\n      request,\n    )) as string | { result: Record<string, string> } | { signature: string };\n\n    // The extension client actually redirects before it can do anytyhing with this meta\n    const txMeta = handleSolanaTxResponse(\n      requestResponse,\n      quoteResponse,\n      selectedAccount,\n    );\n\n    // TODO remove this eventually, just returning it now to match extension behavior\n    // OR if the snap can propagate the snapRequestId or keyringReqId to the ApprovalsController, this can return the approvalTxId instead and clients won't need to subscribe to the ApprovalsController state to redirect\n    return txMeta;\n  };\n\n  readonly #waitForHashAndReturnFinalTxMeta = async (\n    hashPromise?: Awaited<\n      ReturnType<TransactionController['addTransaction']>\n    >['result'],\n  ): Promise<TransactionMeta> => {\n    const transactionHash = await hashPromise;\n    const finalTransactionMeta: TransactionMeta | undefined =\n      this.messagingSystem\n        .call('TransactionController:getState')\n        .transactions.find(\n          (tx: TransactionMeta) => tx.hash === transactionHash,\n        );\n    if (!finalTransactionMeta) {\n      throw new Error(\n        'Failed to submit cross-chain swap tx: txMeta for txHash was not found',\n      );\n    }\n    return finalTransactionMeta;\n  };\n\n  readonly #handleApprovalTx = async (\n    isBridgeTx: boolean,\n    quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata,\n    requireApproval?: boolean,\n  ): Promise<TransactionMeta | undefined> => {\n    const { approval } = quoteResponse;\n\n    if (approval) {\n      const approveTx = async () => {\n        await this.#handleUSDTAllowanceReset(quoteResponse);\n\n        const approvalTxMeta = await this.#handleEvmTransaction({\n          transactionType: isBridgeTx\n            ? TransactionType.bridgeApproval\n            : TransactionType.swapApproval,\n          trade: approval,\n          requireApproval,\n        });\n\n        await handleLineaDelay(quoteResponse);\n        return approvalTxMeta;\n      };\n\n      return await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionApprovalCompleted\n            : TraceName.SwapTransactionApprovalCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        approveTx,\n      );\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Submits an EVM transaction to the TransactionController\n   *\n   * @param params - The parameters for the transaction\n   * @param params.transactionType - The type of transaction to submit\n   * @param params.trade - The trade data to confirm\n   * @param params.requireApproval - Whether to require approval for the transaction\n   * @returns The transaction meta\n   */\n  readonly #handleEvmTransaction = async ({\n    transactionType,\n    trade,\n    requireApproval = false,\n  }: {\n    transactionType: TransactionType;\n    trade: TxData;\n    requireApproval?: boolean;\n  }): Promise<TransactionMeta> => {\n    const actionId = generateActionId().toString();\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      trade.from,\n    );\n    if (!selectedAccount) {\n      throw new Error(\n        'Failed to submit cross-chain swap transaction: unknown account in trade data',\n      );\n    }\n    const hexChainId = formatChainIdToHex(trade.chainId);\n    const networkClientId = this.messagingSystem.call(\n      'NetworkController:findNetworkClientIdByChainId',\n      hexChainId,\n    );\n\n    const requestOptions = {\n      actionId,\n      networkClientId,\n      requireApproval,\n      type: transactionType,\n      origin: 'metamask',\n    };\n    const transactionParams: Parameters<\n      TransactionController['addTransaction']\n    >[0] = {\n      ...trade,\n      chainId: hexChainId,\n      gasLimit: trade.gasLimit?.toString(),\n      gas: trade.gasLimit?.toString(),\n    };\n    const transactionParamsWithMaxGas: TransactionParams = {\n      ...transactionParams,\n      ...(await this.#calculateGasFees(\n        transactionParams,\n        networkClientId,\n        hexChainId,\n      )),\n    };\n\n    const { result } = await this.#addTransactionFn(\n      transactionParamsWithMaxGas,\n      requestOptions,\n    );\n\n    return await this.#waitForHashAndReturnFinalTxMeta(result);\n  };\n\n  readonly #handleUSDTAllowanceReset = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n  ) => {\n    const resetApproval = await getUSDTAllowanceResetTx(\n      this.messagingSystem,\n      quoteResponse,\n    );\n    if (resetApproval) {\n      await this.#handleEvmTransaction({\n        transactionType: TransactionType.bridgeApproval,\n        trade: resetApproval,\n      });\n    }\n  };\n\n  readonly #calculateGasFees = async (\n    transactionParams: TransactionParams,\n    networkClientId: string,\n    chainId: Hex,\n  ) => {\n    const { gasFeeEstimates } = this.messagingSystem.call(\n      'GasFeeController:getState',\n    );\n    const { estimates: txGasFeeEstimates } = await this.#estimateGasFeeFn({\n      transactionParams,\n      chainId,\n      networkClientId,\n    });\n    const { maxFeePerGas, maxPriorityFeePerGas } = getTxGasEstimates({\n      networkGasFeeEstimates: gasFeeEstimates,\n      txGasFeeEstimates,\n    });\n    const maxGasLimit = toHex(transactionParams.gas ?? 0);\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gas: maxGasLimit,\n    };\n  };\n\n  /**\n   * Submits batched EVM transactions to the TransactionController\n   *\n   * @param args - The parameters for the transaction\n   * @param args.isBridgeTx - Whether the transaction is a bridge transaction\n   * @param args.trade - The trade data to confirm\n   * @param args.approval - The approval data to confirm\n   * @param args.resetApproval - The ethereum:USDT reset approval data to confirm\n   * @param args.quoteResponse - The quote response\n   * @param args.requireApproval - Whether to require approval for the transaction\n   * @returns The approvalMeta and tradeMeta for the batched transaction\n   */\n  readonly #handleEvmTransactionBatch = async (\n    args: Omit<\n      Parameters<typeof getAddTransactionBatchParams>[0],\n      'messagingSystem' | 'estimateGasFeeFn'\n    >,\n  ) => {\n    const transactionParams = await getAddTransactionBatchParams({\n      messagingSystem: this.messagingSystem,\n      estimateGasFeeFn: this.#estimateGasFeeFn,\n      ...args,\n    });\n    const txDataByType = {\n      [TransactionType.bridgeApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridgeApproval,\n      )?.params.data,\n      [TransactionType.swapApproval]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swapApproval,\n      )?.params.data,\n      [TransactionType.bridge]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.bridge,\n      )?.params.data,\n      [TransactionType.swap]: transactionParams.transactions.find(\n        ({ type }) => type === TransactionType.swap,\n      )?.params.data,\n    };\n\n    const { batchId } = await this.#addTransactionBatchFn(transactionParams);\n    const { approvalMeta, tradeMeta } = findAndUpdateTransactionsInBatch({\n      messagingSystem: this.messagingSystem,\n      updateTransactionFn: this.#updateTransactionFn,\n      batchId,\n      txDataByType,\n    });\n\n    if (!tradeMeta) {\n      throw new Error(\n        'Failed to update cross-chain swap transaction batch: tradeMeta not found',\n      );\n    }\n\n    return { approvalMeta, tradeMeta };\n  };\n\n  /**\n   * Submits a cross-chain swap transaction\n   *\n   * @param quoteResponse - The quote response\n   * @param isStxEnabledOnClient - Whether smart transactions are enabled on the client, for example the getSmartTransactionsEnabled selector value from the extension\n   * @returns The transaction meta\n   */\n  submitTx = async (\n    quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n    isStxEnabledOnClient: boolean,\n  ): Promise<TransactionMeta & Partial<SolanaTransactionMeta>> => {\n    this.messagingSystem.call('BridgeController:stopPollingForQuotes');\n\n    // Before the tx is confirmed, its data is not available in txHistory\n    // The quote is used to populate event properties before confirmation\n    const preConfirmationProperties = {\n      ...getPriceImpactFromQuote(quoteResponse.quote),\n      ...getTradeDataFromQuote(quoteResponse),\n      token_symbol_source: quoteResponse.quote.srcAsset.symbol,\n      token_symbol_destination: quoteResponse.quote.destAsset.symbol,\n      usd_amount_source: Number(quoteResponse.sentAmount?.usd ?? 0),\n      stx_enabled: isStxEnabledOnClient,\n    };\n    // Emit Submitted event after submit button is clicked\n    this.#trackUnifiedSwapBridgeEvent(\n      UnifiedSwapBridgeEventName.Submitted,\n      undefined,\n      preConfirmationProperties,\n    );\n\n    let txMeta: TransactionMeta & Partial<SolanaTransactionMeta>;\n    let approvalTxId: string | undefined;\n    const startTime = Date.now();\n\n    const isBridgeTx = isCrossChain(\n      quoteResponse.quote.srcChainId,\n      quoteResponse.quote.destChainId,\n    );\n\n    // Submit SOLANA tx\n    if (\n      isSolanaChainId(quoteResponse.quote.srcChainId) &&\n      typeof quoteResponse.trade === 'string'\n    ) {\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: false,\n          },\n        },\n        async () => {\n          try {\n            return await this.#handleSolanaTx(\n              quoteResponse as QuoteResponse<string> & QuoteMetadata,\n            );\n          } catch (error) {\n            this.#trackUnifiedSwapBridgeEvent(\n              UnifiedSwapBridgeEventName.Failed,\n              txMeta?.id,\n              {\n                error_message: (error as Error)?.message,\n                ...preConfirmationProperties,\n              },\n            );\n            throw error;\n          }\n        },\n      );\n    } else {\n      // Submit EVM tx\n      // For hardware wallets on Mobile, this is fixes an issue where the Ledger does not get prompted for the 2nd approval\n      // Extension does not have this issue\n      const requireApproval =\n        this.#clientId === BridgeClientId.MOBILE &&\n        isHardwareWallet(this.#getMultichainSelectedAccount());\n\n      // Handle smart transactions if enabled\n      txMeta = await this.#trace(\n        {\n          name: isBridgeTx\n            ? TraceName.BridgeTransactionCompleted\n            : TraceName.SwapTransactionCompleted,\n          data: {\n            srcChainId: formatChainIdToCaip(quoteResponse.quote.srcChainId),\n            stxEnabled: isStxEnabledOnClient,\n          },\n        },\n        async () => {\n          if (isStxEnabledOnClient) {\n            const { tradeMeta, approvalMeta } =\n              await this.#handleEvmTransactionBatch({\n                isBridgeTx,\n                resetApproval: await getUSDTAllowanceResetTx(\n                  this.messagingSystem,\n                  quoteResponse,\n                ),\n                approval: quoteResponse.approval,\n                trade: quoteResponse.trade as TxData,\n                quoteResponse,\n                requireApproval,\n              });\n            approvalTxId = approvalMeta?.id;\n            return tradeMeta;\n          }\n          // Set approval time and id if an approval tx is needed\n          const approvalTxMeta = await this.#handleApprovalTx(\n            isBridgeTx,\n            quoteResponse,\n            requireApproval,\n          );\n          approvalTxId = approvalTxMeta?.id;\n          return await this.#handleEvmTransaction({\n            transactionType: isBridgeTx\n              ? TransactionType.bridge\n              : TransactionType.swap,\n            trade: quoteResponse.trade as TxData,\n            requireApproval,\n          });\n        },\n      );\n    }\n\n    try {\n      // Add swap or bridge tx to history\n      this.#addTxToHistory({\n        bridgeTxMeta: txMeta, // Only the id field is used by the BridgeStatusController\n        statusRequest: {\n          ...getStatusRequestParams(quoteResponse),\n          srcTxHash: txMeta.hash,\n        },\n        quoteResponse,\n        slippagePercentage: 0, // TODO include slippage provided by quote if using dynamic slippage, or slippage from quote request\n        isStxEnabled: isStxEnabledOnClient,\n        startTime,\n        approvalTxId,\n      });\n\n      if (isSolanaChainId(quoteResponse.quote.srcChainId)) {\n        // Start polling for bridge tx status\n        this.#startPollingForTxId(txMeta.id);\n        // Track Solana Swap completed event\n        if (!isBridgeTx) {\n          this.#trackUnifiedSwapBridgeEvent(\n            UnifiedSwapBridgeEventName.Completed,\n            txMeta.id,\n          );\n        }\n      }\n    } catch {\n      // Ignore errors here, we don't want to crash the app if this fails and tx submission succeeds\n    }\n    return txMeta;\n  };\n\n  /**\n   * Tracks post-submission events for a cross-chain swap based on the history item\n   *\n   * @param eventName - The name of the event to track\n   * @param txMetaId - The txMetaId of the history item to track the event for\n   * @param eventProperties - The properties for the event\n   */\n  readonly #trackUnifiedSwapBridgeEvent = <\n    T extends\n      | typeof UnifiedSwapBridgeEventName.Submitted\n      | typeof UnifiedSwapBridgeEventName.Failed\n      | typeof UnifiedSwapBridgeEventName.SnapConfirmationViewed\n      | typeof UnifiedSwapBridgeEventName.Completed,\n  >(\n    eventName: T,\n    txMetaId?: string,\n    eventProperties?: Pick<RequiredEventContextFromClient, T>[T],\n  ) => {\n    if (!txMetaId) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const historyItem: BridgeHistoryItem | undefined =\n      this.state.txHistory[txMetaId];\n    if (!historyItem) {\n      this.messagingSystem.call(\n        'BridgeController:trackUnifiedSwapBridgeEvent',\n        eventName,\n        eventProperties ?? {},\n      );\n      return;\n    }\n\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getAccountByAddress',\n      historyItem.account,\n    );\n\n    const requiredEventProperties = {\n      action_type: getActionType(\n        historyItem.quote.srcChainId,\n        historyItem.quote.destChainId,\n      ),\n      ...(eventProperties ?? {}),\n      ...getRequestParamFromHistory(historyItem),\n      ...getRequestMetadataFromHistory(historyItem, selectedAccount),\n      ...getTradeDataFromHistory(historyItem),\n      ...getTxStatusesFromHistory(historyItem),\n      ...getFinalizedTxProperties(historyItem),\n      ...getPriceImpactFromQuote(historyItem.quote),\n    };\n\n    this.messagingSystem.call(\n      'BridgeController:trackUnifiedSwapBridgeEvent',\n      eventName,\n      requiredEventProperties,\n    );\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/types.cjs.map b/dist/types.cjs.map
index 18dacde5e6a4e954815a651d06469b1848308bf8..c349ce4d60d1afa8e975671400dcfd3dd011ea00 100644
--- a/dist/types.cjs.map
+++ b/dist/types.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAsCA,8EAA8E;AAC9E,2BAA2B;AAE3B,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,8BAAd,cAAc,QAGzB;AA0CD,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,2BAAe,CAAA;IACf,uCAA2B,CAAA;IAC3B,+BAAmB,CAAA;IACnB,+BAAmB,CAAA;IACnB,mCAAuB,CAAA;IACvB,qCAAyB,CAAA;IACzB,6BAAiB,CAAA;IACjB,6BAAiB,CAAA;IACjB,iCAAqB,CAAA;IACrB,2BAAe,CAAA;IACf,2BAAe,CAAA;AACjB,CAAC,EAbW,QAAQ,wBAAR,QAAQ,QAanB;AA0CD,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC5B,0FAAoE,CAAA;IACpE,6DAAuC,CAAA;IACvC,4CAAsB,CAAA;IACtB,gDAA0B,CAAA;IAC1B,4CAAsB,CAAA;IACtB,6FAAuE,CAAA;AACzE,CAAC,EAPW,kBAAkB,kCAAlB,kBAAkB,QAO7B","sourcesContent":["import type {\n  AccountsControllerGetAccountByAddressAction,\n  AccountsControllerGetSelectedMultichainAccountAction,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  BridgeBackgroundAction,\n  BridgeControllerAction,\n  ChainId,\n  Quote,\n  QuoteMetadata,\n  QuoteResponse,\n  TxData,\n} from '@metamask/bridge-controller';\nimport type { GetGasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  TransactionControllerGetStateAction,\n  TransactionControllerTransactionConfirmedEvent,\n  TransactionControllerTransactionFailedEvent,\n  TransactionMeta,\n} from '@metamask/transaction-controller';\n\nimport type { BridgeStatusController } from './bridge-status-controller';\nimport type { BRIDGE_STATUS_CONTROLLER_NAME } from './constants';\nimport type { StatusResponseSchema } from './utils/validators';\n\n// All fields need to be types not interfaces, same with their children fields\n// o/w you get a type error\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * These fields are specific to Solana transactions and can likely be infered from TransactionMeta\n *\n * @deprecated these should be removed eventually\n */\nexport type SolanaTransactionMeta = {\n  isSolana: boolean;\n  isBridgeTx: boolean;\n};\n\nexport type StatusRequest = {\n  bridgeId: string; // lifi, socket, squid\n  srcTxHash?: string; // lifi, socket, squid, might be undefined for STX\n  bridge: string; // lifi, socket, squid\n  srcChainId: ChainId; // lifi, socket, squid\n  destChainId: ChainId; // lifi, socket, squid\n  quote?: Quote; // squid\n  refuel?: boolean; // lifi\n};\n\nexport type StatusRequestDto = Omit<\n  StatusRequest,\n  'quote' | 'srcChainId' | 'destChainId' | 'refuel'\n> & {\n  srcChainId: string; // lifi, socket, squid\n  destChainId: string; // lifi, socket, squid\n  requestId?: string;\n  refuel?: string; // lifi\n};\n\nexport type StatusRequestWithSrcTxHash = StatusRequest & {\n  srcTxHash: string;\n};\n\nexport enum BridgeId {\n  HOP = 'hop',\n  CELER = 'celer',\n  CELERCIRCLE = 'celercircle',\n  CONNEXT = 'connext',\n  POLYGON = 'polygon',\n  AVALANCHE = 'avalanche',\n  MULTICHAIN = 'multichain',\n  AXELAR = 'axelar',\n  ACROSS = 'across',\n  STARGATE = 'stargate',\n  RELAY = 'relay',\n  MAYAN = 'mayan',\n}\n\nexport type StatusResponse = Infer<typeof StatusResponseSchema>;\n\nexport type RefuelStatusResponse = object & StatusResponse;\n\nexport type BridgeHistoryItem = {\n  txMetaId: string; // Need this to handle STX that might not have a txHash immediately\n  batchId?: string;\n  quote: Quote;\n  status: StatusResponse;\n  startTime?: number; // timestamp in ms\n  estimatedProcessingTimeInSeconds: number;\n  slippagePercentage: number;\n  completionTime?: number; // timestamp in ms\n  pricingData?: {\n    /**\n     * The actual amount sent by user in non-atomic decimal form\n     */\n    amountSent: QuoteMetadata['sentAmount']['amount'];\n    amountSentInUsd?: QuoteMetadata['sentAmount']['usd'];\n    quotedGasInUsd?: QuoteMetadata['gasFee']['usd'];\n    quotedReturnInUsd?: QuoteMetadata['toTokenAmount']['usd'];\n    quotedRefuelSrcAmountInUsd?: string;\n    quotedRefuelDestAmountInUsd?: string;\n  };\n  initialDestAssetBalance?: string;\n  targetContractAddress?: string;\n  account: string;\n  hasApprovalTx: boolean;\n  approvalTxId?: string;\n  isStxEnabled?: boolean;\n  /**\n   * Attempts tracking for exponential backoff on failed fetches.\n   * We track the number of attempts and the last attempt time for each txMetaId that has failed at least once\n   */\n  attempts?: {\n    counter: number;\n    lastAttemptTime: number; // timestamp in ms\n  };\n};\n\nexport enum BridgeStatusAction {\n  START_POLLING_FOR_BRIDGE_TX_STATUS = 'startPollingForBridgeTxStatus',\n  WIPE_BRIDGE_STATUS = 'wipeBridgeStatus',\n  GET_STATE = 'getState',\n  RESET_STATE = 'resetState',\n  SUBMIT_TX = 'submitTx',\n  RESTART_POLLING_FOR_FAILED_ATTEMPTS = 'restartPollingForFailedAttempts',\n}\n\nexport type TokenAmountValuesSerialized = {\n  amount: string;\n  valueInCurrency: string | null;\n  usd: string | null;\n};\n\nexport type QuoteMetadataSerialized = {\n  gasFee: TokenAmountValuesSerialized;\n  /**\n   * The total network fee for the bridge transaction\n   * estimatedGasFees + relayerFees\n   */\n  totalNetworkFee: TokenAmountValuesSerialized;\n  /**\n   * The total max network fee for the bridge transaction\n   * maxGasFees + relayerFees\n   */\n  totalMaxNetworkFee: TokenAmountValuesSerialized;\n  toTokenAmount: TokenAmountValuesSerialized;\n  /**\n   * The adjusted return for the bridge transaction\n   * destTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValuesSerialized, 'amount'>;\n  /**\n   * The actual amount sent by user in non-atomic decimal form\n   * srcTokenAmount + metabridgeFee\n   */\n  sentAmount: TokenAmountValuesSerialized;\n  swapRate: string; // destTokenAmount / sentAmount\n  /**\n   * The cost of the bridge transaction\n   * sentAmount - adjustedReturn\n   */\n  cost: Omit<TokenAmountValuesSerialized, 'amount'>;\n};\n\nexport type StartPollingForBridgeTxStatusArgs = {\n  bridgeTxMeta: TransactionMeta;\n  statusRequest: StatusRequest;\n  quoteResponse: QuoteResponse & QuoteMetadata;\n  startTime?: BridgeHistoryItem['startTime'];\n  slippagePercentage: BridgeHistoryItem['slippagePercentage'];\n  initialDestAssetBalance?: BridgeHistoryItem['initialDestAssetBalance'];\n  targetContractAddress?: BridgeHistoryItem['targetContractAddress'];\n  approvalTxId?: BridgeHistoryItem['approvalTxId'];\n  isStxEnabled?: BridgeHistoryItem['isStxEnabled'];\n};\n\n/**\n * Chrome: The BigNumber values are automatically serialized to strings when sent to the background\n * Firefox: The BigNumber values are not serialized to strings when sent to the background,\n * so we force the ui to do it manually, by using StartPollingForBridgeTxStatusArgsSerialized type on the startPollingForBridgeTxStatus action\n */\nexport type StartPollingForBridgeTxStatusArgsSerialized = Omit<\n  StartPollingForBridgeTxStatusArgs,\n  'quoteResponse'\n> & {\n  quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata;\n};\n\nexport type SourceChainTxMetaId = string;\n\nexport type BridgeStatusControllerState = {\n  txHistory: Record<SourceChainTxMetaId, BridgeHistoryItem>;\n};\n\n// Actions\ntype BridgeStatusControllerAction<\n  FunctionName extends keyof BridgeStatusController,\n> = {\n  type: `${typeof BRIDGE_STATUS_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeStatusController[FunctionName];\n};\n\nexport type BridgeStatusControllerGetStateAction = ControllerGetStateAction<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\n// Maps to BridgeController function names\nexport type BridgeStatusControllerStartPollingForBridgeTxStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS>;\n\nexport type BridgeStatusControllerWipeBridgeStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.WIPE_BRIDGE_STATUS>;\n\nexport type BridgeStatusControllerResetStateAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESET_STATE>;\n\nexport type BridgeStatusControllerSubmitTxAction =\n  BridgeStatusControllerAction<BridgeStatusAction.SUBMIT_TX>;\n\nexport type BridgeStatusControllerRestartPollingForFailedAttemptsAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESTART_POLLING_FOR_FAILED_ATTEMPTS>;\n\nexport type BridgeStatusControllerActions =\n  | BridgeStatusControllerStartPollingForBridgeTxStatusAction\n  | BridgeStatusControllerWipeBridgeStatusAction\n  | BridgeStatusControllerResetStateAction\n  | BridgeStatusControllerGetStateAction\n  | BridgeStatusControllerSubmitTxAction\n  | BridgeStatusControllerRestartPollingForFailedAttemptsAction;\n\n// Events\nexport type BridgeStatusControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\nexport type BridgeStatusControllerEvents =\n  BridgeStatusControllerStateChangeEvent;\n\n/**\n * The external actions available to the BridgeStatusController.\n */\ntype AllowedActions =\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | HandleSnapRequest\n  | TransactionControllerGetStateAction\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | GetGasFeeState\n  | AccountsControllerGetAccountByAddressAction\n  | RemoteFeatureFlagControllerGetStateAction;\n\n/**\n * The external events available to the BridgeStatusController.\n */\ntype AllowedEvents =\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionConfirmedEvent;\n\n/**\n * The messenger for the BridgeStatusController.\n */\nexport type BridgeStatusControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerActions | AllowedActions,\n  BridgeStatusControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
+{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAsCA,8EAA8E;AAC9E,2BAA2B;AAE3B,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,8BAAd,cAAc,QAGzB;AA0CD,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,2BAAe,CAAA;IACf,uCAA2B,CAAA;IAC3B,+BAAmB,CAAA;IACnB,+BAAmB,CAAA;IACnB,mCAAuB,CAAA;IACvB,qCAAyB,CAAA;IACzB,6BAAiB,CAAA;IACjB,6BAAiB,CAAA;IACjB,iCAAqB,CAAA;IACrB,2BAAe,CAAA;IACf,2BAAe,CAAA;AACjB,CAAC,EAbW,QAAQ,wBAAR,QAAQ,QAanB;AA4CD,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC5B,0FAAoE,CAAA;IACpE,6DAAuC,CAAA;IACvC,4CAAsB,CAAA;IACtB,gDAA0B,CAAA;IAC1B,4CAAsB,CAAA;IACtB,6FAAuE,CAAA;AACzE,CAAC,EAPW,kBAAkB,kCAAlB,kBAAkB,QAO7B","sourcesContent":["import type {\n  AccountsControllerGetAccountByAddressAction,\n  AccountsControllerGetSelectedMultichainAccountAction,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  BridgeBackgroundAction,\n  BridgeControllerAction,\n  ChainId,\n  Quote,\n  QuoteMetadata,\n  QuoteResponse,\n  TxData,\n} from '@metamask/bridge-controller';\nimport type { GetGasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  TransactionControllerGetStateAction,\n  TransactionControllerTransactionConfirmedEvent,\n  TransactionControllerTransactionFailedEvent,\n  TransactionMeta,\n} from '@metamask/transaction-controller';\n\nimport type { BridgeStatusController } from './bridge-status-controller';\nimport type { BRIDGE_STATUS_CONTROLLER_NAME } from './constants';\nimport type { StatusResponseSchema } from './utils/validators';\n\n// All fields need to be types not interfaces, same with their children fields\n// o/w you get a type error\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * These fields are specific to Solana transactions and can likely be infered from TransactionMeta\n *\n * @deprecated these should be removed eventually\n */\nexport type SolanaTransactionMeta = {\n  isSolana: boolean;\n  isBridgeTx: boolean;\n};\n\nexport type StatusRequest = {\n  bridgeId: string; // lifi, socket, squid\n  srcTxHash?: string; // lifi, socket, squid, might be undefined for STX\n  bridge: string; // lifi, socket, squid\n  srcChainId: ChainId; // lifi, socket, squid\n  destChainId: ChainId; // lifi, socket, squid\n  quote?: Quote; // squid\n  refuel?: boolean; // lifi\n};\n\nexport type StatusRequestDto = Omit<\n  StatusRequest,\n  'quote' | 'srcChainId' | 'destChainId' | 'refuel'\n> & {\n  srcChainId: string; // lifi, socket, squid\n  destChainId: string; // lifi, socket, squid\n  requestId?: string;\n  refuel?: string; // lifi\n};\n\nexport type StatusRequestWithSrcTxHash = StatusRequest & {\n  srcTxHash: string;\n};\n\nexport enum BridgeId {\n  HOP = 'hop',\n  CELER = 'celer',\n  CELERCIRCLE = 'celercircle',\n  CONNEXT = 'connext',\n  POLYGON = 'polygon',\n  AVALANCHE = 'avalanche',\n  MULTICHAIN = 'multichain',\n  AXELAR = 'axelar',\n  ACROSS = 'across',\n  STARGATE = 'stargate',\n  RELAY = 'relay',\n  MAYAN = 'mayan',\n}\n\nexport type StatusResponse = Infer<typeof StatusResponseSchema>;\n\nexport type RefuelStatusResponse = object & StatusResponse;\n\nexport type BridgeHistoryItem = {\n  txMetaId: string; // Need this to handle STX that might not have a txHash immediately\n  batchId?: string;\n  quote: Quote;\n  status: StatusResponse;\n  startTime?: number; // timestamp in ms\n  estimatedProcessingTimeInSeconds: number;\n  slippagePercentage: number;\n  completionTime?: number; // timestamp in ms\n  pricingData?: {\n    /**\n     * The actual amount sent by user in non-atomic decimal form\n     */\n    amountSent: QuoteMetadata['sentAmount']['amount'];\n    amountSentInUsd?: QuoteMetadata['sentAmount']['usd'];\n    quotedGasInUsd?:\n      | QuoteMetadata['gasFee']['effective']['usd']\n      | QuoteMetadata['gasFee']['total']['usd'];\n    quotedReturnInUsd?: QuoteMetadata['toTokenAmount']['usd'];\n    quotedRefuelSrcAmountInUsd?: string;\n    quotedRefuelDestAmountInUsd?: string;\n  };\n  initialDestAssetBalance?: string;\n  targetContractAddress?: string;\n  account: string;\n  hasApprovalTx: boolean;\n  approvalTxId?: string;\n  isStxEnabled?: boolean;\n  /**\n   * Attempts tracking for exponential backoff on failed fetches.\n   * We track the number of attempts and the last attempt time for each txMetaId that has failed at least once\n   */\n  attempts?: {\n    counter: number;\n    lastAttemptTime: number; // timestamp in ms\n  };\n};\n\nexport enum BridgeStatusAction {\n  START_POLLING_FOR_BRIDGE_TX_STATUS = 'startPollingForBridgeTxStatus',\n  WIPE_BRIDGE_STATUS = 'wipeBridgeStatus',\n  GET_STATE = 'getState',\n  RESET_STATE = 'resetState',\n  SUBMIT_TX = 'submitTx',\n  RESTART_POLLING_FOR_FAILED_ATTEMPTS = 'restartPollingForFailedAttempts',\n}\n\nexport type TokenAmountValuesSerialized = {\n  amount: string;\n  valueInCurrency: string | null;\n  usd: string | null;\n};\n\nexport type QuoteMetadataSerialized = {\n  gasFee: TokenAmountValuesSerialized;\n  /**\n   * The total network fee for the bridge transaction\n   * estimatedGasFees + relayerFees\n   */\n  totalNetworkFee: TokenAmountValuesSerialized;\n  /**\n   * The total max network fee for the bridge transaction\n   * maxGasFees + relayerFees\n   */\n  totalMaxNetworkFee: TokenAmountValuesSerialized;\n  toTokenAmount: TokenAmountValuesSerialized;\n  /**\n   * The adjusted return for the bridge transaction\n   * destTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValuesSerialized, 'amount'>;\n  /**\n   * The actual amount sent by user in non-atomic decimal form\n   * srcTokenAmount + metabridgeFee\n   */\n  sentAmount: TokenAmountValuesSerialized;\n  swapRate: string; // destTokenAmount / sentAmount\n  /**\n   * The cost of the bridge transaction\n   * sentAmount - adjustedReturn\n   */\n  cost: Omit<TokenAmountValuesSerialized, 'amount'>;\n};\n\nexport type StartPollingForBridgeTxStatusArgs = {\n  bridgeTxMeta: TransactionMeta;\n  statusRequest: StatusRequest;\n  quoteResponse: QuoteResponse & QuoteMetadata;\n  startTime?: BridgeHistoryItem['startTime'];\n  slippagePercentage: BridgeHistoryItem['slippagePercentage'];\n  initialDestAssetBalance?: BridgeHistoryItem['initialDestAssetBalance'];\n  targetContractAddress?: BridgeHistoryItem['targetContractAddress'];\n  approvalTxId?: BridgeHistoryItem['approvalTxId'];\n  isStxEnabled?: BridgeHistoryItem['isStxEnabled'];\n};\n\n/**\n * Chrome: The BigNumber values are automatically serialized to strings when sent to the background\n * Firefox: The BigNumber values are not serialized to strings when sent to the background,\n * so we force the ui to do it manually, by using StartPollingForBridgeTxStatusArgsSerialized type on the startPollingForBridgeTxStatus action\n */\nexport type StartPollingForBridgeTxStatusArgsSerialized = Omit<\n  StartPollingForBridgeTxStatusArgs,\n  'quoteResponse'\n> & {\n  quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata;\n};\n\nexport type SourceChainTxMetaId = string;\n\nexport type BridgeStatusControllerState = {\n  txHistory: Record<SourceChainTxMetaId, BridgeHistoryItem>;\n};\n\n// Actions\ntype BridgeStatusControllerAction<\n  FunctionName extends keyof BridgeStatusController,\n> = {\n  type: `${typeof BRIDGE_STATUS_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeStatusController[FunctionName];\n};\n\nexport type BridgeStatusControllerGetStateAction = ControllerGetStateAction<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\n// Maps to BridgeController function names\nexport type BridgeStatusControllerStartPollingForBridgeTxStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS>;\n\nexport type BridgeStatusControllerWipeBridgeStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.WIPE_BRIDGE_STATUS>;\n\nexport type BridgeStatusControllerResetStateAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESET_STATE>;\n\nexport type BridgeStatusControllerSubmitTxAction =\n  BridgeStatusControllerAction<BridgeStatusAction.SUBMIT_TX>;\n\nexport type BridgeStatusControllerRestartPollingForFailedAttemptsAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESTART_POLLING_FOR_FAILED_ATTEMPTS>;\n\nexport type BridgeStatusControllerActions =\n  | BridgeStatusControllerStartPollingForBridgeTxStatusAction\n  | BridgeStatusControllerWipeBridgeStatusAction\n  | BridgeStatusControllerResetStateAction\n  | BridgeStatusControllerGetStateAction\n  | BridgeStatusControllerSubmitTxAction\n  | BridgeStatusControllerRestartPollingForFailedAttemptsAction;\n\n// Events\nexport type BridgeStatusControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\nexport type BridgeStatusControllerEvents =\n  BridgeStatusControllerStateChangeEvent;\n\n/**\n * The external actions available to the BridgeStatusController.\n */\ntype AllowedActions =\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | HandleSnapRequest\n  | TransactionControllerGetStateAction\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | GetGasFeeState\n  | AccountsControllerGetAccountByAddressAction\n  | RemoteFeatureFlagControllerGetStateAction;\n\n/**\n * The external events available to the BridgeStatusController.\n */\ntype AllowedEvents =\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionConfirmedEvent;\n\n/**\n * The messenger for the BridgeStatusController.\n */\nexport type BridgeStatusControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerActions | AllowedActions,\n  BridgeStatusControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
diff --git a/dist/types.d.cts b/dist/types.d.cts
index 1d73ea7a2d381ad9a2e0d8e6fe01606e626ecfa9..6e82d5c59bad585dc982d5b5131289c8a90289cd 100644
--- a/dist/types.d.cts
+++ b/dist/types.d.cts
@@ -73,7 +73,7 @@ export type BridgeHistoryItem = {
          */
         amountSent: QuoteMetadata['sentAmount']['amount'];
         amountSentInUsd?: QuoteMetadata['sentAmount']['usd'];
-        quotedGasInUsd?: QuoteMetadata['gasFee']['usd'];
+        quotedGasInUsd?: QuoteMetadata['gasFee']['effective']['usd'] | QuoteMetadata['gasFee']['total']['usd'];
         quotedReturnInUsd?: QuoteMetadata['toTokenAmount']['usd'];
         quotedRefuelSrcAmountInUsd?: string;
         quotedRefuelDestAmountInUsd?: string;
diff --git a/dist/types.d.cts.map b/dist/types.d.cts.map
index c99654c1421f24f26c0257a1769b84514ccdc224..8f210e9aba18ac1cd68912088043474d9feacffe 100644
--- a/dist/types.d.cts.map
+++ b/dist/types.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,2CAA2C,EAC3C,oDAAoD,EACrD,sCAAsC;AACvC,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,mBAAmB,EACpB,kCAAkC;AACnC,OAAO,KAAK,EACV,sBAAsB,EACtB,sBAAsB,EACtB,OAAO,EACP,KAAK,EACL,aAAa,EACb,aAAa,EACb,MAAM,EACP,oCAAoC;AACrC,OAAO,KAAK,EAAE,cAAc,EAAE,qCAAqC;AACnE,OAAO,KAAK,EACV,mDAAmD,EACnD,2CAA2C,EAC3C,+BAA+B,EAChC,qCAAqC;AACtC,OAAO,KAAK,EAAE,yCAAyC,EAAE,iDAAiD;AAC1G,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AACrE,OAAO,KAAK,EAAE,KAAK,EAAE,8BAA8B;AACnD,OAAO,KAAK,EACV,mCAAmC,EACnC,8CAA8C,EAC9C,2CAA2C,EAC3C,eAAe,EAChB,yCAAyC;AAE1C,OAAO,KAAK,EAAE,sBAAsB,EAAE,uCAAmC;AACzE,OAAO,KAAK,EAAE,6BAA6B,EAAE,wBAAoB;AACjE,OAAO,KAAK,EAAE,oBAAoB,EAAE,+BAA2B;AAK/D,oBAAY,cAAc;IACxB,SAAS,cAAc;IACvB,MAAM,WAAW;CAClB;AAED,MAAM,MAAM,aAAa,GAAG,CAC1B,KAAK,EAAE,WAAW,GAAG,GAAG,EACxB,IAAI,CAAC,EAAE,WAAW,KAEf,OAAO,CAAC,GAAG,CAAC,CAAC;AAElB;;;;GAIG;AACH,MAAM,MAAM,qBAAqB,GAAG;IAClC,QAAQ,EAAE,OAAO,CAAC;IAClB,UAAU,EAAE,OAAO,CAAC;CACrB,CAAC;AAEF,MAAM,MAAM,aAAa,GAAG;IAC1B,QAAQ,EAAE,MAAM,CAAC;IACjB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,OAAO,CAAC;IACpB,WAAW,EAAE,OAAO,CAAC;IACrB,KAAK,CAAC,EAAE,KAAK,CAAC;IACd,MAAM,CAAC,EAAE,OAAO,CAAC;CAClB,CAAC;AAEF,MAAM,MAAM,gBAAgB,GAAG,IAAI,CACjC,aAAa,EACb,OAAO,GAAG,YAAY,GAAG,aAAa,GAAG,QAAQ,CAClD,GAAG;IACF,UAAU,EAAE,MAAM,CAAC;IACnB,WAAW,EAAE,MAAM,CAAC;IACpB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF,MAAM,MAAM,0BAA0B,GAAG,aAAa,GAAG;IACvD,SAAS,EAAE,MAAM,CAAC;CACnB,CAAC;AAEF,oBAAY,QAAQ;IAClB,GAAG,QAAQ;IACX,KAAK,UAAU;IACf,WAAW,gBAAgB;IAC3B,OAAO,YAAY;IACnB,OAAO,YAAY;IACnB,SAAS,cAAc;IACvB,UAAU,eAAe;IACzB,MAAM,WAAW;IACjB,MAAM,WAAW;IACjB,QAAQ,aAAa;IACrB,KAAK,UAAU;IACf,KAAK,UAAU;CAChB;AAED,MAAM,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,oBAAoB,CAAC,CAAC;AAEhE,MAAM,MAAM,oBAAoB,GAAG,MAAM,GAAG,cAAc,CAAC;AAE3D,MAAM,MAAM,iBAAiB,GAAG;IAC9B,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,EAAE,KAAK,CAAC;IACb,MAAM,EAAE,cAAc,CAAC;IACvB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,gCAAgC,EAAE,MAAM,CAAC;IACzC,kBAAkB,EAAE,MAAM,CAAC;IAC3B,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB,WAAW,CAAC,EAAE;QACZ;;WAEG;QACH,UAAU,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC;QAClD,eAAe,CAAC,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;QACrD,cAAc,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;QAChD,iBAAiB,CAAC,EAAE,aAAa,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1D,0BAA0B,CAAC,EAAE,MAAM,CAAC;QACpC,2BAA2B,CAAC,EAAE,MAAM,CAAC;KACtC,CAAC;IACF,uBAAuB,CAAC,EAAE,MAAM,CAAC;IACjC,qBAAqB,CAAC,EAAE,MAAM,CAAC;IAC/B,OAAO,EAAE,MAAM,CAAC;IAChB,aAAa,EAAE,OAAO,CAAC;IACvB,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB;;;OAGG;IACH,QAAQ,CAAC,EAAE;QACT,OAAO,EAAE,MAAM,CAAC;QAChB,eAAe,EAAE,MAAM,CAAC;KACzB,CAAC;CACH,CAAC;AAEF,oBAAY,kBAAkB;IAC5B,kCAAkC,kCAAkC;IACpE,kBAAkB,qBAAqB;IACvC,SAAS,aAAa;IACtB,WAAW,eAAe;IAC1B,SAAS,aAAa;IACtB,mCAAmC,oCAAoC;CACxE;AAED,MAAM,MAAM,2BAA2B,GAAG;IACxC,MAAM,EAAE,MAAM,CAAC;IACf,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC;IAC/B,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC;CACpB,CAAC;AAEF,MAAM,MAAM,uBAAuB,GAAG;IACpC,MAAM,EAAE,2BAA2B,CAAC;IACpC;;;OAGG;IACH,eAAe,EAAE,2BAA2B,CAAC;IAC7C;;;OAGG;IACH,kBAAkB,EAAE,2BAA2B,CAAC;IAChD,aAAa,EAAE,2BAA2B,CAAC;IAC3C;;;OAGG;IACH,cAAc,EAAE,IAAI,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;IAC5D;;;OAGG;IACH,UAAU,EAAE,2BAA2B,CAAC;IACxC,QAAQ,EAAE,MAAM,CAAC;IACjB;;;OAGG;IACH,IAAI,EAAE,IAAI,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;CACnD,CAAC;AAEF,MAAM,MAAM,iCAAiC,GAAG;IAC9C,YAAY,EAAE,eAAe,CAAC;IAC9B,aAAa,EAAE,aAAa,CAAC;IAC7B,aAAa,EAAE,aAAa,GAAG,aAAa,CAAC;IAC7C,SAAS,CAAC,EAAE,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAC3C,kBAAkB,EAAE,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;IAC5D,uBAAuB,CAAC,EAAE,iBAAiB,CAAC,yBAAyB,CAAC,CAAC;IACvE,qBAAqB,CAAC,EAAE,iBAAiB,CAAC,uBAAuB,CAAC,CAAC;IACnE,YAAY,CAAC,EAAE,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACjD,YAAY,CAAC,EAAE,iBAAiB,CAAC,cAAc,CAAC,CAAC;CAClD,CAAC;AAEF;;;;GAIG;AACH,MAAM,MAAM,2CAA2C,GAAG,IAAI,CAC5D,iCAAiC,EACjC,eAAe,CAChB,GAAG;IACF,aAAa,EAAE,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,aAAa,CAAC;CAC/D,CAAC;AAEF,MAAM,MAAM,mBAAmB,GAAG,MAAM,CAAC;AAEzC,MAAM,MAAM,2BAA2B,GAAG;IACxC,SAAS,EAAE,MAAM,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;CAC3D,CAAC;AAGF,KAAK,4BAA4B,CAC/B,YAAY,SAAS,MAAM,sBAAsB,IAC/C;IACF,IAAI,EAAE,GAAG,OAAO,6BAA6B,IAAI,YAAY,EAAE,CAAC;IAChE,OAAO,EAAE,sBAAsB,CAAC,YAAY,CAAC,CAAC;CAC/C,CAAC;AAEF,MAAM,MAAM,oCAAoC,GAAG,wBAAwB,CACzE,OAAO,6BAA6B,EACpC,2BAA2B,CAC5B,CAAC;AAGF,MAAM,MAAM,yDAAyD,GACnE,4BAA4B,CAAC,kBAAkB,CAAC,kCAAkC,CAAC,CAAC;AAEtF,MAAM,MAAM,4CAA4C,GACtD,4BAA4B,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;AAEtE,MAAM,MAAM,sCAAsC,GAChD,4BAA4B,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;AAE/D,MAAM,MAAM,oCAAoC,GAC9C,4BAA4B,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;AAE7D,MAAM,MAAM,2DAA2D,GACrE,4BAA4B,CAAC,kBAAkB,CAAC,mCAAmC,CAAC,CAAC;AAEvF,MAAM,MAAM,6BAA6B,GACrC,yDAAyD,GACzD,4CAA4C,GAC5C,sCAAsC,GACtC,oCAAoC,GACpC,oCAAoC,GACpC,2DAA2D,CAAC;AAGhE,MAAM,MAAM,sCAAsC,GAAG,0BAA0B,CAC7E,OAAO,6BAA6B,EACpC,2BAA2B,CAC5B,CAAC;AAEF,MAAM,MAAM,4BAA4B,GACtC,sCAAsC,CAAC;AAEzC;;GAEG;AACH,KAAK,cAAc,GACf,mDAAmD,GACnD,+BAA+B,GAC/B,2CAA2C,GAC3C,oDAAoD,GACpD,iBAAiB,GACjB,mCAAmC,GACnC,sBAAsB,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,GACzE,sBAAsB,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,GACtE,sBAAsB,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,GACtE,cAAc,GACd,2CAA2C,GAC3C,yCAAyC,CAAC;AAE9C;;GAEG;AACH,KAAK,aAAa,GACd,2CAA2C,GAC3C,8CAA8C,CAAC;AAEnD;;GAEG;AACH,MAAM,MAAM,+BAA+B,GAAG,mBAAmB,CAC/D,OAAO,6BAA6B,EACpC,6BAA6B,GAAG,cAAc,EAC9C,4BAA4B,GAAG,aAAa,EAC5C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.d.mts b/dist/types.d.mts
index 470416d8d48f76c2fc8b0430b99b87001ced93a4..a9547d397430487c65c0b04485b1d6b20574f92a 100644
--- a/dist/types.d.mts
+++ b/dist/types.d.mts
@@ -73,7 +73,7 @@ export type BridgeHistoryItem = {
          */
         amountSent: QuoteMetadata['sentAmount']['amount'];
         amountSentInUsd?: QuoteMetadata['sentAmount']['usd'];
-        quotedGasInUsd?: QuoteMetadata['gasFee']['usd'];
+        quotedGasInUsd?: QuoteMetadata['gasFee']['effective']['usd'] | QuoteMetadata['gasFee']['total']['usd'];
         quotedReturnInUsd?: QuoteMetadata['toTokenAmount']['usd'];
         quotedRefuelSrcAmountInUsd?: string;
         quotedRefuelDestAmountInUsd?: string;
diff --git a/dist/types.d.mts.map b/dist/types.d.mts.map
index c67b51b6b62d1a906631e85b2962a13a0363040d..7a4dcb99b448d7bcdb3fb246383896dec7c2d9d4 100644
--- a/dist/types.d.mts.map
+++ b/dist/types.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.mjs.map b/dist/types.mjs.map
index cf976d0911917989eb91438d9776c7eecc33ccfd..2113d0f968806cc3eb4c20e94a1793e2ed2ade97 100644
--- a/dist/types.mjs.map
+++ b/dist/types.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAsCA,8EAA8E;AAC9E,2BAA2B;AAE3B,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AA0CD,MAAM,CAAN,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,2BAAe,CAAA;IACf,uCAA2B,CAAA;IAC3B,+BAAmB,CAAA;IACnB,+BAAmB,CAAA;IACnB,mCAAuB,CAAA;IACvB,qCAAyB,CAAA;IACzB,6BAAiB,CAAA;IACjB,6BAAiB,CAAA;IACjB,iCAAqB,CAAA;IACrB,2BAAe,CAAA;IACf,2BAAe,CAAA;AACjB,CAAC,EAbW,QAAQ,KAAR,QAAQ,QAanB;AA0CD,MAAM,CAAN,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC5B,0FAAoE,CAAA;IACpE,6DAAuC,CAAA;IACvC,4CAAsB,CAAA;IACtB,gDAA0B,CAAA;IAC1B,4CAAsB,CAAA;IACtB,6FAAuE,CAAA;AACzE,CAAC,EAPW,kBAAkB,KAAlB,kBAAkB,QAO7B","sourcesContent":["import type {\n  AccountsControllerGetAccountByAddressAction,\n  AccountsControllerGetSelectedMultichainAccountAction,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  BridgeBackgroundAction,\n  BridgeControllerAction,\n  ChainId,\n  Quote,\n  QuoteMetadata,\n  QuoteResponse,\n  TxData,\n} from '@metamask/bridge-controller';\nimport type { GetGasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  TransactionControllerGetStateAction,\n  TransactionControllerTransactionConfirmedEvent,\n  TransactionControllerTransactionFailedEvent,\n  TransactionMeta,\n} from '@metamask/transaction-controller';\n\nimport type { BridgeStatusController } from './bridge-status-controller';\nimport type { BRIDGE_STATUS_CONTROLLER_NAME } from './constants';\nimport type { StatusResponseSchema } from './utils/validators';\n\n// All fields need to be types not interfaces, same with their children fields\n// o/w you get a type error\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * These fields are specific to Solana transactions and can likely be infered from TransactionMeta\n *\n * @deprecated these should be removed eventually\n */\nexport type SolanaTransactionMeta = {\n  isSolana: boolean;\n  isBridgeTx: boolean;\n};\n\nexport type StatusRequest = {\n  bridgeId: string; // lifi, socket, squid\n  srcTxHash?: string; // lifi, socket, squid, might be undefined for STX\n  bridge: string; // lifi, socket, squid\n  srcChainId: ChainId; // lifi, socket, squid\n  destChainId: ChainId; // lifi, socket, squid\n  quote?: Quote; // squid\n  refuel?: boolean; // lifi\n};\n\nexport type StatusRequestDto = Omit<\n  StatusRequest,\n  'quote' | 'srcChainId' | 'destChainId' | 'refuel'\n> & {\n  srcChainId: string; // lifi, socket, squid\n  destChainId: string; // lifi, socket, squid\n  requestId?: string;\n  refuel?: string; // lifi\n};\n\nexport type StatusRequestWithSrcTxHash = StatusRequest & {\n  srcTxHash: string;\n};\n\nexport enum BridgeId {\n  HOP = 'hop',\n  CELER = 'celer',\n  CELERCIRCLE = 'celercircle',\n  CONNEXT = 'connext',\n  POLYGON = 'polygon',\n  AVALANCHE = 'avalanche',\n  MULTICHAIN = 'multichain',\n  AXELAR = 'axelar',\n  ACROSS = 'across',\n  STARGATE = 'stargate',\n  RELAY = 'relay',\n  MAYAN = 'mayan',\n}\n\nexport type StatusResponse = Infer<typeof StatusResponseSchema>;\n\nexport type RefuelStatusResponse = object & StatusResponse;\n\nexport type BridgeHistoryItem = {\n  txMetaId: string; // Need this to handle STX that might not have a txHash immediately\n  batchId?: string;\n  quote: Quote;\n  status: StatusResponse;\n  startTime?: number; // timestamp in ms\n  estimatedProcessingTimeInSeconds: number;\n  slippagePercentage: number;\n  completionTime?: number; // timestamp in ms\n  pricingData?: {\n    /**\n     * The actual amount sent by user in non-atomic decimal form\n     */\n    amountSent: QuoteMetadata['sentAmount']['amount'];\n    amountSentInUsd?: QuoteMetadata['sentAmount']['usd'];\n    quotedGasInUsd?: QuoteMetadata['gasFee']['usd'];\n    quotedReturnInUsd?: QuoteMetadata['toTokenAmount']['usd'];\n    quotedRefuelSrcAmountInUsd?: string;\n    quotedRefuelDestAmountInUsd?: string;\n  };\n  initialDestAssetBalance?: string;\n  targetContractAddress?: string;\n  account: string;\n  hasApprovalTx: boolean;\n  approvalTxId?: string;\n  isStxEnabled?: boolean;\n  /**\n   * Attempts tracking for exponential backoff on failed fetches.\n   * We track the number of attempts and the last attempt time for each txMetaId that has failed at least once\n   */\n  attempts?: {\n    counter: number;\n    lastAttemptTime: number; // timestamp in ms\n  };\n};\n\nexport enum BridgeStatusAction {\n  START_POLLING_FOR_BRIDGE_TX_STATUS = 'startPollingForBridgeTxStatus',\n  WIPE_BRIDGE_STATUS = 'wipeBridgeStatus',\n  GET_STATE = 'getState',\n  RESET_STATE = 'resetState',\n  SUBMIT_TX = 'submitTx',\n  RESTART_POLLING_FOR_FAILED_ATTEMPTS = 'restartPollingForFailedAttempts',\n}\n\nexport type TokenAmountValuesSerialized = {\n  amount: string;\n  valueInCurrency: string | null;\n  usd: string | null;\n};\n\nexport type QuoteMetadataSerialized = {\n  gasFee: TokenAmountValuesSerialized;\n  /**\n   * The total network fee for the bridge transaction\n   * estimatedGasFees + relayerFees\n   */\n  totalNetworkFee: TokenAmountValuesSerialized;\n  /**\n   * The total max network fee for the bridge transaction\n   * maxGasFees + relayerFees\n   */\n  totalMaxNetworkFee: TokenAmountValuesSerialized;\n  toTokenAmount: TokenAmountValuesSerialized;\n  /**\n   * The adjusted return for the bridge transaction\n   * destTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValuesSerialized, 'amount'>;\n  /**\n   * The actual amount sent by user in non-atomic decimal form\n   * srcTokenAmount + metabridgeFee\n   */\n  sentAmount: TokenAmountValuesSerialized;\n  swapRate: string; // destTokenAmount / sentAmount\n  /**\n   * The cost of the bridge transaction\n   * sentAmount - adjustedReturn\n   */\n  cost: Omit<TokenAmountValuesSerialized, 'amount'>;\n};\n\nexport type StartPollingForBridgeTxStatusArgs = {\n  bridgeTxMeta: TransactionMeta;\n  statusRequest: StatusRequest;\n  quoteResponse: QuoteResponse & QuoteMetadata;\n  startTime?: BridgeHistoryItem['startTime'];\n  slippagePercentage: BridgeHistoryItem['slippagePercentage'];\n  initialDestAssetBalance?: BridgeHistoryItem['initialDestAssetBalance'];\n  targetContractAddress?: BridgeHistoryItem['targetContractAddress'];\n  approvalTxId?: BridgeHistoryItem['approvalTxId'];\n  isStxEnabled?: BridgeHistoryItem['isStxEnabled'];\n};\n\n/**\n * Chrome: The BigNumber values are automatically serialized to strings when sent to the background\n * Firefox: The BigNumber values are not serialized to strings when sent to the background,\n * so we force the ui to do it manually, by using StartPollingForBridgeTxStatusArgsSerialized type on the startPollingForBridgeTxStatus action\n */\nexport type StartPollingForBridgeTxStatusArgsSerialized = Omit<\n  StartPollingForBridgeTxStatusArgs,\n  'quoteResponse'\n> & {\n  quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata;\n};\n\nexport type SourceChainTxMetaId = string;\n\nexport type BridgeStatusControllerState = {\n  txHistory: Record<SourceChainTxMetaId, BridgeHistoryItem>;\n};\n\n// Actions\ntype BridgeStatusControllerAction<\n  FunctionName extends keyof BridgeStatusController,\n> = {\n  type: `${typeof BRIDGE_STATUS_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeStatusController[FunctionName];\n};\n\nexport type BridgeStatusControllerGetStateAction = ControllerGetStateAction<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\n// Maps to BridgeController function names\nexport type BridgeStatusControllerStartPollingForBridgeTxStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS>;\n\nexport type BridgeStatusControllerWipeBridgeStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.WIPE_BRIDGE_STATUS>;\n\nexport type BridgeStatusControllerResetStateAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESET_STATE>;\n\nexport type BridgeStatusControllerSubmitTxAction =\n  BridgeStatusControllerAction<BridgeStatusAction.SUBMIT_TX>;\n\nexport type BridgeStatusControllerRestartPollingForFailedAttemptsAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESTART_POLLING_FOR_FAILED_ATTEMPTS>;\n\nexport type BridgeStatusControllerActions =\n  | BridgeStatusControllerStartPollingForBridgeTxStatusAction\n  | BridgeStatusControllerWipeBridgeStatusAction\n  | BridgeStatusControllerResetStateAction\n  | BridgeStatusControllerGetStateAction\n  | BridgeStatusControllerSubmitTxAction\n  | BridgeStatusControllerRestartPollingForFailedAttemptsAction;\n\n// Events\nexport type BridgeStatusControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\nexport type BridgeStatusControllerEvents =\n  BridgeStatusControllerStateChangeEvent;\n\n/**\n * The external actions available to the BridgeStatusController.\n */\ntype AllowedActions =\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | HandleSnapRequest\n  | TransactionControllerGetStateAction\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | GetGasFeeState\n  | AccountsControllerGetAccountByAddressAction\n  | RemoteFeatureFlagControllerGetStateAction;\n\n/**\n * The external events available to the BridgeStatusController.\n */\ntype AllowedEvents =\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionConfirmedEvent;\n\n/**\n * The messenger for the BridgeStatusController.\n */\nexport type BridgeStatusControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerActions | AllowedActions,\n  BridgeStatusControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
+{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAsCA,8EAA8E;AAC9E,2BAA2B;AAE3B,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AA0CD,MAAM,CAAN,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,2BAAe,CAAA;IACf,uCAA2B,CAAA;IAC3B,+BAAmB,CAAA;IACnB,+BAAmB,CAAA;IACnB,mCAAuB,CAAA;IACvB,qCAAyB,CAAA;IACzB,6BAAiB,CAAA;IACjB,6BAAiB,CAAA;IACjB,iCAAqB,CAAA;IACrB,2BAAe,CAAA;IACf,2BAAe,CAAA;AACjB,CAAC,EAbW,QAAQ,KAAR,QAAQ,QAanB;AA4CD,MAAM,CAAN,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC5B,0FAAoE,CAAA;IACpE,6DAAuC,CAAA;IACvC,4CAAsB,CAAA;IACtB,gDAA0B,CAAA;IAC1B,4CAAsB,CAAA;IACtB,6FAAuE,CAAA;AACzE,CAAC,EAPW,kBAAkB,KAAlB,kBAAkB,QAO7B","sourcesContent":["import type {\n  AccountsControllerGetAccountByAddressAction,\n  AccountsControllerGetSelectedMultichainAccountAction,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport type {\n  BridgeBackgroundAction,\n  BridgeControllerAction,\n  ChainId,\n  Quote,\n  QuoteMetadata,\n  QuoteResponse,\n  TxData,\n} from '@metamask/bridge-controller';\nimport type { GetGasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n} from '@metamask/network-controller';\nimport type { RemoteFeatureFlagControllerGetStateAction } from '@metamask/remote-feature-flag-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { Infer } from '@metamask/superstruct';\nimport type {\n  TransactionControllerGetStateAction,\n  TransactionControllerTransactionConfirmedEvent,\n  TransactionControllerTransactionFailedEvent,\n  TransactionMeta,\n} from '@metamask/transaction-controller';\n\nimport type { BridgeStatusController } from './bridge-status-controller';\nimport type { BRIDGE_STATUS_CONTROLLER_NAME } from './constants';\nimport type { StatusResponseSchema } from './utils/validators';\n\n// All fields need to be types not interfaces, same with their children fields\n// o/w you get a type error\n\nexport enum BridgeClientId {\n  EXTENSION = 'extension',\n  MOBILE = 'mobile',\n}\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * These fields are specific to Solana transactions and can likely be infered from TransactionMeta\n *\n * @deprecated these should be removed eventually\n */\nexport type SolanaTransactionMeta = {\n  isSolana: boolean;\n  isBridgeTx: boolean;\n};\n\nexport type StatusRequest = {\n  bridgeId: string; // lifi, socket, squid\n  srcTxHash?: string; // lifi, socket, squid, might be undefined for STX\n  bridge: string; // lifi, socket, squid\n  srcChainId: ChainId; // lifi, socket, squid\n  destChainId: ChainId; // lifi, socket, squid\n  quote?: Quote; // squid\n  refuel?: boolean; // lifi\n};\n\nexport type StatusRequestDto = Omit<\n  StatusRequest,\n  'quote' | 'srcChainId' | 'destChainId' | 'refuel'\n> & {\n  srcChainId: string; // lifi, socket, squid\n  destChainId: string; // lifi, socket, squid\n  requestId?: string;\n  refuel?: string; // lifi\n};\n\nexport type StatusRequestWithSrcTxHash = StatusRequest & {\n  srcTxHash: string;\n};\n\nexport enum BridgeId {\n  HOP = 'hop',\n  CELER = 'celer',\n  CELERCIRCLE = 'celercircle',\n  CONNEXT = 'connext',\n  POLYGON = 'polygon',\n  AVALANCHE = 'avalanche',\n  MULTICHAIN = 'multichain',\n  AXELAR = 'axelar',\n  ACROSS = 'across',\n  STARGATE = 'stargate',\n  RELAY = 'relay',\n  MAYAN = 'mayan',\n}\n\nexport type StatusResponse = Infer<typeof StatusResponseSchema>;\n\nexport type RefuelStatusResponse = object & StatusResponse;\n\nexport type BridgeHistoryItem = {\n  txMetaId: string; // Need this to handle STX that might not have a txHash immediately\n  batchId?: string;\n  quote: Quote;\n  status: StatusResponse;\n  startTime?: number; // timestamp in ms\n  estimatedProcessingTimeInSeconds: number;\n  slippagePercentage: number;\n  completionTime?: number; // timestamp in ms\n  pricingData?: {\n    /**\n     * The actual amount sent by user in non-atomic decimal form\n     */\n    amountSent: QuoteMetadata['sentAmount']['amount'];\n    amountSentInUsd?: QuoteMetadata['sentAmount']['usd'];\n    quotedGasInUsd?:\n      | QuoteMetadata['gasFee']['effective']['usd']\n      | QuoteMetadata['gasFee']['total']['usd'];\n    quotedReturnInUsd?: QuoteMetadata['toTokenAmount']['usd'];\n    quotedRefuelSrcAmountInUsd?: string;\n    quotedRefuelDestAmountInUsd?: string;\n  };\n  initialDestAssetBalance?: string;\n  targetContractAddress?: string;\n  account: string;\n  hasApprovalTx: boolean;\n  approvalTxId?: string;\n  isStxEnabled?: boolean;\n  /**\n   * Attempts tracking for exponential backoff on failed fetches.\n   * We track the number of attempts and the last attempt time for each txMetaId that has failed at least once\n   */\n  attempts?: {\n    counter: number;\n    lastAttemptTime: number; // timestamp in ms\n  };\n};\n\nexport enum BridgeStatusAction {\n  START_POLLING_FOR_BRIDGE_TX_STATUS = 'startPollingForBridgeTxStatus',\n  WIPE_BRIDGE_STATUS = 'wipeBridgeStatus',\n  GET_STATE = 'getState',\n  RESET_STATE = 'resetState',\n  SUBMIT_TX = 'submitTx',\n  RESTART_POLLING_FOR_FAILED_ATTEMPTS = 'restartPollingForFailedAttempts',\n}\n\nexport type TokenAmountValuesSerialized = {\n  amount: string;\n  valueInCurrency: string | null;\n  usd: string | null;\n};\n\nexport type QuoteMetadataSerialized = {\n  gasFee: TokenAmountValuesSerialized;\n  /**\n   * The total network fee for the bridge transaction\n   * estimatedGasFees + relayerFees\n   */\n  totalNetworkFee: TokenAmountValuesSerialized;\n  /**\n   * The total max network fee for the bridge transaction\n   * maxGasFees + relayerFees\n   */\n  totalMaxNetworkFee: TokenAmountValuesSerialized;\n  toTokenAmount: TokenAmountValuesSerialized;\n  /**\n   * The adjusted return for the bridge transaction\n   * destTokenAmount - totalNetworkFee\n   */\n  adjustedReturn: Omit<TokenAmountValuesSerialized, 'amount'>;\n  /**\n   * The actual amount sent by user in non-atomic decimal form\n   * srcTokenAmount + metabridgeFee\n   */\n  sentAmount: TokenAmountValuesSerialized;\n  swapRate: string; // destTokenAmount / sentAmount\n  /**\n   * The cost of the bridge transaction\n   * sentAmount - adjustedReturn\n   */\n  cost: Omit<TokenAmountValuesSerialized, 'amount'>;\n};\n\nexport type StartPollingForBridgeTxStatusArgs = {\n  bridgeTxMeta: TransactionMeta;\n  statusRequest: StatusRequest;\n  quoteResponse: QuoteResponse & QuoteMetadata;\n  startTime?: BridgeHistoryItem['startTime'];\n  slippagePercentage: BridgeHistoryItem['slippagePercentage'];\n  initialDestAssetBalance?: BridgeHistoryItem['initialDestAssetBalance'];\n  targetContractAddress?: BridgeHistoryItem['targetContractAddress'];\n  approvalTxId?: BridgeHistoryItem['approvalTxId'];\n  isStxEnabled?: BridgeHistoryItem['isStxEnabled'];\n};\n\n/**\n * Chrome: The BigNumber values are automatically serialized to strings when sent to the background\n * Firefox: The BigNumber values are not serialized to strings when sent to the background,\n * so we force the ui to do it manually, by using StartPollingForBridgeTxStatusArgsSerialized type on the startPollingForBridgeTxStatus action\n */\nexport type StartPollingForBridgeTxStatusArgsSerialized = Omit<\n  StartPollingForBridgeTxStatusArgs,\n  'quoteResponse'\n> & {\n  quoteResponse: QuoteResponse<string | TxData> & QuoteMetadata;\n};\n\nexport type SourceChainTxMetaId = string;\n\nexport type BridgeStatusControllerState = {\n  txHistory: Record<SourceChainTxMetaId, BridgeHistoryItem>;\n};\n\n// Actions\ntype BridgeStatusControllerAction<\n  FunctionName extends keyof BridgeStatusController,\n> = {\n  type: `${typeof BRIDGE_STATUS_CONTROLLER_NAME}:${FunctionName}`;\n  handler: BridgeStatusController[FunctionName];\n};\n\nexport type BridgeStatusControllerGetStateAction = ControllerGetStateAction<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\n// Maps to BridgeController function names\nexport type BridgeStatusControllerStartPollingForBridgeTxStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS>;\n\nexport type BridgeStatusControllerWipeBridgeStatusAction =\n  BridgeStatusControllerAction<BridgeStatusAction.WIPE_BRIDGE_STATUS>;\n\nexport type BridgeStatusControllerResetStateAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESET_STATE>;\n\nexport type BridgeStatusControllerSubmitTxAction =\n  BridgeStatusControllerAction<BridgeStatusAction.SUBMIT_TX>;\n\nexport type BridgeStatusControllerRestartPollingForFailedAttemptsAction =\n  BridgeStatusControllerAction<BridgeStatusAction.RESTART_POLLING_FOR_FAILED_ATTEMPTS>;\n\nexport type BridgeStatusControllerActions =\n  | BridgeStatusControllerStartPollingForBridgeTxStatusAction\n  | BridgeStatusControllerWipeBridgeStatusAction\n  | BridgeStatusControllerResetStateAction\n  | BridgeStatusControllerGetStateAction\n  | BridgeStatusControllerSubmitTxAction\n  | BridgeStatusControllerRestartPollingForFailedAttemptsAction;\n\n// Events\nexport type BridgeStatusControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerState\n>;\n\nexport type BridgeStatusControllerEvents =\n  BridgeStatusControllerStateChangeEvent;\n\n/**\n * The external actions available to the BridgeStatusController.\n */\ntype AllowedActions =\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | AccountsControllerGetSelectedMultichainAccountAction\n  | HandleSnapRequest\n  | TransactionControllerGetStateAction\n  | BridgeControllerAction<BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE>\n  | BridgeControllerAction<BridgeBackgroundAction.TRACK_METAMETRICS_EVENT>\n  | BridgeControllerAction<BridgeBackgroundAction.STOP_POLLING_FOR_QUOTES>\n  | GetGasFeeState\n  | AccountsControllerGetAccountByAddressAction\n  | RemoteFeatureFlagControllerGetStateAction;\n\n/**\n * The external events available to the BridgeStatusController.\n */\ntype AllowedEvents =\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionConfirmedEvent;\n\n/**\n * The messenger for the BridgeStatusController.\n */\nexport type BridgeStatusControllerMessenger = RestrictedMessenger<\n  typeof BRIDGE_STATUS_CONTROLLER_NAME,\n  BridgeStatusControllerActions | AllowedActions,\n  BridgeStatusControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n"]}
\ No newline at end of file
diff --git a/dist/utils/metrics.cjs b/dist/utils/metrics.cjs
index fff6a18f5f4e015053cc64241d0f00e8d6d546ba..e74841ce848a3319427d3419aae7a2368439756a 100644
--- a/dist/utils/metrics.cjs
+++ b/dist/utils/metrics.cjs
@@ -55,7 +55,7 @@ const getRequestParamFromHistory = (historyItem) => {
 exports.getRequestParamFromHistory = getRequestParamFromHistory;
 const getTradeDataFromQuote = (quoteResponse) => {
     return {
-        usd_quoted_gas: Number(quoteResponse.gasFee?.usd ?? 0),
+        usd_quoted_gas: Number(quoteResponse.gasFee?.effective?.usd ?? 0),
         gas_included: quoteResponse.quote.gasIncluded ?? false,
         provider: (0, bridge_controller_1.formatProviderLabel)(quoteResponse.quote),
         quoted_time_minutes: Number(quoteResponse.estimatedProcessingTimeInSeconds / 60),
diff --git a/dist/utils/metrics.cjs.map b/dist/utils/metrics.cjs.map
index c17fe0a50cadf00dfd9c76da875ab1704b445832..7bd4e775798005893ab7e601a7da55241734f2c2 100644
--- a/dist/utils/metrics.cjs.map
+++ b/dist/utils/metrics.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"metrics.cjs","sourceRoot":"","sources":["../../src/utils/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountsControllerState } from '@metamask/accounts-controller';\nimport type {\n  QuoteResponse,\n  TxData,\n  QuoteMetadata,\n} from '@metamask/bridge-controller';\nimport {\n  type TxStatusData,\n  StatusTypes,\n  formatChainIdToHex,\n  isEthUsdt,\n  type RequestParams,\n  formatChainIdToCaip,\n  type TradeData,\n  formatProviderLabel,\n  type RequestMetadata,\n  isCustomSlippage,\n  getSwapType,\n  isHardwareWallet,\n  formatAddressToAssetId,\n  MetricsActionType,\n  MetricsSwapType,\n} from '@metamask/bridge-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport type { BridgeHistoryItem } from 'src/types';\n\nimport type { QuoteFetchData } from '../../../bridge-controller/src/utils/metrics/types';\n\nexport const getTxStatusesFromHistory = ({\n  status,\n  hasApprovalTx,\n  approvalTxId,\n  quote,\n}: BridgeHistoryItem): TxStatusData => {\n  const source_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n  const destination_transaction = status.destChain?.txHash\n    ? status.status\n    : StatusTypes.PENDING;\n\n  const hexChainId = formatChainIdToHex(quote.srcChainId);\n  const isEthUsdtTx = isEthUsdt(hexChainId, quote.srcAsset.address);\n  const allowance_reset_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : undefined;\n  const approval_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n\n  return {\n    allowance_reset_transaction: isEthUsdtTx\n      ? allowance_reset_transaction\n      : undefined,\n    approval_transaction:\n      hasApprovalTx || approvalTxId ? approval_transaction : undefined,\n    source_transaction,\n    destination_transaction:\n      status.status === StatusTypes.FAILED\n        ? StatusTypes.FAILED\n        : destination_transaction,\n  };\n};\n\nexport const getFinalizedTxProperties = (historyItem: BridgeHistoryItem) => {\n  return {\n    actual_time_minutes:\n      historyItem.completionTime && historyItem.startTime\n        ? (historyItem.completionTime - historyItem.startTime) / 60000\n        : 0,\n    usd_actual_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0), // TODO calculate based on USD price at completion time\n    usd_actual_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0), // TODO calculate based on USD price at completion time\n    quote_vs_execution_ratio: 1, // TODO calculate based on USD price at completion time\n    quoted_vs_used_gas_ratio: 1, // TODO calculate based on USD price at completion time\n  };\n};\n\nexport const getRequestParamFromHistory = (\n  historyItem: BridgeHistoryItem,\n): RequestParams => {\n  return {\n    chain_id_source: formatChainIdToCaip(historyItem.quote.srcChainId),\n    token_symbol_source: historyItem.quote.srcAsset.symbol,\n    token_address_source: historyItem.quote.srcAsset.assetId,\n    chain_id_destination: formatChainIdToCaip(historyItem.quote.destChainId),\n    token_symbol_destination: historyItem.quote.destAsset.symbol,\n    token_address_destination: historyItem.quote.destAsset.assetId,\n  };\n};\n\nexport const getTradeDataFromQuote = (\n  quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(quoteResponse.gasFee?.usd ?? 0),\n    gas_included: quoteResponse.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(quoteResponse.quote),\n    quoted_time_minutes: Number(\n      quoteResponse.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(quoteResponse.adjustedReturn?.usd ?? 0),\n  };\n};\n\nexport const getPriceImpactFromQuote = (\n  quote: QuoteResponse['quote'],\n): Pick<QuoteFetchData, 'price_impact'> => {\n  return { price_impact: Number(quote.priceData?.priceImpact ?? '0') };\n};\n\nexport const getTradeDataFromHistory = (\n  historyItem: BridgeHistoryItem,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0),\n    gas_included: historyItem.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(historyItem.quote),\n    quoted_time_minutes: Number(\n      historyItem.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0),\n  };\n};\n\nexport const getRequestMetadataFromHistory = (\n  historyItem: BridgeHistoryItem,\n  account?: AccountsControllerState['internalAccounts']['accounts'][string],\n): RequestMetadata => {\n  const { quote, slippagePercentage, isStxEnabled } = historyItem;\n\n  return {\n    slippage_limit: slippagePercentage,\n    custom_slippage: isCustomSlippage(slippagePercentage),\n    usd_amount_source: Number(historyItem.pricingData?.amountSentInUsd ?? 0),\n    swap_type: getSwapType(quote.srcChainId, quote.destChainId),\n    is_hardware_wallet: isHardwareWallet(account),\n    stx_enabled: isStxEnabled ?? false,\n    security_warnings: [],\n  };\n};\n\n/**\n * Get the properties for a swap transaction that is not in the txHistory\n *\n * @param transactionMeta - The transaction meta\n * @returns The properties for the swap transaction\n */\nexport const getEVMTxPropertiesFromTransactionMeta = (\n  transactionMeta: TransactionMeta,\n) => {\n  return {\n    source_transaction: [\n      TransactionStatus.failed,\n      TransactionStatus.dropped,\n      TransactionStatus.rejected,\n    ].includes(transactionMeta.status)\n      ? StatusTypes.FAILED\n      : StatusTypes.COMPLETE,\n    error_message: transactionMeta.error?.message\n      ? 'Failed to finalize swap tx'\n      : undefined,\n    chain_id_source: formatChainIdToCaip(transactionMeta.chainId),\n    chain_id_destination: formatChainIdToCaip(transactionMeta.chainId),\n    token_symbol_source: transactionMeta.sourceTokenSymbol ?? '',\n    token_symbol_destination: transactionMeta.destinationTokenSymbol ?? '',\n    usd_amount_source: 100,\n    stx_enabled: false,\n    token_address_source:\n      formatAddressToAssetId(\n        transactionMeta.sourceTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    token_address_destination:\n      formatAddressToAssetId(\n        transactionMeta.destinationTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    custom_slippage: false,\n    is_hardware_wallet: false,\n    swap_type:\n      transactionMeta.type &&\n      [TransactionType.swap, TransactionType.swapApproval].includes(\n        transactionMeta.type,\n      )\n        ? MetricsSwapType.SINGLE\n        : MetricsSwapType.CROSSCHAIN,\n    security_warnings: [],\n    price_impact: 0,\n    usd_quoted_gas: 0,\n    gas_included: false,\n    quoted_time_minutes: 0,\n    usd_quoted_return: 0,\n    provider: '' as `${string}_${string}`,\n    actual_time_minutes: 0,\n    quote_vs_execution_ratio: 0,\n    quoted_vs_used_gas_ratio: 0,\n    usd_actual_return: 0,\n    usd_actual_gas: 0,\n    action_type: MetricsActionType.SWAPBRIDGE_V1,\n  };\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"metrics.cjs","sourceRoot":"","sources":["../../src/utils/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountsControllerState } from '@metamask/accounts-controller';\nimport type {\n  QuoteResponse,\n  TxData,\n  QuoteMetadata,\n} from '@metamask/bridge-controller';\nimport {\n  type TxStatusData,\n  StatusTypes,\n  formatChainIdToHex,\n  isEthUsdt,\n  type RequestParams,\n  formatChainIdToCaip,\n  type TradeData,\n  formatProviderLabel,\n  type RequestMetadata,\n  isCustomSlippage,\n  getSwapType,\n  isHardwareWallet,\n  formatAddressToAssetId,\n  MetricsActionType,\n  MetricsSwapType,\n} from '@metamask/bridge-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport type { BridgeHistoryItem } from 'src/types';\n\nimport type { QuoteFetchData } from '../../../bridge-controller/src/utils/metrics/types';\n\nexport const getTxStatusesFromHistory = ({\n  status,\n  hasApprovalTx,\n  approvalTxId,\n  quote,\n}: BridgeHistoryItem): TxStatusData => {\n  const source_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n  const destination_transaction = status.destChain?.txHash\n    ? status.status\n    : StatusTypes.PENDING;\n\n  const hexChainId = formatChainIdToHex(quote.srcChainId);\n  const isEthUsdtTx = isEthUsdt(hexChainId, quote.srcAsset.address);\n  const allowance_reset_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : undefined;\n  const approval_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n\n  return {\n    allowance_reset_transaction: isEthUsdtTx\n      ? allowance_reset_transaction\n      : undefined,\n    approval_transaction:\n      hasApprovalTx || approvalTxId ? approval_transaction : undefined,\n    source_transaction,\n    destination_transaction:\n      status.status === StatusTypes.FAILED\n        ? StatusTypes.FAILED\n        : destination_transaction,\n  };\n};\n\nexport const getFinalizedTxProperties = (historyItem: BridgeHistoryItem) => {\n  return {\n    actual_time_minutes:\n      historyItem.completionTime && historyItem.startTime\n        ? (historyItem.completionTime - historyItem.startTime) / 60000\n        : 0,\n    usd_actual_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0), // TODO calculate based on USD price at completion time\n    usd_actual_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0), // TODO calculate based on USD price at completion time\n    quote_vs_execution_ratio: 1, // TODO calculate based on USD price at completion time\n    quoted_vs_used_gas_ratio: 1, // TODO calculate based on USD price at completion time\n  };\n};\n\nexport const getRequestParamFromHistory = (\n  historyItem: BridgeHistoryItem,\n): RequestParams => {\n  return {\n    chain_id_source: formatChainIdToCaip(historyItem.quote.srcChainId),\n    token_symbol_source: historyItem.quote.srcAsset.symbol,\n    token_address_source: historyItem.quote.srcAsset.assetId,\n    chain_id_destination: formatChainIdToCaip(historyItem.quote.destChainId),\n    token_symbol_destination: historyItem.quote.destAsset.symbol,\n    token_address_destination: historyItem.quote.destAsset.assetId,\n  };\n};\n\nexport const getTradeDataFromQuote = (\n  quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(quoteResponse.gasFee?.effective?.usd ?? 0),\n    gas_included: quoteResponse.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(quoteResponse.quote),\n    quoted_time_minutes: Number(\n      quoteResponse.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(quoteResponse.adjustedReturn?.usd ?? 0),\n  };\n};\n\nexport const getPriceImpactFromQuote = (\n  quote: QuoteResponse['quote'],\n): Pick<QuoteFetchData, 'price_impact'> => {\n  return { price_impact: Number(quote.priceData?.priceImpact ?? '0') };\n};\n\nexport const getTradeDataFromHistory = (\n  historyItem: BridgeHistoryItem,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0),\n    gas_included: historyItem.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(historyItem.quote),\n    quoted_time_minutes: Number(\n      historyItem.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0),\n  };\n};\n\nexport const getRequestMetadataFromHistory = (\n  historyItem: BridgeHistoryItem,\n  account?: AccountsControllerState['internalAccounts']['accounts'][string],\n): RequestMetadata => {\n  const { quote, slippagePercentage, isStxEnabled } = historyItem;\n\n  return {\n    slippage_limit: slippagePercentage,\n    custom_slippage: isCustomSlippage(slippagePercentage),\n    usd_amount_source: Number(historyItem.pricingData?.amountSentInUsd ?? 0),\n    swap_type: getSwapType(quote.srcChainId, quote.destChainId),\n    is_hardware_wallet: isHardwareWallet(account),\n    stx_enabled: isStxEnabled ?? false,\n    security_warnings: [],\n  };\n};\n\n/**\n * Get the properties for a swap transaction that is not in the txHistory\n *\n * @param transactionMeta - The transaction meta\n * @returns The properties for the swap transaction\n */\nexport const getEVMTxPropertiesFromTransactionMeta = (\n  transactionMeta: TransactionMeta,\n) => {\n  return {\n    source_transaction: [\n      TransactionStatus.failed,\n      TransactionStatus.dropped,\n      TransactionStatus.rejected,\n    ].includes(transactionMeta.status)\n      ? StatusTypes.FAILED\n      : StatusTypes.COMPLETE,\n    error_message: transactionMeta.error?.message\n      ? 'Failed to finalize swap tx'\n      : undefined,\n    chain_id_source: formatChainIdToCaip(transactionMeta.chainId),\n    chain_id_destination: formatChainIdToCaip(transactionMeta.chainId),\n    token_symbol_source: transactionMeta.sourceTokenSymbol ?? '',\n    token_symbol_destination: transactionMeta.destinationTokenSymbol ?? '',\n    usd_amount_source: 100,\n    stx_enabled: false,\n    token_address_source:\n      formatAddressToAssetId(\n        transactionMeta.sourceTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    token_address_destination:\n      formatAddressToAssetId(\n        transactionMeta.destinationTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    custom_slippage: false,\n    is_hardware_wallet: false,\n    swap_type:\n      transactionMeta.type &&\n      [TransactionType.swap, TransactionType.swapApproval].includes(\n        transactionMeta.type,\n      )\n        ? MetricsSwapType.SINGLE\n        : MetricsSwapType.CROSSCHAIN,\n    security_warnings: [],\n    price_impact: 0,\n    usd_quoted_gas: 0,\n    gas_included: false,\n    quoted_time_minutes: 0,\n    usd_quoted_return: 0,\n    provider: '' as `${string}_${string}`,\n    actual_time_minutes: 0,\n    quote_vs_execution_ratio: 0,\n    quoted_vs_used_gas_ratio: 0,\n    usd_actual_return: 0,\n    usd_actual_gas: 0,\n    action_type: MetricsActionType.SWAPBRIDGE_V1,\n  };\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/metrics.mjs b/dist/utils/metrics.mjs
index 344da400264885b679de8bb1c9eec13e3c6e497f..1bcf1a3b4073f74e3cf633f0617664d14a1d016c 100644
--- a/dist/utils/metrics.mjs
+++ b/dist/utils/metrics.mjs
@@ -49,7 +49,7 @@ export const getRequestParamFromHistory = (historyItem) => {
 };
 export const getTradeDataFromQuote = (quoteResponse) => {
     return {
-        usd_quoted_gas: Number(quoteResponse.gasFee?.usd ?? 0),
+        usd_quoted_gas: Number(quoteResponse.gasFee?.effective?.usd ?? 0),
         gas_included: quoteResponse.quote.gasIncluded ?? false,
         provider: formatProviderLabel(quoteResponse.quote),
         quoted_time_minutes: Number(quoteResponse.estimatedProcessingTimeInSeconds / 60),
diff --git a/dist/utils/metrics.mjs.map b/dist/utils/metrics.mjs.map
index 4126c1ba42d31e1cb748aadc70300ffcc24c2fca..0ead333f464ff89871d3858771cd588b07225d5f 100644
--- a/dist/utils/metrics.mjs.map
+++ b/dist/utils/metrics.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"metrics.mjs","sourceRoot":"","sources":["../../src/utils/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountsControllerState } from '@metamask/accounts-controller';\nimport type {\n  QuoteResponse,\n  TxData,\n  QuoteMetadata,\n} from '@metamask/bridge-controller';\nimport {\n  type TxStatusData,\n  StatusTypes,\n  formatChainIdToHex,\n  isEthUsdt,\n  type RequestParams,\n  formatChainIdToCaip,\n  type TradeData,\n  formatProviderLabel,\n  type RequestMetadata,\n  isCustomSlippage,\n  getSwapType,\n  isHardwareWallet,\n  formatAddressToAssetId,\n  MetricsActionType,\n  MetricsSwapType,\n} from '@metamask/bridge-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport type { BridgeHistoryItem } from 'src/types';\n\nimport type { QuoteFetchData } from '../../../bridge-controller/src/utils/metrics/types';\n\nexport const getTxStatusesFromHistory = ({\n  status,\n  hasApprovalTx,\n  approvalTxId,\n  quote,\n}: BridgeHistoryItem): TxStatusData => {\n  const source_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n  const destination_transaction = status.destChain?.txHash\n    ? status.status\n    : StatusTypes.PENDING;\n\n  const hexChainId = formatChainIdToHex(quote.srcChainId);\n  const isEthUsdtTx = isEthUsdt(hexChainId, quote.srcAsset.address);\n  const allowance_reset_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : undefined;\n  const approval_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n\n  return {\n    allowance_reset_transaction: isEthUsdtTx\n      ? allowance_reset_transaction\n      : undefined,\n    approval_transaction:\n      hasApprovalTx || approvalTxId ? approval_transaction : undefined,\n    source_transaction,\n    destination_transaction:\n      status.status === StatusTypes.FAILED\n        ? StatusTypes.FAILED\n        : destination_transaction,\n  };\n};\n\nexport const getFinalizedTxProperties = (historyItem: BridgeHistoryItem) => {\n  return {\n    actual_time_minutes:\n      historyItem.completionTime && historyItem.startTime\n        ? (historyItem.completionTime - historyItem.startTime) / 60000\n        : 0,\n    usd_actual_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0), // TODO calculate based on USD price at completion time\n    usd_actual_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0), // TODO calculate based on USD price at completion time\n    quote_vs_execution_ratio: 1, // TODO calculate based on USD price at completion time\n    quoted_vs_used_gas_ratio: 1, // TODO calculate based on USD price at completion time\n  };\n};\n\nexport const getRequestParamFromHistory = (\n  historyItem: BridgeHistoryItem,\n): RequestParams => {\n  return {\n    chain_id_source: formatChainIdToCaip(historyItem.quote.srcChainId),\n    token_symbol_source: historyItem.quote.srcAsset.symbol,\n    token_address_source: historyItem.quote.srcAsset.assetId,\n    chain_id_destination: formatChainIdToCaip(historyItem.quote.destChainId),\n    token_symbol_destination: historyItem.quote.destAsset.symbol,\n    token_address_destination: historyItem.quote.destAsset.assetId,\n  };\n};\n\nexport const getTradeDataFromQuote = (\n  quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(quoteResponse.gasFee?.usd ?? 0),\n    gas_included: quoteResponse.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(quoteResponse.quote),\n    quoted_time_minutes: Number(\n      quoteResponse.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(quoteResponse.adjustedReturn?.usd ?? 0),\n  };\n};\n\nexport const getPriceImpactFromQuote = (\n  quote: QuoteResponse['quote'],\n): Pick<QuoteFetchData, 'price_impact'> => {\n  return { price_impact: Number(quote.priceData?.priceImpact ?? '0') };\n};\n\nexport const getTradeDataFromHistory = (\n  historyItem: BridgeHistoryItem,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0),\n    gas_included: historyItem.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(historyItem.quote),\n    quoted_time_minutes: Number(\n      historyItem.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0),\n  };\n};\n\nexport const getRequestMetadataFromHistory = (\n  historyItem: BridgeHistoryItem,\n  account?: AccountsControllerState['internalAccounts']['accounts'][string],\n): RequestMetadata => {\n  const { quote, slippagePercentage, isStxEnabled } = historyItem;\n\n  return {\n    slippage_limit: slippagePercentage,\n    custom_slippage: isCustomSlippage(slippagePercentage),\n    usd_amount_source: Number(historyItem.pricingData?.amountSentInUsd ?? 0),\n    swap_type: getSwapType(quote.srcChainId, quote.destChainId),\n    is_hardware_wallet: isHardwareWallet(account),\n    stx_enabled: isStxEnabled ?? false,\n    security_warnings: [],\n  };\n};\n\n/**\n * Get the properties for a swap transaction that is not in the txHistory\n *\n * @param transactionMeta - The transaction meta\n * @returns The properties for the swap transaction\n */\nexport const getEVMTxPropertiesFromTransactionMeta = (\n  transactionMeta: TransactionMeta,\n) => {\n  return {\n    source_transaction: [\n      TransactionStatus.failed,\n      TransactionStatus.dropped,\n      TransactionStatus.rejected,\n    ].includes(transactionMeta.status)\n      ? StatusTypes.FAILED\n      : StatusTypes.COMPLETE,\n    error_message: transactionMeta.error?.message\n      ? 'Failed to finalize swap tx'\n      : undefined,\n    chain_id_source: formatChainIdToCaip(transactionMeta.chainId),\n    chain_id_destination: formatChainIdToCaip(transactionMeta.chainId),\n    token_symbol_source: transactionMeta.sourceTokenSymbol ?? '',\n    token_symbol_destination: transactionMeta.destinationTokenSymbol ?? '',\n    usd_amount_source: 100,\n    stx_enabled: false,\n    token_address_source:\n      formatAddressToAssetId(\n        transactionMeta.sourceTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    token_address_destination:\n      formatAddressToAssetId(\n        transactionMeta.destinationTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    custom_slippage: false,\n    is_hardware_wallet: false,\n    swap_type:\n      transactionMeta.type &&\n      [TransactionType.swap, TransactionType.swapApproval].includes(\n        transactionMeta.type,\n      )\n        ? MetricsSwapType.SINGLE\n        : MetricsSwapType.CROSSCHAIN,\n    security_warnings: [],\n    price_impact: 0,\n    usd_quoted_gas: 0,\n    gas_included: false,\n    quoted_time_minutes: 0,\n    usd_quoted_return: 0,\n    provider: '' as `${string}_${string}`,\n    actual_time_minutes: 0,\n    quote_vs_execution_ratio: 0,\n    quoted_vs_used_gas_ratio: 0,\n    usd_actual_return: 0,\n    usd_actual_gas: 0,\n    action_type: MetricsActionType.SWAPBRIDGE_V1,\n  };\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"metrics.mjs","sourceRoot":"","sources":["../../src/utils/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountsControllerState } from '@metamask/accounts-controller';\nimport type {\n  QuoteResponse,\n  TxData,\n  QuoteMetadata,\n} from '@metamask/bridge-controller';\nimport {\n  type TxStatusData,\n  StatusTypes,\n  formatChainIdToHex,\n  isEthUsdt,\n  type RequestParams,\n  formatChainIdToCaip,\n  type TradeData,\n  formatProviderLabel,\n  type RequestMetadata,\n  isCustomSlippage,\n  getSwapType,\n  isHardwareWallet,\n  formatAddressToAssetId,\n  MetricsActionType,\n  MetricsSwapType,\n} from '@metamask/bridge-controller';\nimport {\n  TransactionStatus,\n  TransactionType,\n  type TransactionMeta,\n} from '@metamask/transaction-controller';\nimport type { CaipAssetType } from '@metamask/utils';\nimport type { BridgeHistoryItem } from 'src/types';\n\nimport type { QuoteFetchData } from '../../../bridge-controller/src/utils/metrics/types';\n\nexport const getTxStatusesFromHistory = ({\n  status,\n  hasApprovalTx,\n  approvalTxId,\n  quote,\n}: BridgeHistoryItem): TxStatusData => {\n  const source_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n  const destination_transaction = status.destChain?.txHash\n    ? status.status\n    : StatusTypes.PENDING;\n\n  const hexChainId = formatChainIdToHex(quote.srcChainId);\n  const isEthUsdtTx = isEthUsdt(hexChainId, quote.srcAsset.address);\n  const allowance_reset_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : undefined;\n  const approval_transaction = status.srcChain.txHash\n    ? StatusTypes.COMPLETE\n    : StatusTypes.PENDING;\n\n  return {\n    allowance_reset_transaction: isEthUsdtTx\n      ? allowance_reset_transaction\n      : undefined,\n    approval_transaction:\n      hasApprovalTx || approvalTxId ? approval_transaction : undefined,\n    source_transaction,\n    destination_transaction:\n      status.status === StatusTypes.FAILED\n        ? StatusTypes.FAILED\n        : destination_transaction,\n  };\n};\n\nexport const getFinalizedTxProperties = (historyItem: BridgeHistoryItem) => {\n  return {\n    actual_time_minutes:\n      historyItem.completionTime && historyItem.startTime\n        ? (historyItem.completionTime - historyItem.startTime) / 60000\n        : 0,\n    usd_actual_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0), // TODO calculate based on USD price at completion time\n    usd_actual_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0), // TODO calculate based on USD price at completion time\n    quote_vs_execution_ratio: 1, // TODO calculate based on USD price at completion time\n    quoted_vs_used_gas_ratio: 1, // TODO calculate based on USD price at completion time\n  };\n};\n\nexport const getRequestParamFromHistory = (\n  historyItem: BridgeHistoryItem,\n): RequestParams => {\n  return {\n    chain_id_source: formatChainIdToCaip(historyItem.quote.srcChainId),\n    token_symbol_source: historyItem.quote.srcAsset.symbol,\n    token_address_source: historyItem.quote.srcAsset.assetId,\n    chain_id_destination: formatChainIdToCaip(historyItem.quote.destChainId),\n    token_symbol_destination: historyItem.quote.destAsset.symbol,\n    token_address_destination: historyItem.quote.destAsset.assetId,\n  };\n};\n\nexport const getTradeDataFromQuote = (\n  quoteResponse: QuoteResponse<TxData | string> & QuoteMetadata,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(quoteResponse.gasFee?.effective?.usd ?? 0),\n    gas_included: quoteResponse.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(quoteResponse.quote),\n    quoted_time_minutes: Number(\n      quoteResponse.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(quoteResponse.adjustedReturn?.usd ?? 0),\n  };\n};\n\nexport const getPriceImpactFromQuote = (\n  quote: QuoteResponse['quote'],\n): Pick<QuoteFetchData, 'price_impact'> => {\n  return { price_impact: Number(quote.priceData?.priceImpact ?? '0') };\n};\n\nexport const getTradeDataFromHistory = (\n  historyItem: BridgeHistoryItem,\n): TradeData => {\n  return {\n    usd_quoted_gas: Number(historyItem.pricingData?.quotedGasInUsd ?? 0),\n    gas_included: historyItem.quote.gasIncluded ?? false,\n    provider: formatProviderLabel(historyItem.quote),\n    quoted_time_minutes: Number(\n      historyItem.estimatedProcessingTimeInSeconds / 60,\n    ),\n    usd_quoted_return: Number(historyItem.pricingData?.quotedReturnInUsd ?? 0),\n  };\n};\n\nexport const getRequestMetadataFromHistory = (\n  historyItem: BridgeHistoryItem,\n  account?: AccountsControllerState['internalAccounts']['accounts'][string],\n): RequestMetadata => {\n  const { quote, slippagePercentage, isStxEnabled } = historyItem;\n\n  return {\n    slippage_limit: slippagePercentage,\n    custom_slippage: isCustomSlippage(slippagePercentage),\n    usd_amount_source: Number(historyItem.pricingData?.amountSentInUsd ?? 0),\n    swap_type: getSwapType(quote.srcChainId, quote.destChainId),\n    is_hardware_wallet: isHardwareWallet(account),\n    stx_enabled: isStxEnabled ?? false,\n    security_warnings: [],\n  };\n};\n\n/**\n * Get the properties for a swap transaction that is not in the txHistory\n *\n * @param transactionMeta - The transaction meta\n * @returns The properties for the swap transaction\n */\nexport const getEVMTxPropertiesFromTransactionMeta = (\n  transactionMeta: TransactionMeta,\n) => {\n  return {\n    source_transaction: [\n      TransactionStatus.failed,\n      TransactionStatus.dropped,\n      TransactionStatus.rejected,\n    ].includes(transactionMeta.status)\n      ? StatusTypes.FAILED\n      : StatusTypes.COMPLETE,\n    error_message: transactionMeta.error?.message\n      ? 'Failed to finalize swap tx'\n      : undefined,\n    chain_id_source: formatChainIdToCaip(transactionMeta.chainId),\n    chain_id_destination: formatChainIdToCaip(transactionMeta.chainId),\n    token_symbol_source: transactionMeta.sourceTokenSymbol ?? '',\n    token_symbol_destination: transactionMeta.destinationTokenSymbol ?? '',\n    usd_amount_source: 100,\n    stx_enabled: false,\n    token_address_source:\n      formatAddressToAssetId(\n        transactionMeta.sourceTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    token_address_destination:\n      formatAddressToAssetId(\n        transactionMeta.destinationTokenAddress ?? '',\n        transactionMeta.chainId,\n      ) ?? ('' as CaipAssetType),\n    custom_slippage: false,\n    is_hardware_wallet: false,\n    swap_type:\n      transactionMeta.type &&\n      [TransactionType.swap, TransactionType.swapApproval].includes(\n        transactionMeta.type,\n      )\n        ? MetricsSwapType.SINGLE\n        : MetricsSwapType.CROSSCHAIN,\n    security_warnings: [],\n    price_impact: 0,\n    usd_quoted_gas: 0,\n    gas_included: false,\n    quoted_time_minutes: 0,\n    usd_quoted_return: 0,\n    provider: '' as `${string}_${string}`,\n    actual_time_minutes: 0,\n    quote_vs_execution_ratio: 0,\n    quoted_vs_used_gas_ratio: 0,\n    usd_actual_return: 0,\n    usd_actual_gas: 0,\n    action_type: MetricsActionType.SWAPBRIDGE_V1,\n  };\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/transaction.d.cts b/dist/utils/transaction.d.cts
index 5b1216758111a062774371da8ec34b54572c661c..5cacbb48005f9ed227ed4041898734149e6bcb75 100644
--- a/dist/utils/transaction.d.cts
+++ b/dist/utils/transaction.d.cts
@@ -13,6 +13,7 @@ export declare const getUSDTAllowanceResetTx: (messagingSystem: BridgeStatusCont
     from: string;
     gasLimit: number | null;
     chainId: number;
+    effectiveGas?: number | undefined;
 } | undefined>;
 export declare const getStatusRequestParams: (quoteResponse: QuoteResponse<string | TxData>) => {
     bridgeId: string;
@@ -177,6 +178,7 @@ export declare const getClientRequest: (quoteResponse: Omit<QuoteResponse<string
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } & string);
             scope: SolScope;
         };
@@ -200,6 +202,7 @@ export declare const getAddTransactionBatchParams: ({ messagingSystem, isBridgeT
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
     resetApproval?: {
         data: string;
@@ -208,6 +211,7 @@ export declare const getAddTransactionBatchParams: ({ messagingSystem, isBridgeT
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
     requireApproval?: boolean | undefined;
 }) => Promise<import("@metamask/transaction-controller").TransactionBatchRequest>;
diff --git a/dist/utils/transaction.d.cts.map b/dist/utils/transaction.d.cts.map
index e1ee1eb7607cc3049578c91547375c0f1bafaa70..55503d004c18432e5d249a8f2e17ea42b30a28fe 100644
--- a/dist/utils/transaction.d.cts.map
+++ b/dist/utils/transaction.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"transaction.d.cts","sourceRoot":"","sources":["../../src/utils/transaction.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,uBAAuB,EAAE,sCAAsC;AAC7E,OAAO,KAAK,EAAE,MAAM,EAAE,oCAAoC;AAC1D,OAAO,EAML,KAAK,aAAa,EAClB,KAAK,aAAa,EACnB,oCAAoC;AAErC,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EACV,sBAAsB,EACtB,qBAAqB,EACtB,yCAAyC;AAC1C,OAAO,EAEL,eAAe,EACf,KAAK,eAAe,EACrB,yCAAyC;AAQ1C,OAAO,KAAK,EACV,+BAA+B,EAC/B,qBAAqB,EACtB,qBAAiB;AAElB,eAAO,MAAM,gBAAgB,cAAgD,CAAC;AAE9E,eAAO,MAAM,uBAAuB,oEAEnB,cAAc,MAAM,GAAG,MAAM,CAAC,GAAG,aAAa;;;;;;;cAqB9D,CAAC;AAEF,eAAO,MAAM,sBAAsB,kBAClB,cAAc,MAAM,GAAG,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAU9C,CAAC;AAEF,eAAO,MAAM,eAAe,kBACX,KAAK,cAAc,MAAM,GAAG,MAAM,CAAC,EAAE,UAAU,GAAG,OAAO,CAAC,GACvE,aAAa,iBACA,MAAM,KACpB,KACD,eAAe,EACf,iBAAiB,GAAG,QAAQ,GAAG,MAAM,GAAG,UAAU,GAAG,IAAI,CAmB1D,CAAC;AAEF,eAAO,MAAM,sBAAsB,iBAE7B,MAAM,GACN;IAAE,MAAM,EAAE,OAAO,MAAM,EAAE,MAAM,CAAC,CAAA;CAAE,GAClC;IAAE,SAAS,EAAE,MAAM,CAAA;CAAE,iBACV,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAC/E,eAAe,GAAG,qBAsDpB,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,cAAc,MAAM,GAAG,MAAM,CAAC,kBAY9C,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;CAmBjF,CAAC;AAEF,eAAO,MAAM,eAAe,gBACb,OAAO,mCACa,MAAM;;;;MAMtC,sBAiBF,CAAC;AAEF,eAAO,MAAM,4BAA4B;;gBAgB3B,OAAO;WACZ,MAAM;mBACE,KAAK,aAAa,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,aAAa;sBACtD,OAAO,sBAAsB,SAAS,CAAC,cAAc;;;;;;;;;;;;;;;;;;iFAkFxE,CAAC;AAEF,eAAO,MAAM,gCAAgC;;yBAOtB,OAAO,sBAAsB,SAAS,CAAC,iBAAiB;aACpE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkChB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"transaction.d.cts","sourceRoot":"","sources":["../../src/utils/transaction.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,uBAAuB,EAAE,sCAAsC;AAC7E,OAAO,KAAK,EAAE,MAAM,EAAE,oCAAoC;AAC1D,OAAO,EAML,KAAK,aAAa,EAClB,KAAK,aAAa,EACnB,oCAAoC;AAErC,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EACV,sBAAsB,EACtB,qBAAqB,EACtB,yCAAyC;AAC1C,OAAO,EAEL,eAAe,EACf,KAAK,eAAe,EACrB,yCAAyC;AAQ1C,OAAO,KAAK,EACV,+BAA+B,EAC/B,qBAAqB,EACtB,qBAAiB;AAElB,eAAO,MAAM,gBAAgB,cAAgD,CAAC;AAE9E,eAAO,MAAM,uBAAuB,oEAEnB,cAAc,MAAM,GAAG,MAAM,CAAC,GAAG,aAAa;;;;;;;;cAqB9D,CAAC;AAEF,eAAO,MAAM,sBAAsB,kBAClB,cAAc,MAAM,GAAG,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAU9C,CAAC;AAEF,eAAO,MAAM,eAAe,kBACX,KAAK,cAAc,MAAM,GAAG,MAAM,CAAC,EAAE,UAAU,GAAG,OAAO,CAAC,GACvE,aAAa,iBACA,MAAM,KACpB,KACD,eAAe,EACf,iBAAiB,GAAG,QAAQ,GAAG,MAAM,GAAG,UAAU,GAAG,IAAI,CAmB1D,CAAC;AAEF,eAAO,MAAM,sBAAsB,iBAE7B,MAAM,GACN;IAAE,MAAM,EAAE,OAAO,MAAM,EAAE,MAAM,CAAC,CAAA;CAAE,GAClC;IAAE,SAAS,EAAE,MAAM,CAAA;CAAE,iBACV,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAC/E,eAAe,GAAG,qBAsDpB,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,cAAc,MAAM,GAAG,MAAM,CAAC,kBAY9C,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CAmBjF,CAAC;AAEF,eAAO,MAAM,eAAe,gBACb,OAAO,mCACa,MAAM;;;;MAMtC,sBAiBF,CAAC;AAEF,eAAO,MAAM,4BAA4B;;gBAgB3B,OAAO;WACZ,MAAM;mBACE,KAAK,aAAa,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,aAAa;sBACtD,OAAO,sBAAsB,SAAS,CAAC,cAAc;;;;;;;;;;;;;;;;;;;;iFAkFxE,CAAC;AAEF,eAAO,MAAM,gCAAgC;;yBAOtB,OAAO,sBAAsB,SAAS,CAAC,iBAAiB;aACpE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkChB,CAAC"}
\ No newline at end of file
diff --git a/dist/utils/transaction.d.mts b/dist/utils/transaction.d.mts
index f48486e4d945c1aaa31eb5502933e892a98cc703..dabb812daf6ec775b85a9183fcfda4ee2c22e9d7 100644
--- a/dist/utils/transaction.d.mts
+++ b/dist/utils/transaction.d.mts
@@ -13,6 +13,7 @@ export declare const getUSDTAllowanceResetTx: (messagingSystem: BridgeStatusCont
     from: string;
     gasLimit: number | null;
     chainId: number;
+    effectiveGas?: number | undefined;
 } | undefined>;
 export declare const getStatusRequestParams: (quoteResponse: QuoteResponse<string | TxData>) => {
     bridgeId: string;
@@ -177,6 +178,7 @@ export declare const getClientRequest: (quoteResponse: Omit<QuoteResponse<string
                 from: string;
                 gasLimit: number | null;
                 chainId: number;
+                effectiveGas?: number | undefined;
             } & string);
             scope: SolScope;
         };
@@ -200,6 +202,7 @@ export declare const getAddTransactionBatchParams: ({ messagingSystem, isBridgeT
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
     resetApproval?: {
         data: string;
@@ -208,6 +211,7 @@ export declare const getAddTransactionBatchParams: ({ messagingSystem, isBridgeT
         from: string;
         gasLimit: number | null;
         chainId: number;
+        effectiveGas?: number | undefined;
     } | undefined;
     requireApproval?: boolean | undefined;
 }) => Promise<import("@metamask/transaction-controller").TransactionBatchRequest>;
diff --git a/dist/utils/transaction.d.mts.map b/dist/utils/transaction.d.mts.map
index 1a3bddefc7a475d5fc8c990bfff0df1b914c02b0..1fa4ab57eedc082d51c1edfb7d318a7a4c6401dc 100644
--- a/dist/utils/transaction.d.mts.map
+++ b/dist/utils/transaction.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"transaction.d.mts","sourceRoot":"","sources":["../../src/utils/transaction.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,uBAAuB,EAAE,sCAAsC;AAC7E,OAAO,KAAK,EAAE,MAAM,EAAE,oCAAoC;AAC1D,OAAO,EAML,KAAK,aAAa,EAClB,KAAK,aAAa,EACnB,oCAAoC;AAErC,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EACV,sBAAsB,EACtB,qBAAqB,EACtB,yCAAyC;AAC1C,OAAO,EAEL,eAAe,EACf,KAAK,eAAe,EACrB,yCAAyC;AAQ1C,OAAO,KAAK,EACV,+BAA+B,EAC/B,qBAAqB,EACtB,qBAAiB;AAElB,eAAO,MAAM,gBAAgB,cAAgD,CAAC;AAE9E,eAAO,MAAM,uBAAuB,oEAEnB,cAAc,MAAM,GAAG,MAAM,CAAC,GAAG,aAAa;;;;;;;cAqB9D,CAAC;AAEF,eAAO,MAAM,sBAAsB,kBAClB,cAAc,MAAM,GAAG,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAU9C,CAAC;AAEF,eAAO,MAAM,eAAe,kBACX,KAAK,cAAc,MAAM,GAAG,MAAM,CAAC,EAAE,UAAU,GAAG,OAAO,CAAC,GACvE,aAAa,iBACA,MAAM,KACpB,KACD,eAAe,EACf,iBAAiB,GAAG,QAAQ,GAAG,MAAM,GAAG,UAAU,GAAG,IAAI,CAmB1D,CAAC;AAEF,eAAO,MAAM,sBAAsB,iBAE7B,MAAM,GACN;IAAE,MAAM,EAAE,OAAO,MAAM,EAAE,MAAM,CAAC,CAAA;CAAE,GAClC;IAAE,SAAS,EAAE,MAAM,CAAA;CAAE,iBACV,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAC/E,eAAe,GAAG,qBAsDpB,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,cAAc,MAAM,GAAG,MAAM,CAAC,kBAY9C,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;CAmBjF,CAAC;AAEF,eAAO,MAAM,eAAe,gBACb,OAAO,mCACa,MAAM;;;;MAMtC,sBAiBF,CAAC;AAEF,eAAO,MAAM,4BAA4B;;gBAgB3B,OAAO;WACZ,MAAM;mBACE,KAAK,aAAa,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,aAAa;sBACtD,OAAO,sBAAsB,SAAS,CAAC,cAAc;;;;;;;;;;;;;;;;;;iFAkFxE,CAAC;AAEF,eAAO,MAAM,gCAAgC;;yBAOtB,OAAO,sBAAsB,SAAS,CAAC,iBAAiB;aACpE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkChB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"transaction.d.mts","sourceRoot":"","sources":["../../src/utils/transaction.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,uBAAuB,EAAE,sCAAsC;AAC7E,OAAO,KAAK,EAAE,MAAM,EAAE,oCAAoC;AAC1D,OAAO,EAML,KAAK,aAAa,EAClB,KAAK,aAAa,EACnB,oCAAoC;AAErC,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,KAAK,EACV,sBAAsB,EACtB,qBAAqB,EACtB,yCAAyC;AAC1C,OAAO,EAEL,eAAe,EACf,KAAK,eAAe,EACrB,yCAAyC;AAQ1C,OAAO,KAAK,EACV,+BAA+B,EAC/B,qBAAqB,EACtB,qBAAiB;AAElB,eAAO,MAAM,gBAAgB,cAAgD,CAAC;AAE9E,eAAO,MAAM,uBAAuB,oEAEnB,cAAc,MAAM,GAAG,MAAM,CAAC,GAAG,aAAa;;;;;;;;cAqB9D,CAAC;AAEF,eAAO,MAAM,sBAAsB,kBAClB,cAAc,MAAM,GAAG,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAU9C,CAAC;AAEF,eAAO,MAAM,eAAe,kBACX,KAAK,cAAc,MAAM,GAAG,MAAM,CAAC,EAAE,UAAU,GAAG,OAAO,CAAC,GACvE,aAAa,iBACA,MAAM,KACpB,KACD,eAAe,EACf,iBAAiB,GAAG,QAAQ,GAAG,MAAM,GAAG,UAAU,GAAG,IAAI,CAmB1D,CAAC;AAEF,eAAO,MAAM,sBAAsB,iBAE7B,MAAM,GACN;IAAE,MAAM,EAAE,OAAO,MAAM,EAAE,MAAM,CAAC,CAAA;CAAE,GAClC;IAAE,SAAS,EAAE,MAAM,CAAA;CAAE,iBACV,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAC/E,eAAe,GAAG,qBAsDpB,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,cAAc,MAAM,GAAG,MAAM,CAAC,kBAY9C,CAAC;AAEF,eAAO,MAAM,gBAAgB,kBACZ,KAAK,cAAc,MAAM,CAAC,EAAE,UAAU,CAAC,GAAG,aAAa,mBACrD,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CAmBjF,CAAC;AAEF,eAAO,MAAM,eAAe,gBACb,OAAO,mCACa,MAAM;;;;MAMtC,sBAiBF,CAAC;AAEF,eAAO,MAAM,4BAA4B;;gBAgB3B,OAAO;WACZ,MAAM;mBACE,KAAK,aAAa,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,aAAa;sBACtD,OAAO,sBAAsB,SAAS,CAAC,cAAc;;;;;;;;;;;;;;;;;;;;iFAkFxE,CAAC;AAEF,eAAO,MAAM,gCAAgC;;yBAOtB,OAAO,sBAAsB,SAAS,CAAC,iBAAiB;aACpE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkChB,CAAC"}
\ No newline at end of file
