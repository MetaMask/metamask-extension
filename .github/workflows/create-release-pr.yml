name: Create Release Pull Request

on:
  workflow_dispatch:
    inputs:
      semver-version:
        description: 'A semantic version, eg: x.x.x'
        required: true
      previous-version-ref:
        description: 'Previous release version branch name, tag or commit hash (e.g., Version-vx.y.z, v7.7.0, or 76fbc500034db9779e9ff7ce637ac5be1da0493d)'
        required: true

  workflow_call:
    inputs:
      semver-version:
        required: true
        type: string
      previous-version-ref:
        required: true
        type: string
    secrets:
      github-token:
        required: false
      google-application-creds-base64:
        required: false
      PR_TOKEN:
        required: false
      GCP_RLS_SHEET_ACCOUNT_BASE64:
        required: false

jobs:
  resolve-bases:
    # Determines if the release is hotfix or not based on semver. Then sets the appropriate base branches for the checkout and release PR.
    runs-on: ubuntu-latest
    outputs:
      checkout_base: ${{ steps.out.outputs.checkout_base }}
      release_base: ${{ steps.out.outputs.release_base }}
    steps:
      - id: out
        shell: bash
        env:
          SEMVER: ${{ inputs.semver-version }}
        run: |
          set -euo pipefail

          # Validate semver
          if ! [[ "${SEMVER:-}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: semver-version must be numeric X.Y.Z, got: ${SEMVER:-<empty>}" >&2
            exit 1
          fi

          patch="${SEMVER##*.}"
          if [ "$patch" -gt 0 ]; then
            echo "Detected hotfix (patch=$patch): using stable for both bases."
            echo "checkout_base=stable" >> "$GITHUB_OUTPUT"
            echo "release_base=stable" >> "$GITHUB_OUTPUT"
          else
            echo "Detected non-hotfix (patch=0): using main for checkout and stable for release PR base."
            echo "checkout_base=main" >> "$GITHUB_OUTPUT"
            echo "release_base=stable" >> "$GITHUB_OUTPUT"
          fi

  create-release-pr:
    needs: resolve-bases
    name: Create Release Pull Request using Github Tools
    uses: MetaMask/github-tools/.github/workflows/create-release-pr.yml@ddac3ee395896ff15df6fc561ff710efbb0dd3fa
    with:
      platform: extension
      checkout-base-branch: ${{ needs.resolve-bases.outputs.checkout_base }}
      release-pr-base-branch: ${{ needs.resolve-bases.outputs.release_base }}
      semver-version: ${{ inputs.semver-version }}
      previous-version-ref: ${{ inputs.previous-version-ref }}
      github-tools-version: ddac3ee395896ff15df6fc561ff710efbb0dd3fa
    secrets:
      # This token needs write permissions to metamask-extension & read permissions to metamask-planning
      # If called from auto-create-release-pr use the PR_TOKEN passed in as an input, if called manually use github secret token values
      # (this is due to github limitations on fetching secrets from called workflows).
      github-token: ${{ github.event_name == 'workflow_dispatch' && secrets.PR_TOKEN || secrets.github-token }}
      google-application-creds-base64: ${{ github.event_name == 'workflow_dispatch' && secrets.GCP_RLS_SHEET_ACCOUNT_BASE64 || secrets.google-application-creds-base64 }}
    permissions:
      contents: write
      pull-requests: write
