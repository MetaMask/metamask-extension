name: Wait for CircleCI workflow status

on:
  workflow_call:

jobs:
  wait-for-circleci-workflow-status:
    name: Wait for CircleCI workflow status
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CircleCI workflow status
        env:
          OWNER: ${{ github.repository_owner }}
          REPOSITORY: ${{ github.event.repository.name }}
          # For a `pull_request` event, the branch is `github.head_ref``.
          # For a `push` event, the branch is `github.ref_name`.
          BRANCH: ${{ github.head_ref || github.ref_name }}
          # For a `pull_request` event, the head commit hash is `github.event.pull_request.head.sha`.
          # For a `push` event, the head commit hash is `github.sha`.
          HEAD_COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          pipeline_id=$(curl --silent "https://circleci.com/api/v2/project/gh/$OWNER/$REPOSITORY/pipeline?branch=$BRANCH" | jq --arg head_commit_hash "${HEAD_COMMIT_HASH}" -r '.items | map(select(.vcs.revision == $head_commit_hash)) | first | .id')
          echo "Waiting for pipeline '${pipeline_id}', commit hash '${HEAD_COMMIT_HASH}'"
          workflow_status=$(curl --silent "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" | jq -r ".items[0].status")

          if [ "$workflow_status" == "running" ]; then
            while [ "$workflow_status" == "running" ]; do
              sleep 30
              workflow_status=$(curl --silent "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" | jq -r ".items[0].status")
            done
          fi

          # The "not_run" only happens when you're developing CI workflows and testing weird cases
          if [ "$workflow_status" != "success" ] && [ "$workflow_status" != "not_run" ]; then
            echo "::error::Workflow status is '$workflow_status'. Exiting with error."
            exit 1
          fi
